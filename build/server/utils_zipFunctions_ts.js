"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "utils_zipFunctions_ts";
exports.ids = ["utils_zipFunctions_ts"];
exports.modules = {

/***/ "./utils/zipFunctions.ts":
/*!*******************************!*\
  !*** ./utils/zipFunctions.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addEntryToZippable\": () => (/* binding */ addEntryToZippable),\n/* harmony export */   \"addFileToZip\": () => (/* binding */ addFileToZip),\n/* harmony export */   \"createZippable\": () => (/* binding */ createZippable),\n/* harmony export */   \"isFileInZip\": () => (/* binding */ isFileInZip),\n/* harmony export */   \"unarchive\": () => (/* binding */ unarchive),\n/* harmony export */   \"unzip\": () => (/* binding */ unzipAsync),\n/* harmony export */   \"zipAsync\": () => (/* binding */ zipAsync)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/constants */ \"./utils/constants.ts\");\n/* harmony import */ var utils_functions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/functions */ \"./utils/functions.ts\");\n\n\n\nconst createZippable = (path, file)=>path.split(\"/\").reduceRight((value, key)=>({\n            [key]: value\n        }), [\n        file,\n        utils_constants__WEBPACK_IMPORTED_MODULE_1__.BASE_ZIP_CONFIG, \n    ]);\nconst addEntryToZippable = (oldZippable, newZippable)=>{\n    const [[key, value]] = Object.entries(newZippable);\n    // eslint-disable-next-line no-param-reassign\n    oldZippable[key] = key in oldZippable ? addEntryToZippable(oldZippable[key], newZippable[key]) : value;\n    return oldZippable;\n};\nconst unzipAsync = (zipFile)=>new Promise((resolve, reject)=>{\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! fflate */ \"fflate\")).then(({ unzip  })=>unzip(zipFile, (error, data)=>error ? reject(error) : resolve(data)));\n    });\nconst zipAsync = (data, opts = utils_constants__WEBPACK_IMPORTED_MODULE_1__.BASE_ZIP_CONFIG)=>new Promise((resolve, reject)=>{\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! fflate */ \"fflate\")).then(({ zip  })=>zip(data, opts, (error, zipData)=>error ? reject(error) : resolve(zipData)));\n    });\nconst addFileToZip = async (buffer, filePath, zipFilePath, readFile)=>Buffer.from(await zipAsync(addEntryToZippable(buffer.length > 0 && await unzipAsync(buffer) || {}, createZippable(zipFilePath, await readFile(filePath)))));\nconst isFileInZip = (buffer, zipFilePath)=>new Promise((resolve, reject)=>{\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! fflate */ \"fflate\")).then(({ unzip  })=>unzip(buffer, (unzipError, zipData)=>unzipError ? reject(unzipError) : resolve(Object.keys(zipData).includes(zipFilePath))));\n    });\n\nconst unarchive = async (path, data)=>{\n    if (!window.SevenZip) {\n        await (0,utils_functions__WEBPACK_IMPORTED_MODULE_2__.loadFiles)([\n            \"System/7zip/7zz.es6.js\"\n        ]);\n    }\n    if (!window.SevenZip) return {};\n    const sevenZip = await window.SevenZip();\n    const fileName = (0,path__WEBPACK_IMPORTED_MODULE_0__.basename)(path);\n    const extractFolder = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(\"/\", (0,path__WEBPACK_IMPORTED_MODULE_0__.basename)(path, (0,path__WEBPACK_IMPORTED_MODULE_0__.extname)(path)));\n    sevenZip.FS.mkdir(extractFolder);\n    sevenZip.FS.chdir(extractFolder);\n    const stream = sevenZip.FS.open(fileName, \"w+\");\n    sevenZip.FS.write(stream, data, 0, data.length);\n    sevenZip.FS.close(stream);\n    sevenZip.callMain([\n        \"x\",\n        fileName\n    ]);\n    const extractedFiles = sevenZip.FS.readdir(extractFolder);\n    const reduceFiles = (currentPath)=>(accFiles, file)=>{\n            if ([\n                \".\",\n                \"..\",\n                fileName\n            ].includes(file)) return accFiles;\n            const filePath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(currentPath, file);\n            const extractPath = filePath.replace(extractFolder, \"\");\n            try {\n                sevenZip.FS.chmod(filePath, 511);\n            } catch  {\n            // Ignore failure to change permissions\n            }\n            Object.assign(accFiles, sevenZip.FS.isDir(sevenZip.FS.stat(filePath).mode) ? {\n                [(0,path__WEBPACK_IMPORTED_MODULE_0__.join)(extractPath, \"/\")]: Buffer.from(\"\"),\n                ...sevenZip.FS.readdir(filePath).reduce(reduceFiles(filePath), {})\n            } : {\n                [extractPath]: sevenZip.FS.readFile(filePath, {\n                    flags: \"r\"\n                })\n            });\n            return accFiles;\n        };\n    return extractedFiles.reduce(reduceFiles(extractFolder), {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/zipFunctions.ts\n");

/***/ })

};
;