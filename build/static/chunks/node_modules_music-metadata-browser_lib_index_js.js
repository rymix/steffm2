/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_music-metadata-browser_lib_index_js"],{

/***/ "./node_modules/content-type/index.js":
/*!********************************************!*\
  !*** ./node_modules/content-type/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g // eslint-disable-line no-control-regex\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/ // eslint-disable-line no-control-regex\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.slice(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value.charCodeAt(0) === 0x22 /* \" */) {\n        // remove quotes\n        value = value.slice(1, -1)\n\n        // remove escapes\n        if (value.indexOf('\\\\') !== -1) {\n          value = value.replace(QESC_REGEXP, '$1')\n        }\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/content-type/index.js\n"));

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/debug/src/browser.js\n"));

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/debug/src/common.js\n"));

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n"));

/***/ }),

/***/ "./node_modules/file-type/core.js":
/*!****************************************!*\
  !*** ./node_modules/file-type/core.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst {\n\tstringToBytes,\n\ttarHeaderChecksumMatches,\n\tuint32SyncSafeToken\n} = __webpack_require__(/*! ./util */ \"./node_modules/file-type/util.js\");\nconst supported = __webpack_require__(/*! ./supported */ \"./node_modules/file-type/supported.js\");\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\n\nasync function fromStream(stream) {\n\tconst tokenizer = await strtok3.fromStream(stream);\n\ttry {\n\t\treturn await fromTokenizer(tokenizer);\n\t} finally {\n\t\tawait tokenizer.close();\n\t}\n}\n\nasync function fromBuffer(input) {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buffer = input instanceof Buffer ? input : Buffer.from(input);\n\n\tif (!(buffer && buffer.length > 1)) {\n\t\treturn;\n\t}\n\n\tconst tokenizer = strtok3.fromBuffer(buffer);\n\treturn fromTokenizer(tokenizer);\n}\n\nfunction _check(buffer, headers, options) {\n\toptions = {\n\t\toffset: 0,\n\t\t...options\n\t};\n\n\tfor (const [index, header] of headers.entries()) {\n\t\t// If a bitmask is set\n\t\tif (options.mask) {\n\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (header !== buffer[index + options.offset]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function fromTokenizer(tokenizer) {\n\ttry {\n\t\treturn _fromTokenizer(tokenizer);\n\t} catch (error) {\n\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nasync function _fromTokenizer(tokenizer) {\n\tlet buffer = Buffer.alloc(minimumBytes);\n\tconst bytesRead = 12;\n\tconst check = (header, options) => _check(buffer, header, options);\n\tconst checkString = (header, options) => check(stringToBytes(header), options);\n\n\t// Keep reading until EOF if the file size is unknown.\n\tif (!tokenizer.fileInfo.size) {\n\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t}\n\n\tawait tokenizer.peekBuffer(buffer, {length: bytesRead, mayBeLess: true});\n\n\t// -- 2-byte signatures --\n\n\tif (check([0x42, 0x4D])) {\n\t\treturn {\n\t\t\text: 'bmp',\n\t\t\tmime: 'image/bmp'\n\t\t};\n\t}\n\n\tif (check([0x0B, 0x77])) {\n\t\treturn {\n\t\t\text: 'ac3',\n\t\t\tmime: 'audio/vnd.dolby.dd-raw'\n\t\t};\n\t}\n\n\tif (check([0x78, 0x01])) {\n\t\treturn {\n\t\t\text: 'dmg',\n\t\t\tmime: 'application/x-apple-diskimage'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x5A])) {\n\t\treturn {\n\t\t\text: 'exe',\n\t\t\tmime: 'application/x-msdownload'\n\t\t};\n\t}\n\n\tif (check([0x25, 0x21])) {\n\t\tawait tokenizer.peekBuffer(buffer, {length: 24, mayBeLess: true});\n\n\t\tif (checkString('PS-Adobe-', {offset: 2}) &&\n\t\t\tcheckString(' EPSF-', {offset: 14})) {\n\t\t\treturn {\n\t\t\t\text: 'eps',\n\t\t\t\tmime: 'application/eps'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ps',\n\t\t\tmime: 'application/postscript'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x1F, 0xA0]) ||\n\t\tcheck([0x1F, 0x9D])\n\t) {\n\t\treturn {\n\t\t\text: 'Z',\n\t\t\tmime: 'application/x-compress'\n\t\t};\n\t}\n\n\t// -- 3-byte signatures --\n\n\tif (check([0xFF, 0xD8, 0xFF])) {\n\t\treturn {\n\t\t\text: 'jpg',\n\t\t\tmime: 'image/jpeg'\n\t\t};\n\t}\n\n\tif (check([0x49, 0x49, 0xBC])) {\n\t\treturn {\n\t\t\text: 'jxr',\n\t\t\tmime: 'image/vnd.ms-photo'\n\t\t};\n\t}\n\n\tif (check([0x1F, 0x8B, 0x8])) {\n\t\treturn {\n\t\t\text: 'gz',\n\t\t\tmime: 'application/gzip'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x5A, 0x68])) {\n\t\treturn {\n\t\t\text: 'bz2',\n\t\t\tmime: 'application/x-bzip2'\n\t\t};\n\t}\n\n\tif (checkString('ID3')) {\n\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\n\t\tconst id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n\t\tif (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n\t\t\t// Guess file type based on ID3 header for backward compatibility\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(id3HeaderLen);\n\t\treturn fromTokenizer(tokenizer); // Skip ID3 header, recursion\n\t}\n\n\t// Musepack, SV7\n\tif (checkString('MP+')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (\n\t\t(buffer[0] === 0x43 || buffer[0] === 0x46) &&\n\t\tcheck([0x57, 0x53], {offset: 1})\n\t) {\n\t\treturn {\n\t\t\text: 'swf',\n\t\t\tmime: 'application/x-shockwave-flash'\n\t\t};\n\t}\n\n\t// -- 4-byte signatures --\n\n\tif (check([0x47, 0x49, 0x46])) {\n\t\treturn {\n\t\t\text: 'gif',\n\t\t\tmime: 'image/gif'\n\t\t};\n\t}\n\n\tif (checkString('FLIF')) {\n\t\treturn {\n\t\t\text: 'flif',\n\t\t\tmime: 'image/flif'\n\t\t};\n\t}\n\n\tif (checkString('8BPS')) {\n\t\treturn {\n\t\t\text: 'psd',\n\t\t\tmime: 'image/vnd.adobe.photoshop'\n\t\t};\n\t}\n\n\tif (checkString('WEBP', {offset: 8})) {\n\t\treturn {\n\t\t\text: 'webp',\n\t\t\tmime: 'image/webp'\n\t\t};\n\t}\n\n\t// Musepack, SV8\n\tif (checkString('MPCK')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (checkString('FORM')) {\n\t\treturn {\n\t\t\text: 'aif',\n\t\t\tmime: 'audio/aiff'\n\t\t};\n\t}\n\n\tif (checkString('icns', {offset: 0})) {\n\t\treturn {\n\t\t\text: 'icns',\n\t\t\tmime: 'image/icns'\n\t\t};\n\t}\n\n\t// Zip-based file formats\n\t// Need to be before the `zip` check\n\tif (check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\n\t\ttry {\n\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n\t\t\t\tawait tokenizer.readBuffer(buffer, {length: 30});\n\n\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\t\t\t\tconst zipHeader = {\n\t\t\t\t\tcompressedSize: buffer.readUInt32LE(18),\n\t\t\t\t\tuncompressedSize: buffer.readUInt32LE(22),\n\t\t\t\t\tfilenameLength: buffer.readUInt16LE(26),\n\t\t\t\t\textraFieldLength: buffer.readUInt16LE(28)\n\t\t\t\t};\n\n\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\n\n\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xpi',\n\t\t\t\t\t\tmime: 'application/x-xpinstall'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase '_rels':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'word':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'ppt':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'xl':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: '3mf',\n\t\t\t\t\t\tmime: 'model/3mf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t\t\t// We look for:\n\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t\t\t// - one entry indicating specific type of file.\n\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n\t\t\t\t\tconst mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n\t\t\t\t\tswitch (mimeType) {\n\t\t\t\t\t\tcase 'application/epub+zip':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'epub',\n\t\t\t\t\t\t\t\tmime: 'application/epub+zip'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odt',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'ods',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odp',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try to find next header manually when current one is corrupted\n\t\t\t\tif (zipHeader.compressedSize === 0) {\n\t\t\t\t\tlet nextHeaderIndex = -1;\n\n\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\n\t\t\t\t\t\tawait tokenizer.peekBuffer(buffer, {mayBeLess: true});\n\n\t\t\t\t\t\tnextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex');\n\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\n\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\tif (checkString('OggS')) {\n\t\t// This is an OGG container\n\t\tawait tokenizer.ignore(28);\n\t\tconst type = Buffer.alloc(8);\n\t\tawait tokenizer.readBuffer(type);\n\n\t\t// Needs to be before `ogg` check\n\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n\t\t\treturn {\n\t\t\t\text: 'opus',\n\t\t\t\tmime: 'audio/opus'\n\t\t\t};\n\t\t}\n\n\t\t// If ' theora' in header.\n\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n\t\t\treturn {\n\t\t\t\text: 'ogv',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01video' in header.\n\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ogm',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n\t\t\treturn {\n\t\t\t\text: 'oga',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n\t\t\treturn {\n\t\t\t\text: 'spx',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01vorbis' in header\n\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n\t\t\treturn {\n\t\t\t\text: 'ogg',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\treturn {\n\t\t\text: 'ogx',\n\t\t\tmime: 'application/ogg'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x50, 0x4B]) &&\n\t\t(buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) &&\n\t\t(buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)\n\t) {\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\t//\n\n\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\tif (\n\t\tcheckString('ftyp', {offset: 4}) &&\n\t\t(buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n\t) {\n\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n\t\tconst brandMajor = buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\t\tswitch (brandMajor) {\n\t\t\tcase 'avif':\n\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\n\t\t\tcase 'mif1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\n\t\t\tcase 'msf1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\n\t\t\tcase 'heic':\n\t\t\tcase 'heix':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\n\t\t\tcase 'hevc':\n\t\t\tcase 'hevx':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\n\t\t\tcase 'qt':\n\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\n\t\t\tcase 'M4V':\n\t\t\tcase 'M4VH':\n\t\t\tcase 'M4VP':\n\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\n\t\t\tcase 'M4P':\n\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\n\t\t\tcase 'M4B':\n\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\n\t\t\tcase 'M4A':\n\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\n\t\t\tcase 'F4V':\n\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\n\t\t\tcase 'F4P':\n\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\n\t\t\tcase 'F4A':\n\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\n\t\t\tcase 'F4B':\n\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\n\t\t\tcase 'crx':\n\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\n\t\t\tdefault:\n\t\t\t\tif (brandMajor.startsWith('3g')) {\n\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\n\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\n\t\t\t\t}\n\n\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\n\t\t}\n\t}\n\n\tif (checkString('MThd')) {\n\t\treturn {\n\t\t\text: 'mid',\n\t\t\tmime: 'audio/midi'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOFF') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff',\n\t\t\tmime: 'font/woff'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOF2') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff2',\n\t\t\tmime: 'font/woff2'\n\t\t};\n\t}\n\n\tif (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\treturn {\n\t\t\text: 'pcap',\n\t\t\tmime: 'application/vnd.tcpdump.pcap'\n\t\t};\n\t}\n\n\t// Sony DSD Stream File (DSF)\n\tif (checkString('DSD ')) {\n\t\treturn {\n\t\t\text: 'dsf',\n\t\t\tmime: 'audio/x-dsf' // Non-standard\n\t\t};\n\t}\n\n\tif (checkString('LZIP')) {\n\t\treturn {\n\t\t\text: 'lz',\n\t\t\tmime: 'application/x-lzip'\n\t\t};\n\t}\n\n\tif (checkString('fLaC')) {\n\t\treturn {\n\t\t\text: 'flac',\n\t\t\tmime: 'audio/x-flac'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x50, 0x47, 0xFB])) {\n\t\treturn {\n\t\t\text: 'bpg',\n\t\t\tmime: 'image/bpg'\n\t\t};\n\t}\n\n\tif (checkString('wvpk')) {\n\t\treturn {\n\t\t\text: 'wv',\n\t\t\tmime: 'audio/wavpack'\n\t\t};\n\t}\n\n\tif (checkString('%PDF')) {\n\t\tawait tokenizer.ignore(1350);\n\t\tconst maxBufferSize = 10 * 1024 * 1024;\n\t\tconst buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\n\n\t\t// Check if this is an Adobe Illustrator file\n\t\tif (buffer.includes(Buffer.from('AIPrivateData'))) {\n\t\t\treturn {\n\t\t\t\text: 'ai',\n\t\t\t\tmime: 'application/postscript'\n\t\t\t};\n\t\t}\n\n\t\t// Assume this is just a normal PDF\n\t\treturn {\n\t\t\text: 'pdf',\n\t\t\tmime: 'application/pdf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x61, 0x73, 0x6D])) {\n\t\treturn {\n\t\t\text: 'wasm',\n\t\t\tmime: 'application/wasm'\n\t\t};\n\t}\n\n\t// TIFF, little-endian type\n\tif (check([0x49, 0x49, 0x2A, 0x0])) {\n\t\tif (checkString('CR', {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'cr2',\n\t\t\t\tmime: 'image/x-canon-cr2'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || check([0x1F, 0x00, 0x0B, 0x00], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'nef',\n\t\t\t\tmime: 'image/x-nikon-nef'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0x08, 0x00, 0x00, 0x00], {offset: 4}) &&\n\t\t\t(check([0x2D, 0x00, 0xFE, 0x00], {offset: 8}) ||\n\t\t\t\tcheck([0x27, 0x00, 0xFE, 0x00], {offset: 8}))\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'dng',\n\t\t\t\tmime: 'image/x-adobe-dng'\n\t\t\t};\n\t\t}\n\n\t\tbuffer = Buffer.alloc(24);\n\t\tawait tokenizer.peekBuffer(buffer);\n\t\tif (\n\t\t\t(check([0x10, 0xFB, 0x86, 0x01], {offset: 4}) || check([0x08, 0x00, 0x00, 0x00], {offset: 4})) &&\n\t\t\t// This pattern differentiates ARW from other TIFF-ish file types:\n\t\t\tcheck([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {offset: 9})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'arw',\n\t\t\t\tmime: 'image/x-sony-arw'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\t// TIFF, big-endian type\n\tif (check([0x4D, 0x4D, 0x0, 0x2A])) {\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\tif (checkString('MAC ')) {\n\t\treturn {\n\t\t\text: 'ape',\n\t\t\tmime: 'audio/ape'\n\t\t};\n\t}\n\n\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\tif (check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\n\t\tasync function readField() {\n\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\n\t\t\tlet mask = 0x80;\n\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n\n\t\t\twhile ((msb & mask) === 0 && mask !== 0) {\n\t\t\t\t++ic;\n\t\t\t\tmask >>= 1;\n\t\t\t}\n\n\t\t\tconst id = Buffer.alloc(ic + 1);\n\t\t\tawait tokenizer.readBuffer(id);\n\t\t\treturn id;\n\t\t}\n\n\t\tasync function readElement() {\n\t\t\tconst id = await readField();\n\t\t\tconst lenField = await readField();\n\t\t\tlenField[0] ^= 0x80 >> (lenField.length - 1);\n\t\t\tconst nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n\t\t\treturn {\n\t\t\t\tid: id.readUIntBE(0, id.length),\n\t\t\t\tlen: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n\t\t\t};\n\t\t}\n\n\t\tasync function readChildren(level, children) {\n\t\t\twhile (children > 0) {\n\t\t\t\tconst e = await readElement();\n\t\t\t\tif (e.id === 0x4282) {\n\t\t\t\t\treturn tokenizer.readToken(new Token.StringType(e.len, 'utf-8')); // Return DocType\n\t\t\t\t}\n\n\t\t\t\tawait tokenizer.ignore(e.len); // ignore payload\n\t\t\t\t--children;\n\t\t\t}\n\t\t}\n\n\t\tconst re = await readElement();\n\t\tconst docType = await readChildren(1, re.len);\n\n\t\tswitch (docType) {\n\t\t\tcase 'webm':\n\t\t\t\treturn {\n\t\t\t\t\text: 'webm',\n\t\t\t\t\tmime: 'video/webm'\n\t\t\t\t};\n\n\t\t\tcase 'matroska':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mkv',\n\t\t\t\t\tmime: 'video/x-matroska'\n\t\t\t\t};\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t// RIFF file format which might be AVI, WAV, QCP, etc\n\tif (check([0x52, 0x49, 0x46, 0x46])) {\n\t\tif (check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'avi',\n\t\t\t\tmime: 'video/vnd.avi'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'wav',\n\t\t\t\tmime: 'audio/vnd.wave'\n\t\t\t};\n\t\t}\n\n\t\t// QLCM, QCP file\n\t\tif (check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'qcp',\n\t\t\t\tmime: 'audio/qcelp'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('SQLi')) {\n\t\treturn {\n\t\t\text: 'sqlite',\n\t\t\tmime: 'application/x-sqlite3'\n\t\t};\n\t}\n\n\tif (check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\treturn {\n\t\t\text: 'nes',\n\t\t\tmime: 'application/x-nintendo-nes-rom'\n\t\t};\n\t}\n\n\tif (checkString('Cr24')) {\n\t\treturn {\n\t\t\text: 'crx',\n\t\t\tmime: 'application/x-google-chrome-extension'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('MSCF') ||\n\t\tcheckString('ISc(')\n\t) {\n\t\treturn {\n\t\t\text: 'cab',\n\t\t\tmime: 'application/vnd.ms-cab-compressed'\n\t\t};\n\t}\n\n\tif (check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\treturn {\n\t\t\text: 'rpm',\n\t\t\tmime: 'application/x-rpm'\n\t\t};\n\t}\n\n\tif (check([0xC5, 0xD0, 0xD3, 0xC6])) {\n\t\treturn {\n\t\t\text: 'eps',\n\t\t\tmime: 'application/eps'\n\t\t};\n\t}\n\n\tif (check([0x28, 0xB5, 0x2F, 0xFD])) {\n\t\treturn {\n\t\t\text: 'zst',\n\t\t\tmime: 'application/zstd'\n\t\t};\n\t}\n\n\t// -- 5-byte signatures --\n\n\tif (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\treturn {\n\t\t\text: 'otf',\n\t\t\tmime: 'font/otf'\n\t\t};\n\t}\n\n\tif (checkString('#!AMR')) {\n\t\treturn {\n\t\t\text: 'amr',\n\t\t\tmime: 'audio/amr'\n\t\t};\n\t}\n\n\tif (checkString('{\\\\rtf')) {\n\t\treturn {\n\t\t\text: 'rtf',\n\t\t\tmime: 'application/rtf'\n\t\t};\n\t}\n\n\tif (check([0x46, 0x4C, 0x56, 0x01])) {\n\t\treturn {\n\t\t\text: 'flv',\n\t\t\tmime: 'video/x-flv'\n\t\t};\n\t}\n\n\tif (checkString('IMPM')) {\n\t\treturn {\n\t\t\text: 'it',\n\t\t\tmime: 'audio/x-it'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('-lh0-', {offset: 2}) ||\n\t\tcheckString('-lh1-', {offset: 2}) ||\n\t\tcheckString('-lh2-', {offset: 2}) ||\n\t\tcheckString('-lh3-', {offset: 2}) ||\n\t\tcheckString('-lh4-', {offset: 2}) ||\n\t\tcheckString('-lh5-', {offset: 2}) ||\n\t\tcheckString('-lh6-', {offset: 2}) ||\n\t\tcheckString('-lh7-', {offset: 2}) ||\n\t\tcheckString('-lzs-', {offset: 2}) ||\n\t\tcheckString('-lz4-', {offset: 2}) ||\n\t\tcheckString('-lz5-', {offset: 2}) ||\n\t\tcheckString('-lhd-', {offset: 2})\n\t) {\n\t\treturn {\n\t\t\text: 'lzh',\n\t\t\tmime: 'application/x-lzh-compressed'\n\t\t};\n\t}\n\n\t// MPEG program stream (PS or MPEG-PS)\n\tif (check([0x00, 0x00, 0x01, 0xBA])) {\n\t\t//  MPEG-PS, MPEG-1 Part 1\n\t\tif (check([0x21], {offset: 4, mask: [0xF1]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .ps, .mpeg\n\t\t\t\tmime: 'video/MP1S'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG-PS, MPEG-2 Part 1\n\t\tif (check([0x44], {offset: 4, mask: [0xC4]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\n\t\t\t\tmime: 'video/MP2P'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('ITSF')) {\n\t\treturn {\n\t\t\text: 'chm',\n\t\t\tmime: 'application/vnd.ms-htmlhelp'\n\t\t};\n\t}\n\n\t// -- 6-byte signatures --\n\n\tif (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\treturn {\n\t\t\text: 'xz',\n\t\t\tmime: 'application/x-xz'\n\t\t};\n\t}\n\n\tif (checkString('<?xml ')) {\n\t\treturn {\n\t\t\text: 'xml',\n\t\t\tmime: 'application/xml'\n\t\t};\n\t}\n\n\tif (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\treturn {\n\t\t\text: '7z',\n\t\t\tmime: 'application/x-7z-compressed'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&\n\t\t(buffer[6] === 0x0 || buffer[6] === 0x1)\n\t) {\n\t\treturn {\n\t\t\text: 'rar',\n\t\t\tmime: 'application/x-rar-compressed'\n\t\t};\n\t}\n\n\tif (checkString('solid ')) {\n\t\treturn {\n\t\t\text: 'stl',\n\t\t\tmime: 'model/stl'\n\t\t};\n\t}\n\n\t// -- 7-byte signatures --\n\n\tif (checkString('BLENDER')) {\n\t\treturn {\n\t\t\text: 'blend',\n\t\t\tmime: 'application/x-blender'\n\t\t};\n\t}\n\n\tif (checkString('!<arch>')) {\n\t\tawait tokenizer.ignore(8);\n\t\tconst str = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\t\tif (str === 'debian-binary') {\n\t\t\treturn {\n\t\t\t\text: 'deb',\n\t\t\t\tmime: 'application/x-deb'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ar',\n\t\t\tmime: 'application/x-unix-archive'\n\t\t};\n\t}\n\n\t// -- 8-byte signatures --\n\n\tif (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\n\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\n\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n\t\t// Offset calculated as follows:\n\t\t// - 8 bytes: PNG signature\n\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n\t\tawait tokenizer.ignore(8); // ignore PNG signature\n\n\t\tasync function readChunkHeader() {\n\t\t\treturn {\n\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\n\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n\t\t\t};\n\t\t}\n\n\t\tdo {\n\t\t\tconst chunk = await readChunkHeader();\n\t\t\tif (chunk.length < 0) {\n\t\t\t\treturn; // Invalid chunk length\n\t\t\t}\n\n\t\t\tswitch (chunk.type) {\n\t\t\t\tcase 'IDAT':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'png',\n\t\t\t\t\t\tmime: 'image/png'\n\t\t\t\t\t};\n\t\t\t\tcase 'acTL':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'apng',\n\t\t\t\t\t\tmime: 'image/apng'\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n\t\t\t}\n\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n\t\treturn {\n\t\t\text: 'png',\n\t\t\tmime: 'image/png'\n\t\t};\n\t}\n\n\tif (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'arrow',\n\t\t\tmime: 'application/x-apache-arrow'\n\t\t};\n\t}\n\n\tif (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'glb',\n\t\t\tmime: 'model/gltf-binary'\n\t\t};\n\t}\n\n\t// `mov` format variants\n\tif (\n\t\tcheck([0x66, 0x72, 0x65, 0x65], {offset: 4}) || // `free`\n\t\tcheck([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // `mdat` MJPEG\n\t\tcheck([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) || // `moov`\n\t\tcheck([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\n\t) {\n\t\treturn {\n\t\t\text: 'mov',\n\t\t\tmime: 'video/quicktime'\n\t\t};\n\t}\n\n\t// -- 9-byte signatures --\n\n\tif (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n\t\treturn {\n\t\t\text: 'orf',\n\t\t\tmime: 'image/x-olympus-orf'\n\t\t};\n\t}\n\n\tif (checkString('gimp xcf ')) {\n\t\treturn {\n\t\t\text: 'xcf',\n\t\t\tmime: 'image/x-xcf'\n\t\t};\n\t}\n\n\t// -- 12-byte signatures --\n\n\tif (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n\t\treturn {\n\t\t\text: 'rw2',\n\t\t\tmime: 'image/x-panasonic-rw2'\n\t\t};\n\t}\n\n\t// ASF_Header_Object first 80 bytes\n\tif (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\tasync function readHeader() {\n\t\t\tconst guid = Buffer.alloc(16);\n\t\t\tawait tokenizer.readBuffer(guid);\n\t\t\treturn {\n\t\t\t\tid: guid,\n\t\t\t\tsize: Number(await tokenizer.readToken(Token.UINT64_LE))\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(30);\n\t\t// Search for header should be in first 1KB of file.\n\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n\t\t\tconst header = await readHeader();\n\t\t\tlet payload = header.size - 24;\n\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\tconst typeId = Buffer.alloc(16);\n\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\n\n\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found audio:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'audio/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found video:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'video/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(payload);\n\t\t}\n\n\t\t// Default to ASF generic extension\n\t\treturn {\n\t\t\text: 'asf',\n\t\t\tmime: 'application/vnd.ms-asf'\n\t\t};\n\t}\n\n\tif (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\treturn {\n\t\t\text: 'ktx',\n\t\t\tmime: 'image/ktx'\n\t\t};\n\t}\n\n\tif ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\n\t\treturn {\n\t\t\text: 'mie',\n\t\t\tmime: 'application/x-mie'\n\t\t};\n\t}\n\n\tif (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\n\t\treturn {\n\t\t\text: 'shp',\n\t\t\tmime: 'application/x-esri-shape'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t// JPEG-2000 family\n\n\t\tawait tokenizer.ignore(20);\n\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\t\tswitch (type) {\n\t\t\tcase 'jp2 ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jp2',\n\t\t\t\t\tmime: 'image/jp2'\n\t\t\t\t};\n\t\t\tcase 'jpx ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpx',\n\t\t\t\t\tmime: 'image/jpx'\n\t\t\t\t};\n\t\t\tcase 'jpm ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpm',\n\t\t\t\t\tmime: 'image/jpm'\n\t\t\t\t};\n\t\t\tcase 'mjp2':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mj2',\n\t\t\t\t\tmime: 'image/mj2'\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tif (\n\t\tcheck([0xFF, 0x0A]) ||\n\t\tcheck([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\n\t) {\n\t\treturn {\n\t\t\text: 'jxl',\n\t\t\tmime: 'image/jxl'\n\t\t};\n\t}\n\n\t// -- Unsafe signatures --\n\n\tif (\n\t\tcheck([0x0, 0x0, 0x1, 0xBA]) ||\n\t\tcheck([0x0, 0x0, 0x1, 0xB3])\n\t) {\n\t\treturn {\n\t\t\text: 'mpg',\n\t\t\tmime: 'video/mpeg'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'ttf',\n\t\t\tmime: 'font/ttf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x01, 0x00])) {\n\t\treturn {\n\t\t\text: 'ico',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x02, 0x00])) {\n\t\treturn {\n\t\t\text: 'cur',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\n\t\treturn {\n\t\t\text: 'cfb',\n\t\t\tmime: 'application/x-cfb'\n\t\t};\n\t}\n\n\t// Increase sample size from 12 to 256.\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// -- 15-byte signatures --\n\n\tif (checkString('BEGIN:')) {\n\t\tif (checkString('VCARD', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'vcf',\n\t\t\t\tmime: 'text/vcard'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('VCALENDAR', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'ics',\n\t\t\t\tmime: 'text/calendar'\n\t\t\t};\n\t\t}\n\t}\n\n\t// `raf` is here just to keep all the raw image detectors together.\n\tif (checkString('FUJIFILMCCD-RAW')) {\n\t\treturn {\n\t\t\text: 'raf',\n\t\t\tmime: 'image/x-fujifilm-raf'\n\t\t};\n\t}\n\n\tif (checkString('Extended Module:')) {\n\t\treturn {\n\t\t\text: 'xm',\n\t\t\tmime: 'audio/x-xm'\n\t\t};\n\t}\n\n\tif (checkString('Creative Voice File')) {\n\t\treturn {\n\t\t\text: 'voc',\n\t\t\tmime: 'audio/x-voc'\n\t\t};\n\t}\n\n\tif (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) { // Rough & quick check Pickle/ASAR\n\t\tconst jsonSize = buffer.readUInt32LE(12);\n\t\tif (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n\t\t\ttry {\n\t\t\t\tconst header = buffer.slice(16, jsonSize + 16).toString();\n\t\t\t\tconst json = JSON.parse(header);\n\t\t\t\t// Check if Pickle is ASAR\n\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asar',\n\t\t\t\t\t\tmime: 'application/x-asar'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t}\n\t\t}\n\t}\n\n\tif (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\treturn {\n\t\t\text: 'mxf',\n\t\t\tmime: 'application/mxf'\n\t\t};\n\t}\n\n\tif (checkString('SCRM', {offset: 44})) {\n\t\treturn {\n\t\t\text: 's3m',\n\t\t\tmime: 'audio/x-s3m'\n\t\t};\n\t}\n\n\tif (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {\n\t\treturn {\n\t\t\text: 'mts',\n\t\t\tmime: 'video/mp2t'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\treturn {\n\t\t\text: 'mobi',\n\t\t\tmime: 'application/x-mobipocket-ebook'\n\t\t};\n\t}\n\n\tif (check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\treturn {\n\t\t\text: 'dcm',\n\t\t\tmime: 'application/dicom'\n\t\t};\n\t}\n\n\tif (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n\t\treturn {\n\t\t\text: 'lnk',\n\t\t\tmime: 'application/x.ms.shortcut' // Invented by us\n\t\t};\n\t}\n\n\tif (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'alias',\n\t\t\tmime: 'application/x.apple.alias' // Invented by us\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x4C, 0x50], {offset: 34}) &&\n\t\t(\n\t\t\tcheck([0x00, 0x00, 0x01], {offset: 8}) ||\n\t\t\tcheck([0x01, 0x00, 0x02], {offset: 8}) ||\n\t\t\tcheck([0x02, 0x00, 0x02], {offset: 8})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'eot',\n\t\t\tmime: 'application/vnd.ms-fontobject'\n\t\t};\n\t}\n\n\tif (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n\t\treturn {\n\t\t\text: 'indd',\n\t\t\tmime: 'application/x-indesign'\n\t\t};\n\t}\n\n\t// Increase sample size from 256 to 512\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// Requires a buffer size of 512 bytes\n\tif (tarHeaderChecksumMatches(buffer)) {\n\t\treturn {\n\t\t\text: 'tar',\n\t\t\tmime: 'application/x-tar'\n\t\t};\n\t}\n\n\tif (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n\t\treturn {\n\t\t\text: 'skp',\n\t\t\tmime: 'application/vnd.sketchup.skp'\n\t\t};\n\t}\n\n\tif (checkString('-----BEGIN PGP MESSAGE-----')) {\n\t\treturn {\n\t\t\text: 'pgp',\n\t\t\tmime: 'application/pgp-encrypted'\n\t\t};\n\t}\n\n\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\tif (buffer.length >= 2 && check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\n\t\tif (check([0x10], {offset: 1, mask: [0x16]})) {\n\t\t\t// Check for (ADTS) MPEG-2\n\t\t\tif (check([0x08], {offset: 1, mask: [0x08]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'aac',\n\t\t\t\t\tmime: 'audio/aac'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Must be (ADTS) MPEG-4\n\t\t\treturn {\n\t\t\t\text: 'aac',\n\t\t\t\tmime: 'audio/aac'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG 1 or 2 Layer 3 header\n\t\t// Check for MPEG layer 3\n\t\tif (check([0x02], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 2\n\t\tif (check([0x04], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp2',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 1\n\t\tif (check([0x06], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp1',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\t}\n}\n\nconst stream = readableStream => new Promise((resolve, reject) => {\n\t// Using `eval` to work around issues when bundling with Webpack\n\tconst stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n\treadableStream.on('error', reject);\n\treadableStream.once('readable', async () => {\n\t\t// Set up output stream\n\t\tconst pass = new stream.PassThrough();\n\t\tlet outputStream;\n\t\tif (stream.pipeline) {\n\t\t\toutputStream = stream.pipeline(readableStream, pass, () => {\n\t\t\t});\n\t\t} else {\n\t\t\toutputStream = readableStream.pipe(pass);\n\t\t}\n\n\t\t// Read the input stream and detect the filetype\n\t\tconst chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n\t\ttry {\n\t\t\tconst fileType = await fromBuffer(chunk);\n\t\t\tpass.fileType = fileType;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\n\t\tresolve(outputStream);\n\t});\n});\n\nconst fileType = {\n\tfromStream,\n\tfromTokenizer,\n\tfromBuffer,\n\tstream\n};\n\nObject.defineProperty(fileType, 'extensions', {\n\tget() {\n\t\treturn new Set(supported.extensions);\n\t}\n});\n\nObject.defineProperty(fileType, 'mimeTypes', {\n\tget() {\n\t\treturn new Set(supported.mimeTypes);\n\t}\n});\n\nmodule.exports = fileType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/file-type/core.js\n"));

/***/ }),

/***/ "./node_modules/file-type/supported.js":
/*!*********************************************!*\
  !*** ./node_modules/file-type/supported.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nmodule.exports = {\n\textensions: [\n\t\t'jpg',\n\t\t'png',\n\t\t'apng',\n\t\t'gif',\n\t\t'webp',\n\t\t'flif',\n\t\t'xcf',\n\t\t'cr2',\n\t\t'cr3',\n\t\t'orf',\n\t\t'arw',\n\t\t'dng',\n\t\t'nef',\n\t\t'rw2',\n\t\t'raf',\n\t\t'tif',\n\t\t'bmp',\n\t\t'icns',\n\t\t'jxr',\n\t\t'psd',\n\t\t'indd',\n\t\t'zip',\n\t\t'tar',\n\t\t'rar',\n\t\t'gz',\n\t\t'bz2',\n\t\t'7z',\n\t\t'dmg',\n\t\t'mp4',\n\t\t'mid',\n\t\t'mkv',\n\t\t'webm',\n\t\t'mov',\n\t\t'avi',\n\t\t'mpg',\n\t\t'mp2',\n\t\t'mp3',\n\t\t'm4a',\n\t\t'oga',\n\t\t'ogg',\n\t\t'ogv',\n\t\t'opus',\n\t\t'flac',\n\t\t'wav',\n\t\t'spx',\n\t\t'amr',\n\t\t'pdf',\n\t\t'epub',\n\t\t'exe',\n\t\t'swf',\n\t\t'rtf',\n\t\t'wasm',\n\t\t'woff',\n\t\t'woff2',\n\t\t'eot',\n\t\t'ttf',\n\t\t'otf',\n\t\t'ico',\n\t\t'flv',\n\t\t'ps',\n\t\t'xz',\n\t\t'sqlite',\n\t\t'nes',\n\t\t'crx',\n\t\t'xpi',\n\t\t'cab',\n\t\t'deb',\n\t\t'ar',\n\t\t'rpm',\n\t\t'Z',\n\t\t'lz',\n\t\t'cfb',\n\t\t'mxf',\n\t\t'mts',\n\t\t'blend',\n\t\t'bpg',\n\t\t'docx',\n\t\t'pptx',\n\t\t'xlsx',\n\t\t'3gp',\n\t\t'3g2',\n\t\t'jp2',\n\t\t'jpm',\n\t\t'jpx',\n\t\t'mj2',\n\t\t'aif',\n\t\t'qcp',\n\t\t'odt',\n\t\t'ods',\n\t\t'odp',\n\t\t'xml',\n\t\t'mobi',\n\t\t'heic',\n\t\t'cur',\n\t\t'ktx',\n\t\t'ape',\n\t\t'wv',\n\t\t'dcm',\n\t\t'ics',\n\t\t'glb',\n\t\t'pcap',\n\t\t'dsf',\n\t\t'lnk',\n\t\t'alias',\n\t\t'voc',\n\t\t'ac3',\n\t\t'm4v',\n\t\t'm4p',\n\t\t'm4b',\n\t\t'f4v',\n\t\t'f4p',\n\t\t'f4b',\n\t\t'f4a',\n\t\t'mie',\n\t\t'asf',\n\t\t'ogm',\n\t\t'ogx',\n\t\t'mpc',\n\t\t'arrow',\n\t\t'shp',\n\t\t'aac',\n\t\t'mp1',\n\t\t'it',\n\t\t's3m',\n\t\t'xm',\n\t\t'ai',\n\t\t'skp',\n\t\t'avif',\n\t\t'eps',\n\t\t'lzh',\n\t\t'pgp',\n\t\t'asar',\n\t\t'stl',\n\t\t'chm',\n\t\t'3mf',\n\t\t'zst',\n\t\t'jxl',\n\t\t'vcf'\n\t],\n\tmimeTypes: [\n\t\t'image/jpeg',\n\t\t'image/png',\n\t\t'image/gif',\n\t\t'image/webp',\n\t\t'image/flif',\n\t\t'image/x-xcf',\n\t\t'image/x-canon-cr2',\n\t\t'image/x-canon-cr3',\n\t\t'image/tiff',\n\t\t'image/bmp',\n\t\t'image/vnd.ms-photo',\n\t\t'image/vnd.adobe.photoshop',\n\t\t'application/x-indesign',\n\t\t'application/epub+zip',\n\t\t'application/x-xpinstall',\n\t\t'application/vnd.oasis.opendocument.text',\n\t\t'application/vnd.oasis.opendocument.spreadsheet',\n\t\t'application/vnd.oasis.opendocument.presentation',\n\t\t'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t\t'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t\t'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t'application/zip',\n\t\t'application/x-tar',\n\t\t'application/x-rar-compressed',\n\t\t'application/gzip',\n\t\t'application/x-bzip2',\n\t\t'application/x-7z-compressed',\n\t\t'application/x-apple-diskimage',\n\t\t'application/x-apache-arrow',\n\t\t'video/mp4',\n\t\t'audio/midi',\n\t\t'video/x-matroska',\n\t\t'video/webm',\n\t\t'video/quicktime',\n\t\t'video/vnd.avi',\n\t\t'audio/vnd.wave',\n\t\t'audio/qcelp',\n\t\t'audio/x-ms-asf',\n\t\t'video/x-ms-asf',\n\t\t'application/vnd.ms-asf',\n\t\t'video/mpeg',\n\t\t'video/3gpp',\n\t\t'audio/mpeg',\n\t\t'audio/mp4', // RFC 4337\n\t\t'audio/opus',\n\t\t'video/ogg',\n\t\t'audio/ogg',\n\t\t'application/ogg',\n\t\t'audio/x-flac',\n\t\t'audio/ape',\n\t\t'audio/wavpack',\n\t\t'audio/amr',\n\t\t'application/pdf',\n\t\t'application/x-msdownload',\n\t\t'application/x-shockwave-flash',\n\t\t'application/rtf',\n\t\t'application/wasm',\n\t\t'font/woff',\n\t\t'font/woff2',\n\t\t'application/vnd.ms-fontobject',\n\t\t'font/ttf',\n\t\t'font/otf',\n\t\t'image/x-icon',\n\t\t'video/x-flv',\n\t\t'application/postscript',\n\t\t'application/eps',\n\t\t'application/x-xz',\n\t\t'application/x-sqlite3',\n\t\t'application/x-nintendo-nes-rom',\n\t\t'application/x-google-chrome-extension',\n\t\t'application/vnd.ms-cab-compressed',\n\t\t'application/x-deb',\n\t\t'application/x-unix-archive',\n\t\t'application/x-rpm',\n\t\t'application/x-compress',\n\t\t'application/x-lzip',\n\t\t'application/x-cfb',\n\t\t'application/x-mie',\n\t\t'application/mxf',\n\t\t'video/mp2t',\n\t\t'application/x-blender',\n\t\t'image/bpg',\n\t\t'image/jp2',\n\t\t'image/jpx',\n\t\t'image/jpm',\n\t\t'image/mj2',\n\t\t'audio/aiff',\n\t\t'application/xml',\n\t\t'application/x-mobipocket-ebook',\n\t\t'image/heif',\n\t\t'image/heif-sequence',\n\t\t'image/heic',\n\t\t'image/heic-sequence',\n\t\t'image/icns',\n\t\t'image/ktx',\n\t\t'application/dicom',\n\t\t'audio/x-musepack',\n\t\t'text/calendar',\n\t\t'text/vcard',\n\t\t'model/gltf-binary',\n\t\t'application/vnd.tcpdump.pcap',\n\t\t'audio/x-dsf', // Non-standard\n\t\t'application/x.ms.shortcut', // Invented by us\n\t\t'application/x.apple.alias', // Invented by us\n\t\t'audio/x-voc',\n\t\t'audio/vnd.dolby.dd-raw',\n\t\t'audio/x-m4a',\n\t\t'image/apng',\n\t\t'image/x-olympus-orf',\n\t\t'image/x-sony-arw',\n\t\t'image/x-adobe-dng',\n\t\t'image/x-nikon-nef',\n\t\t'image/x-panasonic-rw2',\n\t\t'image/x-fujifilm-raf',\n\t\t'video/x-m4v',\n\t\t'video/3gpp2',\n\t\t'application/x-esri-shape',\n\t\t'audio/aac',\n\t\t'audio/x-it',\n\t\t'audio/x-s3m',\n\t\t'audio/x-xm',\n\t\t'video/MP1S',\n\t\t'video/MP2P',\n\t\t'application/vnd.sketchup.skp',\n\t\t'image/avif',\n\t\t'application/x-lzh-compressed',\n\t\t'application/pgp-encrypted',\n\t\t'application/x-asar',\n\t\t'model/stl',\n\t\t'application/vnd.ms-htmlhelp',\n\t\t'model/3mf',\n\t\t'image/jxl',\n\t\t'application/zstd'\n\t]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/file-type/supported.js\n"));

/***/ }),

/***/ "./node_modules/file-type/util.js":
/*!****************************************!*\
  !*** ./node_modules/file-type/util.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nexports.stringToBytes = string => [...string].map(character => character.charCodeAt(0));\n\n/**\nChecks whether the TAR checksum is valid.\n\n@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.\n@param {number} offset - TAR header offset.\n@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.\n*/\nexports.tarHeaderChecksumMatches = (buffer, offset = 0) => {\n\tconst readSum = parseInt(buffer.toString('utf8', 148, 154).replace(/\\0.*$/, '').trim(), 8); // Read sum in header\n\tif (isNaN(readSum)) {\n\t\treturn false;\n\t}\n\n\tlet sum = 8 * 0x20; // Initialize signed bit sum\n\n\tfor (let i = offset; i < offset + 148; i++) {\n\t\tsum += buffer[i];\n\t}\n\n\tfor (let i = offset + 156; i < offset + 512; i++) {\n\t\tsum += buffer[i];\n\t}\n\n\treturn readSum === sum;\n};\n\n/**\nID3 UINT32 sync-safe tokenizer token.\n28 bits (representing up to 256MB) integer, the msb is 0 to avoid \"false syncsignals\".\n*/\nexports.uint32SyncSafeToken = {\n\tget: (buffer, offset) => {\n\t\treturn (buffer[offset + 3] & 0x7F) | ((buffer[offset + 2]) << 7) | ((buffer[offset + 1]) << 14) | ((buffer[offset]) << 21);\n\t},\n\tlen: 4\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlsZS10eXBlL3V0aWwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIscUJBQXFCOztBQUVyQjtBQUNBOztBQUVBLFFBQVEsUUFBUTtBQUNoQixRQUFRLFFBQVE7QUFDaEIsVUFBVSxTQUFTO0FBQ25CO0FBQ0EsZ0NBQWdDO0FBQ2hDLDZGQUE2RjtBQUM3RjtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCOztBQUVyQixzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7O0FBRUEsNEJBQTRCLGtCQUFrQjtBQUM5QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9maWxlLXR5cGUvdXRpbC5qcz8yOGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5zdHJpbmdUb0J5dGVzID0gc3RyaW5nID0+IFsuLi5zdHJpbmddLm1hcChjaGFyYWN0ZXIgPT4gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkpO1xuXG4vKipcbkNoZWNrcyB3aGV0aGVyIHRoZSBUQVIgY2hlY2tzdW0gaXMgdmFsaWQuXG5cbkBwYXJhbSB7QnVmZmVyfSBidWZmZXIgLSBUaGUgVEFSIGhlYWRlciBgW29mZnNldCAuLi4gb2Zmc2V0ICsgNTEyXWAuXG5AcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVEFSIGhlYWRlciBvZmZzZXQuXG5AcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBUQVIgY2hlY2tzdW0gaXMgdmFsaWQsIG90aGVyd2lzZSBgZmFsc2VgLlxuKi9cbmV4cG9ydHMudGFySGVhZGVyQ2hlY2tzdW1NYXRjaGVzID0gKGJ1ZmZlciwgb2Zmc2V0ID0gMCkgPT4ge1xuXHRjb25zdCByZWFkU3VtID0gcGFyc2VJbnQoYnVmZmVyLnRvU3RyaW5nKCd1dGY4JywgMTQ4LCAxNTQpLnJlcGxhY2UoL1xcMC4qJC8sICcnKS50cmltKCksIDgpOyAvLyBSZWFkIHN1bSBpbiBoZWFkZXJcblx0aWYgKGlzTmFOKHJlYWRTdW0pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0bGV0IHN1bSA9IDggKiAweDIwOyAvLyBJbml0aWFsaXplIHNpZ25lZCBiaXQgc3VtXG5cblx0Zm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IG9mZnNldCArIDE0ODsgaSsrKSB7XG5cdFx0c3VtICs9IGJ1ZmZlcltpXTtcblx0fVxuXG5cdGZvciAobGV0IGkgPSBvZmZzZXQgKyAxNTY7IGkgPCBvZmZzZXQgKyA1MTI7IGkrKykge1xuXHRcdHN1bSArPSBidWZmZXJbaV07XG5cdH1cblxuXHRyZXR1cm4gcmVhZFN1bSA9PT0gc3VtO1xufTtcblxuLyoqXG5JRDMgVUlOVDMyIHN5bmMtc2FmZSB0b2tlbml6ZXIgdG9rZW4uXG4yOCBiaXRzIChyZXByZXNlbnRpbmcgdXAgdG8gMjU2TUIpIGludGVnZXIsIHRoZSBtc2IgaXMgMCB0byBhdm9pZCBcImZhbHNlIHN5bmNzaWduYWxzXCIuXG4qL1xuZXhwb3J0cy51aW50MzJTeW5jU2FmZVRva2VuID0ge1xuXHRnZXQ6IChidWZmZXIsIG9mZnNldCkgPT4ge1xuXHRcdHJldHVybiAoYnVmZmVyW29mZnNldCArIDNdICYgMHg3RikgfCAoKGJ1ZmZlcltvZmZzZXQgKyAyXSkgPDwgNykgfCAoKGJ1ZmZlcltvZmZzZXQgKyAxXSkgPDwgMTQpIHwgKChidWZmZXJbb2Zmc2V0XSkgPDwgMjEpO1xuXHR9LFxuXHRsZW46IDRcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/file-type/util.js\n"));

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzP2UzYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/inherits/inherits_browser.js\n"));

/***/ }),

/***/ "./node_modules/media-typer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/media-typer/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\nexports.test = test\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  return string\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase())\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  return new MediaType(type, subtype, suffix)\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType (type, subtype, suffix) {\n  this.type = type\n  this.subtype = subtype\n  this.suffix = suffix\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVkaWEtdHlwZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQztBQUNBLDJEQUEyRCxNQUFNO0FBQ2pFLHVEQUF1RCxNQUFNO0FBQzdELHFEQUFxRCxNQUFNLG9DQUFvQyxNQUFNOztBQUVyRztBQUNBO0FBQ0E7O0FBRUEsY0FBYztBQUNkLGFBQWE7QUFDYixZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWEtdHlwZXIvaW5kZXguanM/N2VlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIG1lZGlhLXR5cGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggdHlwZSBpbiBSRkMgNjgzOFxuICpcbiAqIHR5cGUtbmFtZSA9IHJlc3RyaWN0ZWQtbmFtZVxuICogc3VidHlwZS1uYW1lID0gcmVzdHJpY3RlZC1uYW1lXG4gKiByZXN0cmljdGVkLW5hbWUgPSByZXN0cmljdGVkLW5hbWUtZmlyc3QgKjEyNnJlc3RyaWN0ZWQtbmFtZS1jaGFyc1xuICogcmVzdHJpY3RlZC1uYW1lLWZpcnN0ICA9IEFMUEhBIC8gRElHSVRcbiAqIHJlc3RyaWN0ZWQtbmFtZS1jaGFycyAgPSBBTFBIQSAvIERJR0lUIC8gXCIhXCIgLyBcIiNcIiAvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgXCIkXCIgLyBcIiZcIiAvIFwiLVwiIC8gXCJeXCIgLyBcIl9cIlxuICogcmVzdHJpY3RlZC1uYW1lLWNoYXJzID0vIFwiLlwiIDsgQ2hhcmFjdGVycyBiZWZvcmUgZmlyc3QgZG90IGFsd2F5c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHNwZWNpZnkgYSBmYWNldCBuYW1lXG4gKiByZXN0cmljdGVkLW5hbWUtY2hhcnMgPS8gXCIrXCIgOyBDaGFyYWN0ZXJzIGFmdGVyIGxhc3QgcGx1cyBhbHdheXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBzcGVjaWZ5IGEgc3RydWN0dXJlZCBzeW50YXggc3VmZml4XG4gKiBBTFBIQSA9ICAleDQxLTVBIC8gJXg2MS03QSAgIDsgQS1aIC8gYS16XG4gKiBESUdJVCA9ICAleDMwLTM5ICAgICAgICAgICAgIDsgMC05XG4gKi9cbnZhciBTVUJUWVBFX05BTUVfUkVHRVhQID0gL15bQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8uLV17MCwxMjZ9JC9cbnZhciBUWVBFX05BTUVfUkVHRVhQID0gL15bQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8tXXswLDEyNn0kL1xudmFyIFRZUEVfUkVHRVhQID0gL14gKihbQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8tXXswLDEyNn0pXFwvKFtBLVphLXowLTldW0EtWmEtejAtOSEjJCZeXy4rLV17MCwxMjZ9KSAqJC9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdCA9IGZvcm1hdFxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5leHBvcnRzLnRlc3QgPSB0ZXN0XG5cbi8qKlxuICogRm9ybWF0IG9iamVjdCB0byBtZWRpYSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXQgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG9iaiBpcyByZXF1aXJlZCcpXG4gIH1cblxuICB2YXIgc3VidHlwZSA9IG9iai5zdWJ0eXBlXG4gIHZhciBzdWZmaXggPSBvYmouc3VmZml4XG4gIHZhciB0eXBlID0gb2JqLnR5cGVcblxuICBpZiAoIXR5cGUgfHwgIVRZUEVfTkFNRV9SRUdFWFAudGVzdCh0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdHlwZScpXG4gIH1cblxuICBpZiAoIXN1YnR5cGUgfHwgIVNVQlRZUEVfTkFNRV9SRUdFWFAudGVzdChzdWJ0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VidHlwZScpXG4gIH1cblxuICAvLyBmb3JtYXQgYXMgdHlwZS9zdWJ0eXBlXG4gIHZhciBzdHJpbmcgPSB0eXBlICsgJy8nICsgc3VidHlwZVxuXG4gIC8vIGFwcGVuZCArc3VmZml4XG4gIGlmIChzdWZmaXgpIHtcbiAgICBpZiAoIVRZUEVfTkFNRV9SRUdFWFAudGVzdChzdWZmaXgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1ZmZpeCcpXG4gICAgfVxuXG4gICAgc3RyaW5nICs9ICcrJyArIHN1ZmZpeFxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1xufVxuXG4vKipcbiAqIFRlc3QgbWVkaWEgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdGVzdCAoc3RyaW5nKSB7XG4gIGlmICghc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyaW5nIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCB0byBiZSBhIHN0cmluZycpXG4gIH1cblxuICByZXR1cm4gVFlQRV9SRUdFWFAudGVzdChzdHJpbmcudG9Mb3dlckNhc2UoKSlcbn1cblxuLyoqXG4gKiBQYXJzZSBtZWRpYSB0eXBlIHRvIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2UgKHN0cmluZykge1xuICBpZiAoIXN0cmluZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHJpbmcgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIG1hdGNoID0gVFlQRV9SRUdFWFAuZXhlYyhzdHJpbmcudG9Mb3dlckNhc2UoKSlcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBtZWRpYSB0eXBlJylcbiAgfVxuXG4gIHZhciB0eXBlID0gbWF0Y2hbMV1cbiAgdmFyIHN1YnR5cGUgPSBtYXRjaFsyXVxuICB2YXIgc3VmZml4XG5cbiAgLy8gc3VmZml4IGFmdGVyIGxhc3QgK1xuICB2YXIgaW5kZXggPSBzdWJ0eXBlLmxhc3RJbmRleE9mKCcrJylcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHN1ZmZpeCA9IHN1YnR5cGUuc3Vic3RyKGluZGV4ICsgMSlcbiAgICBzdWJ0eXBlID0gc3VidHlwZS5zdWJzdHIoMCwgaW5kZXgpXG4gIH1cblxuICByZXR1cm4gbmV3IE1lZGlhVHlwZSh0eXBlLCBzdWJ0eXBlLCBzdWZmaXgpXG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIE1lZGlhVHlwZSBvYmplY3QuXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWVkaWFUeXBlICh0eXBlLCBzdWJ0eXBlLCBzdWZmaXgpIHtcbiAgdGhpcy50eXBlID0gdHlwZVxuICB0aGlzLnN1YnR5cGUgPSBzdWJ0eXBlXG4gIHRoaXMuc3VmZml4ID0gc3VmZml4XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/media-typer/index.js\n"));

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzPzNhNzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ms/index.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata-browser/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata-browser/lib/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchFromUrl = exports.parseBlob = exports.parseReadableStream = exports.parseNodeStream = exports.selectCover = exports.ratingToStars = exports.orderTags = exports.parseFromTokenizer = exports.parseBuffer = void 0;\nconst initDebug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst mm = __webpack_require__(/*! music-metadata/lib/core */ \"./node_modules/music-metadata/lib/core.js\");\nconst readable_web_to_node_stream_1 = __webpack_require__(/*! readable-web-to-node-stream */ \"./node_modules/readable-web-to-node-stream/lib/index.js\");\nconst debug = initDebug('music-metadata-browser:main');\nvar core_1 = __webpack_require__(/*! music-metadata/lib/core */ \"./node_modules/music-metadata/lib/core.js\");\nObject.defineProperty(exports, \"parseBuffer\", ({ enumerable: true, get: function () { return core_1.parseBuffer; } }));\nObject.defineProperty(exports, \"parseFromTokenizer\", ({ enumerable: true, get: function () { return core_1.parseFromTokenizer; } }));\nObject.defineProperty(exports, \"orderTags\", ({ enumerable: true, get: function () { return core_1.orderTags; } }));\nObject.defineProperty(exports, \"ratingToStars\", ({ enumerable: true, get: function () { return core_1.ratingToStars; } }));\nObject.defineProperty(exports, \"selectCover\", ({ enumerable: true, get: function () { return core_1.selectCover; } }));\n/**\n * Parse audio Stream\n * @param stream - ReadableStream\n * @param contentType - MIME-Type\n * @param options - Parsing options\n * @returns Metadata\n */\nexports.parseNodeStream = mm.parseStream;\n/**\n * Parse Web API ReadableStream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n * @param stream - ReadableStream (web stream according WTWG Streams Standard)\n * @param fileInfo FileInfo object or MIME-Type\n * @param options - Parsing options\n * @returns Metadata\n */\nasync function parseReadableStream(stream, fileInfo, options) {\n    const ns = new readable_web_to_node_stream_1.ReadableWebToNodeStream(stream);\n    const res = await (0, exports.parseNodeStream)(ns, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo, options);\n    await ns.close();\n    return res;\n}\nexports.parseReadableStream = parseReadableStream;\n/**\n * Parse Web API File\n * @param blob - Blob to parse\n * @param options - Parsing options\n * @returns Metadata\n */\nasync function parseBlob(blob, options) {\n    const fileInfo = { mimeType: blob.type, size: blob.size };\n    if (blob instanceof File) {\n        fileInfo.path = blob.name;\n    }\n    const stream = (blob.stream ? blob.stream() : convertBlobToReadableStream(blob));\n    return parseReadableStream(stream, { mimeType: blob.type, size: blob.size }, options);\n}\nexports.parseBlob = parseBlob;\n/**\n * Convert Blob to ReadableStream\n * Fallback for Safari versions < 14.1\n * @param blob\n */\nfunction convertBlobToReadableStream(blob) {\n    const fileReader = new FileReader();\n    return new ReadableStream({\n        start(controller) {\n            // The following function handles each data chunk\n            fileReader.onloadend = event => {\n                let data = event.target.result;\n                if (data instanceof ArrayBuffer) {\n                    data = new Uint8Array(data);\n                }\n                controller.enqueue(data);\n                controller.close();\n            };\n            fileReader.onerror = error => {\n                controller.close();\n            };\n            fileReader.onabort = error => {\n                controller.close();\n            };\n            fileReader.readAsArrayBuffer(blob);\n        }\n    });\n}\n/**\n * Parse fetched file, using the Web Fetch API\n * @param audioTrackUrl - URL to download the audio track from\n * @param options - Parsing options\n * @returns Metadata\n */\nasync function fetchFromUrl(audioTrackUrl, options) {\n    const response = await fetch(audioTrackUrl);\n    const fileInfo = {\n        size: parseInt(response.headers.get('Content-Length'), 10),\n        mimeType: response.headers.get('Content-Type')\n    };\n    if (response.ok) {\n        if (response.body) {\n            const res = await parseReadableStream(response.body, fileInfo, options);\n            debug('Closing HTTP-readable-stream...');\n            if (!response.body.locked) { // Prevent error in Firefox\n                await response.body.cancel();\n            }\n            debug('HTTP-readable-stream closed.');\n            return res;\n        }\n        else {\n            // Fall back on Blob\n            return parseBlob(await response.blob(), options);\n        }\n    }\n    else {\n        throw new Error(`HTTP error status=${response.status}: ${response.statusText}`);\n    }\n}\nexports.fetchFromUrl = fetchFromUrl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEtYnJvd3Nlci9saWIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsaUJBQWlCLEdBQUcsMkJBQTJCLEdBQUcsdUJBQXVCLEdBQUcsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsMEJBQTBCLEdBQUcsbUJBQW1CO0FBQ3JOLGtCQUFrQixtQkFBTyxDQUFDLGtEQUFPO0FBQ2pDLFdBQVcsbUJBQU8sQ0FBQywwRUFBeUI7QUFDNUMsc0NBQXNDLG1CQUFPLENBQUMsNEZBQTZCO0FBQzNFO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLDBFQUF5QjtBQUM5QywrQ0FBOEMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDcEgsc0RBQXFELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQ2xJLDZDQUE0QyxFQUFFLHFDQUFxQyw0QkFBNEIsRUFBQztBQUNoSCxpREFBZ0QsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDeEgsK0NBQThDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixxQkFBcUI7QUFDN0c7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHNDQUFzQztBQUMvRTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxnQkFBZ0IsSUFBSSxvQkFBb0I7QUFDckY7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEtYnJvd3Nlci9saWIvaW5kZXguanM/NTI3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hGcm9tVXJsID0gZXhwb3J0cy5wYXJzZUJsb2IgPSBleHBvcnRzLnBhcnNlUmVhZGFibGVTdHJlYW0gPSBleHBvcnRzLnBhcnNlTm9kZVN0cmVhbSA9IGV4cG9ydHMuc2VsZWN0Q292ZXIgPSBleHBvcnRzLnJhdGluZ1RvU3RhcnMgPSBleHBvcnRzLm9yZGVyVGFncyA9IGV4cG9ydHMucGFyc2VGcm9tVG9rZW5pemVyID0gZXhwb3J0cy5wYXJzZUJ1ZmZlciA9IHZvaWQgMDtcbmNvbnN0IGluaXREZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IG1tID0gcmVxdWlyZShcIm11c2ljLW1ldGFkYXRhL2xpYi9jb3JlXCIpO1xuY29uc3QgcmVhZGFibGVfd2ViX3RvX25vZGVfc3RyZWFtXzEgPSByZXF1aXJlKFwicmVhZGFibGUtd2ViLXRvLW5vZGUtc3RyZWFtXCIpO1xuY29uc3QgZGVidWcgPSBpbml0RGVidWcoJ211c2ljLW1ldGFkYXRhLWJyb3dzZXI6bWFpbicpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJtdXNpYy1tZXRhZGF0YS9saWIvY29yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlQnVmZmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEucGFyc2VCdWZmZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZUZyb21Ub2tlbml6ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5wYXJzZUZyb21Ub2tlbml6ZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvcmRlclRhZ3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5vcmRlclRhZ3M7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyYXRpbmdUb1N0YXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEucmF0aW5nVG9TdGFyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNlbGVjdENvdmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuc2VsZWN0Q292ZXI7IH0gfSk7XG4vKipcbiAqIFBhcnNlIGF1ZGlvIFN0cmVhbVxuICogQHBhcmFtIHN0cmVhbSAtIFJlYWRhYmxlU3RyZWFtXG4gKiBAcGFyYW0gY29udGVudFR5cGUgLSBNSU1FLVR5cGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcmV0dXJucyBNZXRhZGF0YVxuICovXG5leHBvcnRzLnBhcnNlTm9kZVN0cmVhbSA9IG1tLnBhcnNlU3RyZWFtO1xuLyoqXG4gKiBQYXJzZSBXZWIgQVBJIFJlYWRhYmxlU3RyZWFtOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUmVhZGFibGVTdHJlYW1cbiAqIEBwYXJhbSBzdHJlYW0gLSBSZWFkYWJsZVN0cmVhbSAod2ViIHN0cmVhbSBhY2NvcmRpbmcgV1RXRyBTdHJlYW1zIFN0YW5kYXJkKVxuICogQHBhcmFtIGZpbGVJbmZvIEZpbGVJbmZvIG9iamVjdCBvciBNSU1FLVR5cGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcmV0dXJucyBNZXRhZGF0YVxuICovXG5hc3luYyBmdW5jdGlvbiBwYXJzZVJlYWRhYmxlU3RyZWFtKHN0cmVhbSwgZmlsZUluZm8sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBucyA9IG5ldyByZWFkYWJsZV93ZWJfdG9fbm9kZV9zdHJlYW1fMS5SZWFkYWJsZVdlYlRvTm9kZVN0cmVhbShzdHJlYW0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0ICgwLCBleHBvcnRzLnBhcnNlTm9kZVN0cmVhbSkobnMsIHR5cGVvZiBmaWxlSW5mbyA9PT0gJ3N0cmluZycgPyB7IG1pbWVUeXBlOiBmaWxlSW5mbyB9IDogZmlsZUluZm8sIG9wdGlvbnMpO1xuICAgIGF3YWl0IG5zLmNsb3NlKCk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMucGFyc2VSZWFkYWJsZVN0cmVhbSA9IHBhcnNlUmVhZGFibGVTdHJlYW07XG4vKipcbiAqIFBhcnNlIFdlYiBBUEkgRmlsZVxuICogQHBhcmFtIGJsb2IgLSBCbG9iIHRvIHBhcnNlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFBhcnNpbmcgb3B0aW9uc1xuICogQHJldHVybnMgTWV0YWRhdGFcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcGFyc2VCbG9iKGJsb2IsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmaWxlSW5mbyA9IHsgbWltZVR5cGU6IGJsb2IudHlwZSwgc2l6ZTogYmxvYi5zaXplIH07XG4gICAgaWYgKGJsb2IgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICAgIGZpbGVJbmZvLnBhdGggPSBibG9iLm5hbWU7XG4gICAgfVxuICAgIGNvbnN0IHN0cmVhbSA9IChibG9iLnN0cmVhbSA/IGJsb2Iuc3RyZWFtKCkgOiBjb252ZXJ0QmxvYlRvUmVhZGFibGVTdHJlYW0oYmxvYikpO1xuICAgIHJldHVybiBwYXJzZVJlYWRhYmxlU3RyZWFtKHN0cmVhbSwgeyBtaW1lVHlwZTogYmxvYi50eXBlLCBzaXplOiBibG9iLnNpemUgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlQmxvYiA9IHBhcnNlQmxvYjtcbi8qKlxuICogQ29udmVydCBCbG9iIHRvIFJlYWRhYmxlU3RyZWFtXG4gKiBGYWxsYmFjayBmb3IgU2FmYXJpIHZlcnNpb25zIDwgMTQuMVxuICogQHBhcmFtIGJsb2JcbiAqL1xuZnVuY3Rpb24gY29udmVydEJsb2JUb1JlYWRhYmxlU3RyZWFtKGJsb2IpIHtcbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYW5kbGVzIGVhY2ggZGF0YSBjaHVua1xuICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWRlbmQgPSBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZGF0YSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZpbGVSZWFkZXIub25lcnJvciA9IGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZmlsZVJlYWRlci5vbmFib3J0ID0gZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIFBhcnNlIGZldGNoZWQgZmlsZSwgdXNpbmcgdGhlIFdlYiBGZXRjaCBBUElcbiAqIEBwYXJhbSBhdWRpb1RyYWNrVXJsIC0gVVJMIHRvIGRvd25sb2FkIHRoZSBhdWRpbyB0cmFjayBmcm9tXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFBhcnNpbmcgb3B0aW9uc1xuICogQHJldHVybnMgTWV0YWRhdGFcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hGcm9tVXJsKGF1ZGlvVHJhY2tVcmwsIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGF1ZGlvVHJhY2tVcmwpO1xuICAgIGNvbnN0IGZpbGVJbmZvID0ge1xuICAgICAgICBzaXplOiBwYXJzZUludChyZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKSwgMTApLFxuICAgICAgICBtaW1lVHlwZTogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpXG4gICAgfTtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHBhcnNlUmVhZGFibGVTdHJlYW0ocmVzcG9uc2UuYm9keSwgZmlsZUluZm8sIG9wdGlvbnMpO1xuICAgICAgICAgICAgZGVidWcoJ0Nsb3NpbmcgSFRUUC1yZWFkYWJsZS1zdHJlYW0uLi4nKTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UuYm9keS5sb2NrZWQpIHsgLy8gUHJldmVudCBlcnJvciBpbiBGaXJlZm94XG4gICAgICAgICAgICAgICAgYXdhaXQgcmVzcG9uc2UuYm9keS5jYW5jZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlYnVnKCdIVFRQLXJlYWRhYmxlLXN0cmVhbSBjbG9zZWQuJyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbCBiYWNrIG9uIEJsb2JcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUJsb2IoYXdhaXQgcmVzcG9uc2UuYmxvYigpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yIHN0YXR1cz0ke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG59XG5leHBvcnRzLmZldGNoRnJvbVVybCA9IGZldGNoRnJvbVVybDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata-browser/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ParserFactory.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ParserFactory.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParserFactory = exports.parseHttpContentType = void 0;\nconst FileType = __webpack_require__(/*! file-type/core */ \"./node_modules/file-type/core.js\");\nconst ContentType = __webpack_require__(/*! content-type */ \"./node_modules/content-type/index.js\");\nconst MimeType = __webpack_require__(/*! media-typer */ \"./node_modules/media-typer/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst MetadataCollector_1 = __webpack_require__(/*! ./common/MetadataCollector */ \"./node_modules/music-metadata/lib/common/MetadataCollector.js\");\nconst AiffParser_1 = __webpack_require__(/*! ./aiff/AiffParser */ \"./node_modules/music-metadata/lib/aiff/AiffParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ./apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst AsfParser_1 = __webpack_require__(/*! ./asf/AsfParser */ \"./node_modules/music-metadata/lib/asf/AsfParser.js\");\nconst FlacParser_1 = __webpack_require__(/*! ./flac/FlacParser */ \"./node_modules/music-metadata/lib/flac/FlacParser.js\");\nconst MP4Parser_1 = __webpack_require__(/*! ./mp4/MP4Parser */ \"./node_modules/music-metadata/lib/mp4/MP4Parser.js\");\nconst MpegParser_1 = __webpack_require__(/*! ./mpeg/MpegParser */ \"./node_modules/music-metadata/lib/mpeg/MpegParser.js\");\nconst musepack_1 = __webpack_require__(/*! ./musepack */ \"./node_modules/music-metadata/lib/musepack/index.js\");\nconst OggParser_1 = __webpack_require__(/*! ./ogg/OggParser */ \"./node_modules/music-metadata/lib/ogg/OggParser.js\");\nconst WaveParser_1 = __webpack_require__(/*! ./wav/WaveParser */ \"./node_modules/music-metadata/lib/wav/WaveParser.js\");\nconst WavPackParser_1 = __webpack_require__(/*! ./wavpack/WavPackParser */ \"./node_modules/music-metadata/lib/wavpack/WavPackParser.js\");\nconst DsfParser_1 = __webpack_require__(/*! ./dsf/DsfParser */ \"./node_modules/music-metadata/lib/dsf/DsfParser.js\");\nconst DsdiffParser_1 = __webpack_require__(/*! ./dsdiff/DsdiffParser */ \"./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js\");\nconst MatroskaParser_1 = __webpack_require__(/*! ./matroska/MatroskaParser */ \"./node_modules/music-metadata/lib/matroska/MatroskaParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:factory');\nfunction parseHttpContentType(contentType) {\n    const type = ContentType.parse(contentType);\n    const mime = MimeType.parse(type.type);\n    return {\n        type: mime.type,\n        subtype: mime.subtype,\n        suffix: mime.suffix,\n        parameters: type.parameters\n    };\n}\nexports.parseHttpContentType = parseHttpContentType;\nasync function parse(tokenizer, parserId, opts = {}) {\n    // Parser found, execute parser\n    const parser = await ParserFactory.loadParser(parserId);\n    const metadata = new MetadataCollector_1.MetadataCollector(opts);\n    await parser.init(metadata, tokenizer, opts).parse();\n    return metadata.toCommonMetadata();\n}\nclass ParserFactory {\n    /**\n     * Parse metadata from tokenizer\n     * @param tokenizer - Tokenizer\n     * @param opts - Options\n     * @returns Native metadata\n     */\n    static async parseOnContentType(tokenizer, opts) {\n        const { mimeType, path, url } = await tokenizer.fileInfo;\n        // Resolve parser based on MIME-type or file extension\n        const parserId = ParserFactory.getParserIdForMimeType(mimeType) || ParserFactory.getParserIdForExtension(path) || ParserFactory.getParserIdForExtension(url);\n        if (!parserId) {\n            debug('No parser found for MIME-type / extension: ' + mimeType);\n        }\n        return this.parse(tokenizer, parserId, opts);\n    }\n    static async parse(tokenizer, parserId, opts) {\n        if (!parserId) {\n            // Parser could not be determined on MIME-type or extension\n            debug('Guess parser on content...');\n            const buf = Buffer.alloc(4100);\n            await tokenizer.peekBuffer(buf, { mayBeLess: true });\n            if (tokenizer.fileInfo.path) {\n                parserId = this.getParserIdForExtension(tokenizer.fileInfo.path);\n            }\n            if (!parserId) {\n                const guessedType = await FileType.fromBuffer(buf);\n                if (!guessedType) {\n                    throw new Error('Failed to determine audio format');\n                }\n                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);\n                parserId = ParserFactory.getParserIdForMimeType(guessedType.mime);\n                if (!parserId) {\n                    throw new Error('Guessed MIME-type not supported: ' + guessedType.mime);\n                }\n            }\n        }\n        // Parser found, execute parser\n        return parse(tokenizer, parserId, opts);\n    }\n    /**\n     * @param filePath - Path, filename or extension to audio file\n     * @return Parser sub-module name\n     */\n    static getParserIdForExtension(filePath) {\n        if (!filePath)\n            return;\n        const extension = this.getExtension(filePath).toLocaleLowerCase() || filePath;\n        switch (extension) {\n            case '.mp2':\n            case '.mp3':\n            case '.m2a':\n            case '.aac': // Assume it is ADTS-container\n                return 'mpeg';\n            case '.ape':\n                return 'apev2';\n            case '.mp4':\n            case '.m4a':\n            case '.m4b':\n            case '.m4pa':\n            case '.m4v':\n            case '.m4r':\n            case '.3gp':\n                return 'mp4';\n            case '.wma':\n            case '.wmv':\n            case '.asf':\n                return 'asf';\n            case '.flac':\n                return 'flac';\n            case '.ogg':\n            case '.ogv':\n            case '.oga':\n            case '.ogm':\n            case '.ogx':\n            case '.opus': // recommended filename extension for Ogg Opus\n            case '.spx': // recommended filename extension for Ogg Speex\n                return 'ogg';\n            case '.aif':\n            case '.aiff':\n            case '.aifc':\n                return 'aiff';\n            case '.wav':\n            case '.bwf': // Broadcast Wave Format\n                return 'riff';\n            case '.wv':\n            case '.wvp':\n                return 'wavpack';\n            case '.mpc':\n                return 'musepack';\n            case '.dsf':\n                return 'dsf';\n            case '.dff':\n                return 'dsdiff';\n            case '.mka':\n            case '.mkv':\n            case '.mk3d':\n            case '.mks':\n            case '.webm':\n                return 'matroska';\n        }\n    }\n    static async loadParser(moduleName) {\n        switch (moduleName) {\n            case 'aiff': return new AiffParser_1.AIFFParser();\n            case 'adts':\n            case 'mpeg':\n                return new MpegParser_1.MpegParser();\n            case 'apev2': return new APEv2Parser_1.APEv2Parser();\n            case 'asf': return new AsfParser_1.AsfParser();\n            case 'dsf': return new DsfParser_1.DsfParser();\n            case 'dsdiff': return new DsdiffParser_1.DsdiffParser();\n            case 'flac': return new FlacParser_1.FlacParser();\n            case 'mp4': return new MP4Parser_1.MP4Parser();\n            case 'musepack': return new musepack_1.default();\n            case 'ogg': return new OggParser_1.OggParser();\n            case 'riff': return new WaveParser_1.WaveParser();\n            case 'wavpack': return new WavPackParser_1.WavPackParser();\n            case 'matroska': return new MatroskaParser_1.MatroskaParser();\n            default:\n                throw new Error(`Unknown parser type: ${moduleName}`);\n        }\n    }\n    static getExtension(fname) {\n        const i = fname.lastIndexOf('.');\n        return i === -1 ? '' : fname.slice(i);\n    }\n    /**\n     * @param httpContentType - HTTP Content-Type, extension, path or filename\n     * @returns Parser sub-module name\n     */\n    static getParserIdForMimeType(httpContentType) {\n        let mime;\n        try {\n            mime = parseHttpContentType(httpContentType);\n        }\n        catch (err) {\n            debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);\n            return;\n        }\n        const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;\n        switch (mime.type) {\n            case 'audio':\n                switch (subType) {\n                    case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object\n                    case 'mpeg':\n                        return 'mpeg';\n                    case 'aac':\n                    case 'aacp':\n                        return 'adts';\n                    case 'flac':\n                        return 'flac';\n                    case 'ape':\n                    case 'monkeys-audio':\n                        return 'apev2';\n                    case 'mp4':\n                    case 'm4a':\n                        return 'mp4';\n                    case 'ogg': // RFC 7845\n                    case 'opus': // RFC 6716\n                    case 'speex': // RFC 5574\n                        return 'ogg';\n                    case 'ms-wma':\n                    case 'ms-wmv':\n                    case 'ms-asf':\n                        return 'asf';\n                    case 'aiff':\n                    case 'aif':\n                    case 'aifc':\n                        return 'aiff';\n                    case 'vnd.wave':\n                    case 'wav':\n                    case 'wave':\n                        return 'riff';\n                    case 'wavpack':\n                        return 'wavpack';\n                    case 'musepack':\n                        return 'musepack';\n                    case 'matroska':\n                    case 'webm':\n                        return 'matroska';\n                    case 'dsf':\n                        return 'dsf';\n                }\n                break;\n            case 'video':\n                switch (subType) {\n                    case 'ms-asf':\n                    case 'ms-wmv':\n                        return 'asf';\n                    case 'm4v':\n                    case 'mp4':\n                        return 'mp4';\n                    case 'ogg':\n                        return 'ogg';\n                    case 'matroska':\n                    case 'webm':\n                        return 'matroska';\n                }\n                break;\n            case 'application':\n                switch (subType) {\n                    case 'vnd.ms-asf':\n                        return 'asf';\n                    case 'ogg':\n                        return 'ogg';\n                }\n                break;\n        }\n    }\n}\nexports.ParserFactory = ParserFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ParserFactory.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/aiff/AiffParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffParser.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AIFFParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst AiffToken = __webpack_require__(/*! ./AiffToken */ \"./node_modules/music-metadata/lib/aiff/AiffToken.js\");\nconst iff = __webpack_require__(/*! ../iff */ \"./node_modules/music-metadata/lib/iff/index.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:aiff');\nconst compressionTypes = {\n    NONE: 'not compressed\tPCM\tApple Computer',\n    sowt: 'PCM (byte swapped)',\n    fl32: '32-bit floating point IEEE 32-bit float',\n    fl64: '64-bit floating point IEEE 64-bit float\tApple Computer',\n    alaw: 'ALaw 2:1\t8-bit ITU-T G.711 A-law',\n    ulaw: 'µLaw 2:1\t8-bit ITU-T G.711 µ-law\tApple Computer',\n    ULAW: 'CCITT G.711 u-law 8-bit ITU-T G.711 µ-law',\n    ALAW: 'CCITT G.711 A-law 8-bit ITU-T G.711 A-law',\n    FL32: 'Float 32\tIEEE 32-bit float '\n};\n/**\n * AIFF - Audio Interchange File Format\n *\n * Ref:\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf\n */\nclass AIFFParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(iff.Header);\n        if (header.chunkID !== 'FORM')\n            throw new Error('Invalid Chunk-ID, expected \\'FORM\\''); // Not AIFF format\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        switch (type) {\n            case 'AIFF':\n                this.metadata.setFormat('container', type);\n                this.isCompressed = false;\n                break;\n            case 'AIFC':\n                this.metadata.setFormat('container', 'AIFF-C');\n                this.isCompressed = true;\n                break;\n            default:\n                throw Error('Unsupported AIFF type: ' + type);\n        }\n        this.metadata.setFormat('lossless', !this.isCompressed);\n        try {\n            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {\n                debug('Reading AIFF chunk at offset=' + this.tokenizer.position);\n                const chunkHeader = await this.tokenizer.readToken(iff.Header);\n                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\n                const bytesRead = await this.readData(chunkHeader);\n                await this.tokenizer.ignore(nextChunk - bytesRead);\n            }\n        }\n        catch (err) {\n            if (err instanceof strtok3.EndOfStreamError) {\n                debug(`End-of-stream`);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async readData(header) {\n        var _a;\n        switch (header.chunkID) {\n            case 'COMM': // The Common Chunk\n                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\n                this.metadata.setFormat('sampleRate', common.sampleRate);\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\n                this.metadata.setFormat('codec', (_a = common.compressionName) !== null && _a !== void 0 ? _a : compressionTypes[common.compressionType]);\n                return header.chunkSize;\n            case 'ID3 ': // ID3-meta-data\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n                return header.chunkSize;\n            case 'SSND': // Sound Data Chunk\n                if (this.metadata.format.duration) {\n                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\n                }\n                return 0;\n            case 'NAME': // Sample name chunk\n            case 'AUTH': // Author chunk\n            case '(c) ': // Copyright chunk\n            case 'ANNO': // Annotation chunk\n                return this.readTextChunk(header);\n            default:\n                debug(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);\n                return 0;\n        }\n    }\n    async readTextChunk(header) {\n        const value = await this.tokenizer.readToken(new Token.StringType(header.chunkSize, 'ascii'));\n        value.split('\\0').map(v => v.trim()).filter(v => v && v.length > 0).forEach(v => {\n            this.metadata.addTag('AIFF', header.chunkID, v.trim());\n        });\n        return header.chunkSize;\n    }\n}\nexports.AIFFParser = AIFFParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/aiff/AiffParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/aiff/AiffTagMap.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffTagMap.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AiffTagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * ID3v1 tag mappings\n */\nconst tagMap = {\n    NAME: 'title',\n    AUTH: 'artist',\n    '(c) ': 'copyright',\n    ANNO: 'comment'\n};\nclass AiffTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    constructor() {\n        super(['AIFF'], tagMap);\n    }\n}\nexports.AiffTagMapper = AiffTagMapper;\n//# sourceMappingURL=AiffTagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FpZmYvQWlmZlRhZ01hcC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsMkJBQTJCLG1CQUFPLENBQUMsZ0dBQTRCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9haWZmL0FpZmZUYWdNYXAuanM/ZDMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWlmZlRhZ01hcHBlciA9IHZvaWQgMDtcbmNvbnN0IEdlbmVyaWNUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vR2VuZXJpY1RhZ01hcHBlclwiKTtcbi8qKlxuICogSUQzdjEgdGFnIG1hcHBpbmdzXG4gKi9cbmNvbnN0IHRhZ01hcCA9IHtcbiAgICBOQU1FOiAndGl0bGUnLFxuICAgIEFVVEg6ICdhcnRpc3QnLFxuICAgICcoYykgJzogJ2NvcHlyaWdodCcsXG4gICAgQU5OTzogJ2NvbW1lbnQnXG59O1xuY2xhc3MgQWlmZlRhZ01hcHBlciBleHRlbmRzIEdlbmVyaWNUYWdNYXBwZXJfMS5Db21tb25UYWdNYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihbJ0FJRkYnXSwgdGFnTWFwKTtcbiAgICB9XG59XG5leHBvcnRzLkFpZmZUYWdNYXBwZXIgPSBBaWZmVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWlmZlRhZ01hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/aiff/AiffTagMap.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/aiff/AiffToken.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffToken.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Common = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nclass Common {\n    constructor(header, isAifc) {\n        this.isAifc = isAifc;\n        const minimumChunkSize = isAifc ? 22 : 18;\n        if (header.chunkSize < minimumChunkSize)\n            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n        const shift = buf.readUInt16BE(off + 8) - 16398;\n        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\n        const res = {\n            numChannels: buf.readUInt16BE(off),\n            numSampleFrames: buf.readUInt32BE(off + 2),\n            sampleSize: buf.readUInt16BE(off + 6),\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n        };\n        if (this.isAifc) {\n            res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\n            if (this.len > 22) {\n                const strLen = buf.readInt8(off + 22);\n                if (strLen > 0) {\n                    const padding = (strLen + 1) % 2;\n                    if (23 + strLen + padding === this.len) {\n                        res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\n                    }\n                    else {\n                        throw new Error('Illegal pstring length');\n                    }\n                }\n                else {\n                    res.compressionName = undefined;\n                }\n            }\n        }\n        else {\n            res.compressionName = 'PCM';\n        }\n        return res;\n    }\n}\nexports.Common = Common;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FpZmYvQWlmZlRva2VuLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxjQUFjLG1CQUFPLENBQUMsNERBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsNEVBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsaUJBQWlCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9haWZmL0FpZmZUb2tlbi5qcz9mMDMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21tb24gPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IEZvdXJDQ18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9Gb3VyQ0NcIik7XG5jbGFzcyBDb21tb24ge1xuICAgIGNvbnN0cnVjdG9yKGhlYWRlciwgaXNBaWZjKSB7XG4gICAgICAgIHRoaXMuaXNBaWZjID0gaXNBaWZjO1xuICAgICAgICBjb25zdCBtaW5pbXVtQ2h1bmtTaXplID0gaXNBaWZjID8gMjIgOiAxODtcbiAgICAgICAgaWYgKGhlYWRlci5jaHVua1NpemUgPCBtaW5pbXVtQ2h1bmtTaXplKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDT01NT04gQ0hVTksgc2l6ZSBzaG91bGQgYWx3YXlzIGJlIGF0IGxlYXN0ICR7bWluaW11bUNodW5rU2l6ZX1gKTtcbiAgICAgICAgdGhpcy5sZW4gPSBoZWFkZXIuY2h1bmtTaXplO1xuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgLy8gc2VlOiBodHRwczovL2N5Y2xpbmc3NC5jb20vZm9ydW1zL2FpZmZzLTgwLWJpdC1zYW1wbGUtcmF0ZS12YWx1ZVxuICAgICAgICBjb25zdCBzaGlmdCA9IGJ1Zi5yZWFkVUludDE2QkUob2ZmICsgOCkgLSAxNjM5ODtcbiAgICAgICAgY29uc3QgYmFzZVNhbXBsZVJhdGUgPSBidWYucmVhZFVJbnQxNkJFKG9mZiArIDggKyAyKTtcbiAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgbnVtQ2hhbm5lbHM6IGJ1Zi5yZWFkVUludDE2QkUob2ZmKSxcbiAgICAgICAgICAgIG51bVNhbXBsZUZyYW1lczogYnVmLnJlYWRVSW50MzJCRShvZmYgKyAyKSxcbiAgICAgICAgICAgIHNhbXBsZVNpemU6IGJ1Zi5yZWFkVUludDE2QkUob2ZmICsgNiksXG4gICAgICAgICAgICBzYW1wbGVSYXRlOiBzaGlmdCA8IDAgPyBiYXNlU2FtcGxlUmF0ZSA+PiBNYXRoLmFicyhzaGlmdCkgOiBiYXNlU2FtcGxlUmF0ZSA8PCBzaGlmdFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5pc0FpZmMpIHtcbiAgICAgICAgICAgIHJlcy5jb21wcmVzc2lvblR5cGUgPSBGb3VyQ0NfMS5Gb3VyQ2NUb2tlbi5nZXQoYnVmLCBvZmYgKyAxOCk7XG4gICAgICAgICAgICBpZiAodGhpcy5sZW4gPiAyMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ckxlbiA9IGJ1Zi5yZWFkSW50OChvZmYgKyAyMik7XG4gICAgICAgICAgICAgICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9IChzdHJMZW4gKyAxKSAlIDI7XG4gICAgICAgICAgICAgICAgICAgIGlmICgyMyArIHN0ckxlbiArIHBhZGRpbmcgPT09IHRoaXMubGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuY29tcHJlc3Npb25OYW1lID0gbmV3IFRva2VuLlN0cmluZ1R5cGUoc3RyTGVuLCAnYmluYXJ5JykuZ2V0KGJ1Ziwgb2ZmICsgMjMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHBzdHJpbmcgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5jb21wcmVzc2lvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzLmNvbXByZXNzaW9uTmFtZSA9ICdQQ00nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tb24gPSBDb21tb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/aiff/AiffToken.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/apev2/APEv2Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2Parser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.APEv2Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst token_types_1 = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Token_1 = __webpack_require__(/*! ./APEv2Token */ \"./node_modules/music-metadata/lib/apev2/APEv2Token.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:APEv2');\nconst tagFormat = 'APEv2';\nconst preamble = 'APETAGEX';\nclass APEv2Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.ape = {};\n    }\n    static tryParseApeHeader(metadata, tokenizer, options) {\n        const apeParser = new APEv2Parser();\n        apeParser.init(metadata, tokenizer, options);\n        return apeParser.tryParseApeHeader();\n    }\n    /**\n     * Calculate the media file duration\n     * @param ah ApeHeader\n     * @return {number} duration in seconds\n     */\n    static calculateDuration(ah) {\n        let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;\n        duration += ah.finalFrameBlocks;\n        return duration / ah.sampleRate;\n    }\n    /**\n     * Calculates the APEv1 / APEv2 first field offset\n     * @param reader\n     * @param offset\n     */\n    static async findApeFooterOffset(reader, offset) {\n        // Search for APE footer header at the end of the file\n        const apeBuf = Buffer.alloc(APEv2Token_1.TagFooter.len);\n        await reader.randomRead(apeBuf, 0, APEv2Token_1.TagFooter.len, offset - APEv2Token_1.TagFooter.len);\n        const tagFooter = APEv2Token_1.TagFooter.get(apeBuf, 0);\n        if (tagFooter.ID === 'APETAGEX') {\n            debug(`APE footer header at offset=${offset}`);\n            return { footer: tagFooter, offset: offset - tagFooter.size };\n        }\n    }\n    static parseTagFooter(metadata, buffer, options) {\n        const footer = APEv2Token_1.TagFooter.get(buffer, buffer.length - APEv2Token_1.TagFooter.len);\n        if (footer.ID !== preamble)\n            throw new Error('Unexpected APEv2 Footer ID preamble value.');\n        strtok3.fromBuffer(buffer);\n        const apeParser = new APEv2Parser();\n        apeParser.init(metadata, strtok3.fromBuffer(buffer), options);\n        return apeParser.parseTags(footer);\n    }\n    /**\n     * Parse APEv1 / APEv2 header if header signature found\n     */\n    async tryParseApeHeader() {\n        if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < APEv2Token_1.TagFooter.len) {\n            debug(`No APEv2 header found, end-of-file reached`);\n            return;\n        }\n        const footer = await this.tokenizer.peekToken(APEv2Token_1.TagFooter);\n        if (footer.ID === preamble) {\n            await this.tokenizer.ignore(APEv2Token_1.TagFooter.len);\n            return this.parseTags(footer);\n        }\n        else {\n            debug(`APEv2 header not found at offset=${this.tokenizer.position}`);\n            if (this.tokenizer.fileInfo.size) {\n                // Try to read the APEv2 header using just the footer-header\n                const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account\n                const buffer = Buffer.alloc(remaining);\n                await this.tokenizer.readBuffer(buffer);\n                return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);\n            }\n        }\n    }\n    async parse() {\n        const descriptor = await this.tokenizer.readToken(APEv2Token_1.DescriptorParser);\n        if (descriptor.ID !== 'MAC ')\n            throw new Error('Unexpected descriptor ID');\n        this.ape.descriptor = descriptor;\n        const lenExp = descriptor.descriptorBytes - APEv2Token_1.DescriptorParser.len;\n        const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());\n        await this.tokenizer.ignore(header.forwardBytes);\n        return this.tryParseApeHeader();\n    }\n    async parseTags(footer) {\n        const keyBuffer = Buffer.alloc(256); // maximum tag key length\n        let bytesRemaining = footer.size - APEv2Token_1.TagFooter.len;\n        debug(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);\n        for (let i = 0; i < footer.fields; i++) {\n            if (bytesRemaining < APEv2Token_1.TagItemHeader.len) {\n                this.metadata.addWarning(`APEv2 Tag-header: ${footer.fields - i} items remaining, but no more tag data to read.`);\n                break;\n            }\n            // Only APEv2 tag has tag item headers\n            const tagItemHeader = await this.tokenizer.readToken(APEv2Token_1.TagItemHeader);\n            bytesRemaining -= APEv2Token_1.TagItemHeader.len + tagItemHeader.size;\n            await this.tokenizer.peekBuffer(keyBuffer, { length: Math.min(keyBuffer.length, bytesRemaining) });\n            let zero = util.findZero(keyBuffer, 0, keyBuffer.length);\n            const key = await this.tokenizer.readToken(new token_types_1.StringType(zero, 'ascii'));\n            await this.tokenizer.ignore(1);\n            bytesRemaining -= key.length + 1;\n            switch (tagItemHeader.flags.dataType) {\n                case APEv2Token_1.DataType.text_utf8: { // utf-8 text-string\n                    const value = await this.tokenizer.readToken(new token_types_1.StringType(tagItemHeader.size, 'utf8'));\n                    const values = value.split(/\\x00/g);\n                    for (const val of values) {\n                        this.metadata.addTag(tagFormat, key, val);\n                    }\n                    break;\n                }\n                case APEv2Token_1.DataType.binary: // binary (probably artwork)\n                    if (this.options.skipCovers) {\n                        await this.tokenizer.ignore(tagItemHeader.size);\n                    }\n                    else {\n                        const picData = Buffer.alloc(tagItemHeader.size);\n                        await this.tokenizer.readBuffer(picData);\n                        zero = util.findZero(picData, 0, picData.length);\n                        const description = picData.toString('utf8', 0, zero);\n                        const data = Buffer.from(picData.slice(zero + 1));\n                        this.metadata.addTag(tagFormat, key, {\n                            description,\n                            data\n                        });\n                    }\n                    break;\n                case APEv2Token_1.DataType.external_info:\n                    debug(`Ignore external info ${key}`);\n                    await this.tokenizer.ignore(tagItemHeader.size);\n                    break;\n                case APEv2Token_1.DataType.reserved:\n                    debug(`Ignore external info ${key}`);\n                    this.metadata.addWarning(`APEv2 header declares a reserved datatype for \"${key}\"`);\n                    await this.tokenizer.ignore(tagItemHeader.size);\n                    break;\n            }\n        }\n    }\n    async parseDescriptorExpansion(lenExp) {\n        await this.tokenizer.ignore(lenExp);\n        return this.parseHeader();\n    }\n    async parseHeader() {\n        const header = await this.tokenizer.readToken(APEv2Token_1.Header);\n        // ToDo before\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('container', 'Monkey\\'s Audio');\n        this.metadata.setFormat('bitsPerSample', header.bitsPerSample);\n        this.metadata.setFormat('sampleRate', header.sampleRate);\n        this.metadata.setFormat('numberOfChannels', header.channel);\n        this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));\n        return {\n            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes +\n                this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes\n        };\n    }\n}\nexports.APEv2Parser = APEv2Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/apev2/APEv2Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.APEv2TagMapper = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * ID3v2.2 tag mappings\n */\nconst apev2TagMap = {\n    Title: 'title',\n    Artist: 'artist',\n    Artists: 'artists',\n    'Album Artist': 'albumartist',\n    Album: 'album',\n    Year: 'date',\n    Originalyear: 'originalyear',\n    Originaldate: 'originaldate',\n    Comment: 'comment',\n    Track: 'track',\n    Disc: 'disk',\n    DISCNUMBER: 'disk',\n    Genre: 'genre',\n    'Cover Art (Front)': 'picture',\n    'Cover Art (Back)': 'picture',\n    Composer: 'composer',\n    Lyrics: 'lyrics',\n    ALBUMSORT: 'albumsort',\n    TITLESORT: 'titlesort',\n    WORK: 'work',\n    ARTISTSORT: 'artistsort',\n    ALBUMARTISTSORT: 'albumartistsort',\n    COMPOSERSORT: 'composersort',\n    Lyricist: 'lyricist',\n    Writer: 'writer',\n    Conductor: 'conductor',\n    // 'Performer=artist (instrument)': 'performer:instrument',\n    MixArtist: 'remixer',\n    Arranger: 'arranger',\n    Engineer: 'engineer',\n    Producer: 'producer',\n    DJMixer: 'djmixer',\n    Mixer: 'mixer',\n    Label: 'label',\n    Grouping: 'grouping',\n    Subtitle: 'subtitle',\n    DiscSubtitle: 'discsubtitle',\n    Compilation: 'compilation',\n    BPM: 'bpm',\n    Mood: 'mood',\n    Media: 'media',\n    CatalogNumber: 'catalognumber',\n    MUSICBRAINZ_ALBUMSTATUS: 'releasestatus',\n    MUSICBRAINZ_ALBUMTYPE: 'releasetype',\n    RELEASECOUNTRY: 'releasecountry',\n    Script: 'script',\n    Language: 'language',\n    Copyright: 'copyright',\n    LICENSE: 'license',\n    EncodedBy: 'encodedby',\n    EncoderSettings: 'encodersettings',\n    Barcode: 'barcode',\n    ISRC: 'isrc',\n    ASIN: 'asin',\n    musicbrainz_trackid: 'musicbrainz_recordingid',\n    musicbrainz_releasetrackid: 'musicbrainz_trackid',\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\n    Acoustid_Id: 'acoustid_id',\n    ACOUSTID_FINGERPRINT: 'acoustid_fingerprint',\n    MUSICIP_PUID: 'musicip_puid',\n    Weblink: 'website',\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\n    MP3GAIN_MINMAX: 'replaygain_track_minmax',\n    MP3GAIN_UNDO: 'replaygain_undo'\n};\nclass APEv2TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super(['APEv2'], apev2TagMap);\n    }\n}\nexports.APEv2TagMapper = APEv2TagMapper;\n//# sourceMappingURL=APEv2TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FwZXYyL0FQRXYyVGFnTWFwcGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixnQ0FBZ0MsbUJBQU8sQ0FBQywwR0FBaUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvYXBldjIvQVBFdjJUYWdNYXBwZXIuanM/ODlhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQVBFdjJUYWdNYXBwZXIgPSB2b2lkIDA7XG5jb25zdCBDYXNlSW5zZW5zaXRpdmVUYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXCIpO1xuLyoqXG4gKiBJRDN2Mi4yIHRhZyBtYXBwaW5nc1xuICovXG5jb25zdCBhcGV2MlRhZ01hcCA9IHtcbiAgICBUaXRsZTogJ3RpdGxlJyxcbiAgICBBcnRpc3Q6ICdhcnRpc3QnLFxuICAgIEFydGlzdHM6ICdhcnRpc3RzJyxcbiAgICAnQWxidW0gQXJ0aXN0JzogJ2FsYnVtYXJ0aXN0JyxcbiAgICBBbGJ1bTogJ2FsYnVtJyxcbiAgICBZZWFyOiAnZGF0ZScsXG4gICAgT3JpZ2luYWx5ZWFyOiAnb3JpZ2luYWx5ZWFyJyxcbiAgICBPcmlnaW5hbGRhdGU6ICdvcmlnaW5hbGRhdGUnLFxuICAgIENvbW1lbnQ6ICdjb21tZW50JyxcbiAgICBUcmFjazogJ3RyYWNrJyxcbiAgICBEaXNjOiAnZGlzaycsXG4gICAgRElTQ05VTUJFUjogJ2Rpc2snLFxuICAgIEdlbnJlOiAnZ2VucmUnLFxuICAgICdDb3ZlciBBcnQgKEZyb250KSc6ICdwaWN0dXJlJyxcbiAgICAnQ292ZXIgQXJ0IChCYWNrKSc6ICdwaWN0dXJlJyxcbiAgICBDb21wb3NlcjogJ2NvbXBvc2VyJyxcbiAgICBMeXJpY3M6ICdseXJpY3MnLFxuICAgIEFMQlVNU09SVDogJ2FsYnVtc29ydCcsXG4gICAgVElUTEVTT1JUOiAndGl0bGVzb3J0JyxcbiAgICBXT1JLOiAnd29yaycsXG4gICAgQVJUSVNUU09SVDogJ2FydGlzdHNvcnQnLFxuICAgIEFMQlVNQVJUSVNUU09SVDogJ2FsYnVtYXJ0aXN0c29ydCcsXG4gICAgQ09NUE9TRVJTT1JUOiAnY29tcG9zZXJzb3J0JyxcbiAgICBMeXJpY2lzdDogJ2x5cmljaXN0JyxcbiAgICBXcml0ZXI6ICd3cml0ZXInLFxuICAgIENvbmR1Y3RvcjogJ2NvbmR1Y3RvcicsXG4gICAgLy8gJ1BlcmZvcm1lcj1hcnRpc3TCoChpbnN0cnVtZW50KSc6ICdwZXJmb3JtZXI6aW5zdHJ1bWVudCcsXG4gICAgTWl4QXJ0aXN0OiAncmVtaXhlcicsXG4gICAgQXJyYW5nZXI6ICdhcnJhbmdlcicsXG4gICAgRW5naW5lZXI6ICdlbmdpbmVlcicsXG4gICAgUHJvZHVjZXI6ICdwcm9kdWNlcicsXG4gICAgREpNaXhlcjogJ2RqbWl4ZXInLFxuICAgIE1peGVyOiAnbWl4ZXInLFxuICAgIExhYmVsOiAnbGFiZWwnLFxuICAgIEdyb3VwaW5nOiAnZ3JvdXBpbmcnLFxuICAgIFN1YnRpdGxlOiAnc3VidGl0bGUnLFxuICAgIERpc2NTdWJ0aXRsZTogJ2Rpc2NzdWJ0aXRsZScsXG4gICAgQ29tcGlsYXRpb246ICdjb21waWxhdGlvbicsXG4gICAgQlBNOiAnYnBtJyxcbiAgICBNb29kOiAnbW9vZCcsXG4gICAgTWVkaWE6ICdtZWRpYScsXG4gICAgQ2F0YWxvZ051bWJlcjogJ2NhdGFsb2dudW1iZXInLFxuICAgIE1VU0lDQlJBSU5aX0FMQlVNU1RBVFVTOiAncmVsZWFzZXN0YXR1cycsXG4gICAgTVVTSUNCUkFJTlpfQUxCVU1UWVBFOiAncmVsZWFzZXR5cGUnLFxuICAgIFJFTEVBU0VDT1VOVFJZOiAncmVsZWFzZWNvdW50cnknLFxuICAgIFNjcmlwdDogJ3NjcmlwdCcsXG4gICAgTGFuZ3VhZ2U6ICdsYW5ndWFnZScsXG4gICAgQ29weXJpZ2h0OiAnY29weXJpZ2h0JyxcbiAgICBMSUNFTlNFOiAnbGljZW5zZScsXG4gICAgRW5jb2RlZEJ5OiAnZW5jb2RlZGJ5JyxcbiAgICBFbmNvZGVyU2V0dGluZ3M6ICdlbmNvZGVyc2V0dGluZ3MnLFxuICAgIEJhcmNvZGU6ICdiYXJjb2RlJyxcbiAgICBJU1JDOiAnaXNyYycsXG4gICAgQVNJTjogJ2FzaW4nLFxuICAgIG11c2ljYnJhaW56X3RyYWNraWQ6ICdtdXNpY2JyYWluel9yZWNvcmRpbmdpZCcsXG4gICAgbXVzaWNicmFpbnpfcmVsZWFzZXRyYWNraWQ6ICdtdXNpY2JyYWluel90cmFja2lkJyxcbiAgICBNVVNJQ0JSQUlOWl9BTEJVTUlEOiAnbXVzaWNicmFpbnpfYWxidW1pZCcsXG4gICAgTVVTSUNCUkFJTlpfQVJUSVNUSUQ6ICdtdXNpY2JyYWluel9hcnRpc3RpZCcsXG4gICAgTVVTSUNCUkFJTlpfQUxCVU1BUlRJU1RJRDogJ211c2ljYnJhaW56X2FsYnVtYXJ0aXN0aWQnLFxuICAgIE1VU0lDQlJBSU5aX1JFTEVBU0VHUk9VUElEOiAnbXVzaWNicmFpbnpfcmVsZWFzZWdyb3VwaWQnLFxuICAgIE1VU0lDQlJBSU5aX1dPUktJRDogJ211c2ljYnJhaW56X3dvcmtpZCcsXG4gICAgTVVTSUNCUkFJTlpfVFJNSUQ6ICdtdXNpY2JyYWluel90cm1pZCcsXG4gICAgTVVTSUNCUkFJTlpfRElTQ0lEOiAnbXVzaWNicmFpbnpfZGlzY2lkJyxcbiAgICBBY291c3RpZF9JZDogJ2Fjb3VzdGlkX2lkJyxcbiAgICBBQ09VU1RJRF9GSU5HRVJQUklOVDogJ2Fjb3VzdGlkX2ZpbmdlcnByaW50JyxcbiAgICBNVVNJQ0lQX1BVSUQ6ICdtdXNpY2lwX3B1aWQnLFxuICAgIFdlYmxpbms6ICd3ZWJzaXRlJyxcbiAgICBSRVBMQVlHQUlOX1RSQUNLX0dBSU46ICdyZXBsYXlnYWluX3RyYWNrX2dhaW4nLFxuICAgIFJFUExBWUdBSU5fVFJBQ0tfUEVBSzogJ3JlcGxheWdhaW5fdHJhY2tfcGVhaycsXG4gICAgTVAzR0FJTl9NSU5NQVg6ICdyZXBsYXlnYWluX3RyYWNrX21pbm1heCcsXG4gICAgTVAzR0FJTl9VTkRPOiAncmVwbGF5Z2Fpbl91bmRvJ1xufTtcbmNsYXNzIEFQRXYyVGFnTWFwcGVyIGV4dGVuZHMgQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXzEuQ2FzZUluc2Vuc2l0aXZlVGFnTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoWydBUEV2MiddLCBhcGV2MlRhZ01hcCk7XG4gICAgfVxufVxuZXhwb3J0cy5BUEV2MlRhZ01hcHBlciA9IEFQRXYyVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QVBFdjJUYWdNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/apev2/APEv2Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2Token.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBitSet = exports.parseTagFlags = exports.TagField = exports.TagItemHeader = exports.TagFooter = exports.Header = exports.DescriptorParser = exports.DataType = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"text_utf8\"] = 0] = \"text_utf8\";\n    DataType[DataType[\"binary\"] = 1] = \"binary\";\n    DataType[DataType[\"external_info\"] = 2] = \"external_info\";\n    DataType[DataType[\"reserved\"] = 3] = \"reserved\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n/**\n * APE_DESCRIPTOR: defines the sizes (and offsets) of all the pieces, as well as the MD5 checksum\n */\nexports.DescriptorParser = {\n    len: 52,\n    get: (buf, off) => {\n        return {\n            // should equal 'MAC '\n            ID: FourCC_1.FourCcToken.get(buf, off),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            version: Token.UINT32_LE.get(buf, off + 4) / 1000,\n            // the number of descriptor bytes (allows later expansion of this header)\n            descriptorBytes: Token.UINT32_LE.get(buf, off + 8),\n            // the number of header APE_HEADER bytes\n            headerBytes: Token.UINT32_LE.get(buf, off + 12),\n            // the number of header APE_HEADER bytes\n            seekTableBytes: Token.UINT32_LE.get(buf, off + 16),\n            // the number of header data bytes (from original file)\n            headerDataBytes: Token.UINT32_LE.get(buf, off + 20),\n            // the number of bytes of APE frame data\n            apeFrameDataBytes: Token.UINT32_LE.get(buf, off + 24),\n            // the high order number of APE frame data bytes\n            apeFrameDataBytesHigh: Token.UINT32_LE.get(buf, off + 28),\n            // the terminating data of the file (not including tag data)\n            terminatingDataBytes: Token.UINT32_LE.get(buf, off + 32),\n            // the MD5 hash of the file (see notes for usage... it's a little tricky)\n            fileMD5: new Token.Uint8ArrayType(16).get(buf, off + 36)\n        };\n    }\n};\n/**\n * APE_HEADER: describes all of the necessary information about the APE file\n */\nexports.Header = {\n    len: 24,\n    get: (buf, off) => {\n        return {\n            // the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)\n            compressionLevel: Token.UINT16_LE.get(buf, off),\n            // any format flags (for future use)\n            formatFlags: Token.UINT16_LE.get(buf, off + 2),\n            // the number of audio blocks in one frame\n            blocksPerFrame: Token.UINT32_LE.get(buf, off + 4),\n            // the number of audio blocks in the final frame\n            finalFrameBlocks: Token.UINT32_LE.get(buf, off + 8),\n            // the total number of frames\n            totalFrames: Token.UINT32_LE.get(buf, off + 12),\n            // the bits per sample (typically 16)\n            bitsPerSample: Token.UINT16_LE.get(buf, off + 16),\n            // the number of channels (1 or 2)\n            channel: Token.UINT16_LE.get(buf, off + 18),\n            // the sample rate (typically 44100)\n            sampleRate: Token.UINT32_LE.get(buf, off + 20)\n        };\n    }\n};\n/**\n * APE Tag Header/Footer Version 2.0\n * TAG: describes all the properties of the file [optional]\n */\nexports.TagFooter = {\n    len: 32,\n    get: (buf, off) => {\n        return {\n            // should equal 'APETAGEX'\n            ID: new Token.StringType(8, 'ascii').get(buf, off),\n            // equals CURRENT_APE_TAG_VERSION\n            version: Token.UINT32_LE.get(buf, off + 8),\n            // the complete size of the tag, including this footer (excludes header)\n            size: Token.UINT32_LE.get(buf, off + 12),\n            // the number of fields in the tag\n            fields: Token.UINT32_LE.get(buf, off + 16),\n            // reserved for later use (must be zero),\n            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 20))\n        };\n    }\n};\n/**\n * APE Tag v2.0 Item Header\n */\nexports.TagItemHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Length of assigned value in bytes\n            size: Token.UINT32_LE.get(buf, off),\n            // reserved for later use (must be zero),\n            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 4))\n        };\n    }\n};\nconst TagField = footer => {\n    return new Token.Uint8ArrayType(footer.size - exports.TagFooter.len);\n};\nexports.TagField = TagField;\nfunction parseTagFlags(flags) {\n    return {\n        containsHeader: isBitSet(flags, 31),\n        containsFooter: isBitSet(flags, 30),\n        isHeader: isBitSet(flags, 31),\n        readOnly: isBitSet(flags, 0),\n        dataType: (flags & 6) >> 1\n    };\n}\nexports.parseTagFlags = parseTagFlags;\n/**\n * @param num {number}\n * @param bit 0 is least significant bit (LSB)\n * @return {boolean} true if bit is 1; otherwise false\n */\nfunction isBitSet(num, bit) {\n    return (num & 1 << bit) !== 0;\n}\nexports.isBitSet = isBitSet;\n//# sourceMappingURL=APEv2Token.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/apev2/APEv2Token.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfObject.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfObject.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n// ASF Objects\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WmPictureToken = exports.MetadataLibraryObjectState = exports.MetadataObjectState = exports.ExtendedStreamPropertiesObjectState = exports.ExtendedContentDescriptionObjectState = exports.ContentDescriptionObjectState = exports.readCodecEntries = exports.HeaderExtensionObject = exports.StreamPropertiesObject = exports.FilePropertiesObject = exports.IgnoreObjectState = exports.State = exports.HeaderObjectToken = exports.TopLevelHeaderObjectToken = exports.DataType = void 0;\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst GUID_1 = __webpack_require__(/*! ./GUID */ \"./node_modules/music-metadata/lib/asf/GUID.js\");\nconst AsfUtil_1 = __webpack_require__(/*! ./AsfUtil */ \"./node_modules/music-metadata/lib/asf/AsfUtil.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ../id3v2/ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/**\n * Data Type: Specifies the type of information being stored. The following values are recognized.\n */\nvar DataType;\n(function (DataType) {\n    /**\n     * Unicode string. The data consists of a sequence of Unicode characters.\n     */\n    DataType[DataType[\"UnicodeString\"] = 0] = \"UnicodeString\";\n    /**\n     * BYTE array. The type of data is implementation-specific.\n     */\n    DataType[DataType[\"ByteArray\"] = 1] = \"ByteArray\";\n    /**\n     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.\n     */\n    DataType[DataType[\"Bool\"] = 2] = \"Bool\";\n    /**\n     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.\n     */\n    DataType[DataType[\"DWord\"] = 3] = \"DWord\";\n    /**\n     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.\n     */\n    DataType[DataType[\"QWord\"] = 4] = \"QWord\";\n    /**\n     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.\n     */\n    DataType[DataType[\"Word\"] = 5] = \"Word\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n/**\n * Token for: 3. ASF top-level Header Object\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3\n */\nexports.TopLevelHeaderObjectToken = {\n    len: 30,\n    get: (buf, off) => {\n        return {\n            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),\n            objectSize: Number(Token.UINT64_LE.get(buf, off + 16)),\n            numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)\n            // Reserved: 2 bytes\n        };\n    }\n};\n/**\n * Token for: 3.1 Header Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1\n */\nexports.HeaderObjectToken = {\n    len: 24,\n    get: (buf, off) => {\n        return {\n            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),\n            objectSize: Number(Token.UINT64_LE.get(buf, off + 16))\n        };\n    }\n};\nclass State {\n    constructor(header) {\n        this.len = Number(header.objectSize) - exports.HeaderObjectToken.len;\n    }\n    postProcessTag(tags, name, valueType, data) {\n        if (name === 'WM/Picture') {\n            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });\n        }\n        else {\n            const parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(valueType);\n            if (!parseAttr) {\n                throw new Error('unexpected value headerType: ' + valueType);\n            }\n            tags.push({ id: name, value: parseAttr(data) });\n        }\n    }\n}\nexports.State = State;\n// ToDo: use ignore type\nclass IgnoreObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return null;\n    }\n}\nexports.IgnoreObjectState = IgnoreObjectState;\n/**\n * Token for: 3.2: File Properties Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2\n */\nclass FilePropertiesObject extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return {\n            fileId: GUID_1.default.fromBin(buf, off),\n            fileSize: Token.UINT64_LE.get(buf, off + 16),\n            creationDate: Token.UINT64_LE.get(buf, off + 24),\n            dataPacketsCount: Token.UINT64_LE.get(buf, off + 32),\n            playDuration: Token.UINT64_LE.get(buf, off + 40),\n            sendDuration: Token.UINT64_LE.get(buf, off + 48),\n            preroll: Token.UINT64_LE.get(buf, off + 56),\n            flags: {\n                broadcast: util.getBit(buf, off + 64, 24),\n                seekable: util.getBit(buf, off + 64, 25)\n            },\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n            minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),\n            maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),\n            maximumBitrate: Token.UINT32_LE.get(buf, off + 76)\n        };\n    }\n}\nexports.FilePropertiesObject = FilePropertiesObject;\nFilePropertiesObject.guid = GUID_1.default.FilePropertiesObject;\n/**\n * Token for: 3.3 Stream Properties Object (mandatory, one per stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3\n */\nclass StreamPropertiesObject extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return {\n            streamType: GUID_1.default.decodeMediaType(GUID_1.default.fromBin(buf, off)),\n            errorCorrectionType: GUID_1.default.fromBin(buf, off + 8)\n            // ToDo\n        };\n    }\n}\nexports.StreamPropertiesObject = StreamPropertiesObject;\nStreamPropertiesObject.guid = GUID_1.default.StreamPropertiesObject;\n/**\n * 3.4: Header Extension Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4\n */\nclass HeaderExtensionObject {\n    constructor() {\n        this.len = 22;\n    }\n    get(buf, off) {\n        return {\n            reserved1: GUID_1.default.fromBin(buf, off),\n            reserved2: buf.readUInt16LE(off + 16),\n            extensionDataSize: buf.readUInt32LE(off + 18)\n        };\n    }\n}\nexports.HeaderExtensionObject = HeaderExtensionObject;\nHeaderExtensionObject.guid = GUID_1.default.HeaderExtensionObject;\n/**\n * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\n */\nconst CodecListObjectHeader = {\n    len: 20,\n    get: (buf, off) => {\n        return {\n            entryCount: buf.readUInt16LE(off + 16)\n        };\n    }\n};\nasync function readString(tokenizer) {\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\n    return (await tokenizer.readToken(new Token.StringType(length * 2, 'utf16le'))).replace('\\0', '');\n}\n/**\n * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\n */\nasync function readCodecEntries(tokenizer) {\n    const codecHeader = await tokenizer.readToken(CodecListObjectHeader);\n    const entries = [];\n    for (let i = 0; i < codecHeader.entryCount; ++i) {\n        entries.push(await readCodecEntry(tokenizer));\n    }\n    return entries;\n}\nexports.readCodecEntries = readCodecEntries;\nasync function readInformation(tokenizer) {\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\n    const buf = Buffer.alloc(length);\n    await tokenizer.readBuffer(buf);\n    return buf;\n}\n/**\n * Read Codec-Entries\n * @param tokenizer\n */\nasync function readCodecEntry(tokenizer) {\n    const type = await tokenizer.readNumber(Token.UINT16_LE);\n    return {\n        type: {\n            videoCodec: (type & 0x0001) === 0x0001,\n            audioCodec: (type & 0x0002) === 0x0002\n        },\n        codecName: await readString(tokenizer),\n        description: await readString(tokenizer),\n        information: await readInformation(tokenizer)\n    };\n}\n/**\n * 3.10 Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10\n */\nclass ContentDescriptionObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        const tags = [];\n        let pos = off + 10;\n        for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {\n            const length = buf.readUInt16LE(off + i * 2);\n            if (length > 0) {\n                const tagName = ContentDescriptionObjectState.contentDescTags[i];\n                const end = pos + length;\n                tags.push({ id: tagName, value: AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, end)) });\n                pos = end;\n            }\n        }\n        return tags;\n    }\n}\nexports.ContentDescriptionObjectState = ContentDescriptionObjectState;\nContentDescriptionObjectState.guid = GUID_1.default.ContentDescriptionObject;\nContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];\n/**\n * 3.11 Extended Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11\n */\nclass ExtendedContentDescriptionObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        const tags = [];\n        const attrCount = buf.readUInt16LE(off);\n        let pos = off + 2;\n        for (let i = 0; i < attrCount; i += 1) {\n            const nameLen = buf.readUInt16LE(pos);\n            pos += 2;\n            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\n            pos += nameLen;\n            const valueType = buf.readUInt16LE(pos);\n            pos += 2;\n            const valueLen = buf.readUInt16LE(pos);\n            pos += 2;\n            const value = buf.slice(pos, pos + valueLen);\n            pos += valueLen;\n            this.postProcessTag(tags, name, valueType, value);\n        }\n        return tags;\n    }\n}\nexports.ExtendedContentDescriptionObjectState = ExtendedContentDescriptionObjectState;\nExtendedContentDescriptionObjectState.guid = GUID_1.default.ExtendedContentDescriptionObject;\n/**\n * 4.1 Extended Stream Properties Object (optional, 1 per media stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1\n */\nclass ExtendedStreamPropertiesObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return {\n            startTime: Token.UINT64_LE.get(buf, off),\n            endTime: Token.UINT64_LE.get(buf, off + 8),\n            dataBitrate: buf.readInt32LE(off + 12),\n            bufferSize: buf.readInt32LE(off + 16),\n            initialBufferFullness: buf.readInt32LE(off + 20),\n            alternateDataBitrate: buf.readInt32LE(off + 24),\n            alternateBufferSize: buf.readInt32LE(off + 28),\n            alternateInitialBufferFullness: buf.readInt32LE(off + 32),\n            maximumObjectSize: buf.readInt32LE(off + 36),\n            flags: {\n                reliableFlag: util.getBit(buf, off + 40, 0),\n                seekableFlag: util.getBit(buf, off + 40, 1),\n                resendLiveCleanpointsFlag: util.getBit(buf, off + 40, 2)\n            },\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n            streamNumber: buf.readInt16LE(off + 42),\n            streamLanguageId: buf.readInt16LE(off + 44),\n            averageTimePerFrame: buf.readInt32LE(off + 52),\n            streamNameCount: buf.readInt32LE(off + 54),\n            payloadExtensionSystems: buf.readInt32LE(off + 56),\n            streamNames: [],\n            streamPropertiesObject: null\n        };\n    }\n}\nexports.ExtendedStreamPropertiesObjectState = ExtendedStreamPropertiesObjectState;\nExtendedStreamPropertiesObjectState.guid = GUID_1.default.ExtendedStreamPropertiesObject;\n/**\n * 4.7  Metadata Object (optional, 0 or 1)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7\n */\nclass MetadataObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(uint8Array, off) {\n        const tags = [];\n        const buf = Buffer.from(uint8Array);\n        const descriptionRecordsCount = buf.readUInt16LE(off);\n        let pos = off + 2;\n        for (let i = 0; i < descriptionRecordsCount; i += 1) {\n            pos += 4;\n            const nameLen = buf.readUInt16LE(pos);\n            pos += 2;\n            const dataType = buf.readUInt16LE(pos);\n            pos += 2;\n            const dataLen = buf.readUInt32LE(pos);\n            pos += 4;\n            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\n            pos += nameLen;\n            const data = buf.slice(pos, pos + dataLen);\n            pos += dataLen;\n            this.postProcessTag(tags, name, dataType, data);\n        }\n        return tags;\n    }\n}\nexports.MetadataObjectState = MetadataObjectState;\nMetadataObjectState.guid = GUID_1.default.MetadataObject;\n// 4.8\tMetadata Library Object (optional, 0 or 1)\nclass MetadataLibraryObjectState extends MetadataObjectState {\n    constructor(header) {\n        super(header);\n    }\n}\nexports.MetadataLibraryObjectState = MetadataLibraryObjectState;\nMetadataLibraryObjectState.guid = GUID_1.default.MetadataLibraryObject;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx\n */\nclass WmPictureToken {\n    static fromBase64(base64str) {\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\n    }\n    static fromBuffer(buffer) {\n        const pic = new WmPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const typeId = buffer.readUInt8(offset++);\n        const size = buffer.readInt32LE(offset);\n        let index = 5;\n        while (buffer.readUInt16BE(index) !== 0) {\n            index += 2;\n        }\n        const format = buffer.slice(5, index).toString('utf16le');\n        while (buffer.readUInt16BE(index) !== 0) {\n            index += 2;\n        }\n        const description = buffer.slice(5, index).toString('utf16le');\n        return {\n            type: ID3v2Token_1.AttachedPictureType[typeId],\n            format,\n            description,\n            size,\n            data: buffer.slice(index + 4)\n        };\n    }\n}\nexports.WmPictureToken = WmPictureToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/asf/AsfObject.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfParser.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsfParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst type_1 = __webpack_require__(/*! ../type */ \"./node_modules/music-metadata/lib/type.js\");\nconst GUID_1 = __webpack_require__(/*! ./GUID */ \"./node_modules/music-metadata/lib/asf/GUID.js\");\nconst AsfObject = __webpack_require__(/*! ./AsfObject */ \"./node_modules/music-metadata/lib/asf/AsfObject.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ASF');\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01\n * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\nclass AsfParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n        }\n        try {\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\n        }\n        catch (err) {\n            debug('Error while parsing ASF: %s', err);\n        }\n    }\n    async parseObjectHeader(numberOfObjectHeaders) {\n        let tags;\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            // Parse data part of the ASF Object\n            debug('header GUID=%s', header.objectId.str);\n            switch (header.objectId.str) {\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n                    this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n                    break;\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n                    break;\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\n                    break;\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case GUID_1.default.CodecListObject.str:\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n                    codecs.forEach(codec => {\n                        this.metadata.addStreamInfo({\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n                            codecName: codec.codecName\n                        });\n                    });\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n                    this.metadata.setFormat('codec', audioCodecs);\n                    break;\n                case GUID_1.default.StreamBitratePropertiesObject.str:\n                    // ToDo?\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n            }\n        } while (--numberOfObjectHeaders);\n        // done\n    }\n    addTags(tags) {\n        tags.forEach(tag => {\n            this.metadata.addTag(headerType, tag.id, tag.value);\n        });\n    }\n    async parseExtensionObject(extensionSize) {\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            const remaining = header.objectSize - AsfObject.HeaderObjectToken.len;\n            // Parse data part of the ASF Object\n            switch (header.objectId.str) {\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\n                    // ToDo: extended stream header properties are ignored\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n                    break;\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n                    this.addTags(moTags);\n                    break;\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n                    this.addTags(mlTags);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                case GUID_1.default.CompatibilityObject.str:\n                    this.tokenizer.ignore(remaining);\n                    break;\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n                    break;\n            }\n            extensionSize -= header.objectSize;\n        } while (extensionSize > 0);\n    }\n}\nexports.AsfParser = AsfParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/asf/AsfParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfTagMapper.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfTagMapper.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsfTagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * ASF Metadata tag mappings.\n * See http://msdn.microsoft.com/en-us/library/ms867702.aspx\n */\nconst asfTagMap = {\n    Title: 'title',\n    Author: 'artist',\n    'WM/AlbumArtist': 'albumartist',\n    'WM/AlbumTitle': 'album',\n    'WM/Year': 'date',\n    'WM/OriginalReleaseTime': 'originaldate',\n    'WM/OriginalReleaseYear': 'originalyear',\n    Description: 'comment',\n    'WM/TrackNumber': 'track',\n    'WM/PartOfSet': 'disk',\n    'WM/Genre': 'genre',\n    'WM/Composer': 'composer',\n    'WM/Lyrics': 'lyrics',\n    'WM/AlbumSortOrder': 'albumsort',\n    'WM/TitleSortOrder': 'titlesort',\n    'WM/ArtistSortOrder': 'artistsort',\n    'WM/AlbumArtistSortOrder': 'albumartistsort',\n    'WM/ComposerSortOrder': 'composersort',\n    'WM/Writer': 'lyricist',\n    'WM/Conductor': 'conductor',\n    'WM/ModifiedBy': 'remixer',\n    'WM/Engineer': 'engineer',\n    'WM/Producer': 'producer',\n    'WM/DJMixer': 'djmixer',\n    'WM/Mixer': 'mixer',\n    'WM/Publisher': 'label',\n    'WM/ContentGroupDescription': 'grouping',\n    'WM/SubTitle': 'subtitle',\n    'WM/SetSubTitle': 'discsubtitle',\n    // 'WM/PartOfSet': 'totaldiscs',\n    'WM/IsCompilation': 'compilation',\n    'WM/SharedUserRating': 'rating',\n    'WM/BeatsPerMinute': 'bpm',\n    'WM/Mood': 'mood',\n    'WM/Media': 'media',\n    'WM/CatalogNo': 'catalognumber',\n    'MusicBrainz/Album Status': 'releasestatus',\n    'MusicBrainz/Album Type': 'releasetype',\n    'MusicBrainz/Album Release Country': 'releasecountry',\n    'WM/Script': 'script',\n    'WM/Language': 'language',\n    Copyright: 'copyright',\n    LICENSE: 'license',\n    'WM/EncodedBy': 'encodedby',\n    'WM/EncodingSettings': 'encodersettings',\n    'WM/Barcode': 'barcode',\n    'WM/ISRC': 'isrc',\n    'MusicBrainz/Track Id': 'musicbrainz_recordingid',\n    'MusicBrainz/Release Track Id': 'musicbrainz_trackid',\n    'MusicBrainz/Album Id': 'musicbrainz_albumid',\n    'MusicBrainz/Artist Id': 'musicbrainz_artistid',\n    'MusicBrainz/Album Artist Id': 'musicbrainz_albumartistid',\n    'MusicBrainz/Release Group Id': 'musicbrainz_releasegroupid',\n    'MusicBrainz/Work Id': 'musicbrainz_workid',\n    'MusicBrainz/TRM Id': 'musicbrainz_trmid',\n    'MusicBrainz/Disc Id': 'musicbrainz_discid',\n    'Acoustid/Id': 'acoustid_id',\n    'Acoustid/Fingerprint': 'acoustid_fingerprint',\n    'MusicIP/PUID': 'musicip_puid',\n    'WM/ARTISTS': 'artists',\n    'WM/InitialKey': 'key',\n    ASIN: 'asin',\n    'WM/Work': 'work',\n    'WM/AuthorURL': 'website',\n    'WM/Picture': 'picture'\n};\nclass AsfTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    static toRating(rating) {\n        return {\n            rating: parseFloat(rating + 1) / 5\n        };\n    }\n    constructor() {\n        super(['asf'], asfTagMap);\n    }\n    postMap(tag) {\n        switch (tag.id) {\n            case 'WM/SharedUserRating':\n                const keys = tag.id.split(':');\n                tag.value = AsfTagMapper.toRating(tag.value);\n                tag.id = keys[0];\n                break;\n        }\n    }\n}\nexports.AsfTagMapper = AsfTagMapper;\n//# sourceMappingURL=AsfTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9Bc2ZUYWdNYXBwZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLDJCQUEyQixtQkFBTyxDQUFDLGdHQUE0QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9hc2YvQXNmVGFnTWFwcGVyLmpzP2MzY2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzZlRhZ01hcHBlciA9IHZvaWQgMDtcbmNvbnN0IEdlbmVyaWNUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vR2VuZXJpY1RhZ01hcHBlclwiKTtcbi8qKlxuICogQVNGIE1ldGFkYXRhIHRhZyBtYXBwaW5ncy5cbiAqIFNlZSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM4Njc3MDIuYXNweFxuICovXG5jb25zdCBhc2ZUYWdNYXAgPSB7XG4gICAgVGl0bGU6ICd0aXRsZScsXG4gICAgQXV0aG9yOiAnYXJ0aXN0JyxcbiAgICAnV00vQWxidW1BcnRpc3QnOiAnYWxidW1hcnRpc3QnLFxuICAgICdXTS9BbGJ1bVRpdGxlJzogJ2FsYnVtJyxcbiAgICAnV00vWWVhcic6ICdkYXRlJyxcbiAgICAnV00vT3JpZ2luYWxSZWxlYXNlVGltZSc6ICdvcmlnaW5hbGRhdGUnLFxuICAgICdXTS9PcmlnaW5hbFJlbGVhc2VZZWFyJzogJ29yaWdpbmFseWVhcicsXG4gICAgRGVzY3JpcHRpb246ICdjb21tZW50JyxcbiAgICAnV00vVHJhY2tOdW1iZXInOiAndHJhY2snLFxuICAgICdXTS9QYXJ0T2ZTZXQnOiAnZGlzaycsXG4gICAgJ1dNL0dlbnJlJzogJ2dlbnJlJyxcbiAgICAnV00vQ29tcG9zZXInOiAnY29tcG9zZXInLFxuICAgICdXTS9MeXJpY3MnOiAnbHlyaWNzJyxcbiAgICAnV00vQWxidW1Tb3J0T3JkZXInOiAnYWxidW1zb3J0JyxcbiAgICAnV00vVGl0bGVTb3J0T3JkZXInOiAndGl0bGVzb3J0JyxcbiAgICAnV00vQXJ0aXN0U29ydE9yZGVyJzogJ2FydGlzdHNvcnQnLFxuICAgICdXTS9BbGJ1bUFydGlzdFNvcnRPcmRlcic6ICdhbGJ1bWFydGlzdHNvcnQnLFxuICAgICdXTS9Db21wb3NlclNvcnRPcmRlcic6ICdjb21wb3NlcnNvcnQnLFxuICAgICdXTS9Xcml0ZXInOiAnbHlyaWNpc3QnLFxuICAgICdXTS9Db25kdWN0b3InOiAnY29uZHVjdG9yJyxcbiAgICAnV00vTW9kaWZpZWRCeSc6ICdyZW1peGVyJyxcbiAgICAnV00vRW5naW5lZXInOiAnZW5naW5lZXInLFxuICAgICdXTS9Qcm9kdWNlcic6ICdwcm9kdWNlcicsXG4gICAgJ1dNL0RKTWl4ZXInOiAnZGptaXhlcicsXG4gICAgJ1dNL01peGVyJzogJ21peGVyJyxcbiAgICAnV00vUHVibGlzaGVyJzogJ2xhYmVsJyxcbiAgICAnV00vQ29udGVudEdyb3VwRGVzY3JpcHRpb24nOiAnZ3JvdXBpbmcnLFxuICAgICdXTS9TdWJUaXRsZSc6ICdzdWJ0aXRsZScsXG4gICAgJ1dNL1NldFN1YlRpdGxlJzogJ2Rpc2NzdWJ0aXRsZScsXG4gICAgLy8gJ1dNL1BhcnRPZlNldCc6ICd0b3RhbGRpc2NzJyxcbiAgICAnV00vSXNDb21waWxhdGlvbic6ICdjb21waWxhdGlvbicsXG4gICAgJ1dNL1NoYXJlZFVzZXJSYXRpbmcnOiAncmF0aW5nJyxcbiAgICAnV00vQmVhdHNQZXJNaW51dGUnOiAnYnBtJyxcbiAgICAnV00vTW9vZCc6ICdtb29kJyxcbiAgICAnV00vTWVkaWEnOiAnbWVkaWEnLFxuICAgICdXTS9DYXRhbG9nTm8nOiAnY2F0YWxvZ251bWJlcicsXG4gICAgJ011c2ljQnJhaW56L0FsYnVtIFN0YXR1cyc6ICdyZWxlYXNlc3RhdHVzJyxcbiAgICAnTXVzaWNCcmFpbnovQWxidW0gVHlwZSc6ICdyZWxlYXNldHlwZScsXG4gICAgJ011c2ljQnJhaW56L0FsYnVtIFJlbGVhc2UgQ291bnRyeSc6ICdyZWxlYXNlY291bnRyeScsXG4gICAgJ1dNL1NjcmlwdCc6ICdzY3JpcHQnLFxuICAgICdXTS9MYW5ndWFnZSc6ICdsYW5ndWFnZScsXG4gICAgQ29weXJpZ2h0OiAnY29weXJpZ2h0JyxcbiAgICBMSUNFTlNFOiAnbGljZW5zZScsXG4gICAgJ1dNL0VuY29kZWRCeSc6ICdlbmNvZGVkYnknLFxuICAgICdXTS9FbmNvZGluZ1NldHRpbmdzJzogJ2VuY29kZXJzZXR0aW5ncycsXG4gICAgJ1dNL0JhcmNvZGUnOiAnYmFyY29kZScsXG4gICAgJ1dNL0lTUkMnOiAnaXNyYycsXG4gICAgJ011c2ljQnJhaW56L1RyYWNrIElkJzogJ211c2ljYnJhaW56X3JlY29yZGluZ2lkJyxcbiAgICAnTXVzaWNCcmFpbnovUmVsZWFzZSBUcmFjayBJZCc6ICdtdXNpY2JyYWluel90cmFja2lkJyxcbiAgICAnTXVzaWNCcmFpbnovQWxidW0gSWQnOiAnbXVzaWNicmFpbnpfYWxidW1pZCcsXG4gICAgJ011c2ljQnJhaW56L0FydGlzdCBJZCc6ICdtdXNpY2JyYWluel9hcnRpc3RpZCcsXG4gICAgJ011c2ljQnJhaW56L0FsYnVtIEFydGlzdCBJZCc6ICdtdXNpY2JyYWluel9hbGJ1bWFydGlzdGlkJyxcbiAgICAnTXVzaWNCcmFpbnovUmVsZWFzZSBHcm91cCBJZCc6ICdtdXNpY2JyYWluel9yZWxlYXNlZ3JvdXBpZCcsXG4gICAgJ011c2ljQnJhaW56L1dvcmsgSWQnOiAnbXVzaWNicmFpbnpfd29ya2lkJyxcbiAgICAnTXVzaWNCcmFpbnovVFJNIElkJzogJ211c2ljYnJhaW56X3RybWlkJyxcbiAgICAnTXVzaWNCcmFpbnovRGlzYyBJZCc6ICdtdXNpY2JyYWluel9kaXNjaWQnLFxuICAgICdBY291c3RpZC9JZCc6ICdhY291c3RpZF9pZCcsXG4gICAgJ0Fjb3VzdGlkL0ZpbmdlcnByaW50JzogJ2Fjb3VzdGlkX2ZpbmdlcnByaW50JyxcbiAgICAnTXVzaWNJUC9QVUlEJzogJ211c2ljaXBfcHVpZCcsXG4gICAgJ1dNL0FSVElTVFMnOiAnYXJ0aXN0cycsXG4gICAgJ1dNL0luaXRpYWxLZXknOiAna2V5JyxcbiAgICBBU0lOOiAnYXNpbicsXG4gICAgJ1dNL1dvcmsnOiAnd29yaycsXG4gICAgJ1dNL0F1dGhvclVSTCc6ICd3ZWJzaXRlJyxcbiAgICAnV00vUGljdHVyZSc6ICdwaWN0dXJlJ1xufTtcbmNsYXNzIEFzZlRhZ01hcHBlciBleHRlbmRzIEdlbmVyaWNUYWdNYXBwZXJfMS5Db21tb25UYWdNYXBwZXIge1xuICAgIHN0YXRpYyB0b1JhdGluZyhyYXRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJhdGluZzogcGFyc2VGbG9hdChyYXRpbmcgKyAxKSAvIDVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsnYXNmJ10sIGFzZlRhZ01hcCk7XG4gICAgfVxuICAgIHBvc3RNYXAodGFnKSB7XG4gICAgICAgIHN3aXRjaCAodGFnLmlkKSB7XG4gICAgICAgICAgICBjYXNlICdXTS9TaGFyZWRVc2VyUmF0aW5nJzpcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gdGFnLmlkLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgdGFnLnZhbHVlID0gQXNmVGFnTWFwcGVyLnRvUmF0aW5nKHRhZy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGFnLmlkID0ga2V5c1swXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXNmVGFnTWFwcGVyID0gQXNmVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNmVGFnTWFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/asf/AsfTagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfUtil.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfUtil.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsfUtil = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nclass AsfUtil {\n    static getParserForAttr(i) {\n        return AsfUtil.attributeParsers[i];\n    }\n    static parseUnicodeAttr(uint8Array) {\n        return util.stripNulls(util.decodeString(uint8Array, 'utf16le'));\n    }\n    static parseByteArrayAttr(buf) {\n        return Buffer.from(buf);\n    }\n    static parseBoolAttr(buf, offset = 0) {\n        return AsfUtil.parseWordAttr(buf, offset) === 1;\n    }\n    static parseDWordAttr(buf, offset = 0) {\n        return buf.readUInt32LE(offset);\n    }\n    static parseQWordAttr(buf, offset = 0) {\n        return Token.UINT64_LE.get(buf, offset);\n    }\n    static parseWordAttr(buf, offset = 0) {\n        return buf.readUInt16LE(offset);\n    }\n}\nexports.AsfUtil = AsfUtil;\nAsfUtil.attributeParsers = [\n    AsfUtil.parseUnicodeAttr,\n    AsfUtil.parseByteArrayAttr,\n    AsfUtil.parseBoolAttr,\n    AsfUtil.parseDWordAttr,\n    AsfUtil.parseQWordAttr,\n    AsfUtil.parseWordAttr,\n    AsfUtil.parseByteArrayAttr\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9Bc2ZVdGlsLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9Bc2ZVdGlsLmpzP2MzZDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzZlV0aWwgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi4vY29tbW9uL1V0aWxcIik7XG5jbGFzcyBBc2ZVdGlsIHtcbiAgICBzdGF0aWMgZ2V0UGFyc2VyRm9yQXR0cihpKSB7XG4gICAgICAgIHJldHVybiBBc2ZVdGlsLmF0dHJpYnV0ZVBhcnNlcnNbaV07XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZVVuaWNvZGVBdHRyKHVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHV0aWwuc3RyaXBOdWxscyh1dGlsLmRlY29kZVN0cmluZyh1aW50OEFycmF5LCAndXRmMTZsZScpKTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlQnl0ZUFycmF5QXR0cihidWYpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1Zik7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZUJvb2xBdHRyKGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gQXNmVXRpbC5wYXJzZVdvcmRBdHRyKGJ1Ziwgb2Zmc2V0KSA9PT0gMTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlRFdvcmRBdHRyKGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gYnVmLnJlYWRVSW50MzJMRShvZmZzZXQpO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VRV29yZEF0dHIoYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBUb2tlbi5VSU5UNjRfTEUuZ2V0KGJ1Ziwgb2Zmc2V0KTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlV29yZEF0dHIoYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkxFKG9mZnNldCk7XG4gICAgfVxufVxuZXhwb3J0cy5Bc2ZVdGlsID0gQXNmVXRpbDtcbkFzZlV0aWwuYXR0cmlidXRlUGFyc2VycyA9IFtcbiAgICBBc2ZVdGlsLnBhcnNlVW5pY29kZUF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZUJ5dGVBcnJheUF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZUJvb2xBdHRyLFxuICAgIEFzZlV0aWwucGFyc2VEV29yZEF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZVFXb3JkQXR0cixcbiAgICBBc2ZVdGlsLnBhcnNlV29yZEF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZUJ5dGVBcnJheUF0dHJcbl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/asf/AsfUtil.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/GUID.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/GUID.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n *\n * ASF File Structure:\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n *\n * ASF GUIDs:\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n * - https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c\n */\nclass GUID {\n    static fromBin(bin, offset = 0) {\n        return new GUID(this.decode(bin, offset));\n    }\n    /**\n     * Decode GUID in format like \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\n     * @param objectId Binary GUID\n     * @param offset Read offset in bytes, default 0\n     * @returns GUID as dashed hexadecimal representation\n     */\n    static decode(objectId, offset = 0) {\n        const guid = objectId.readUInt32LE(offset).toString(16) + \"-\" +\n            objectId.readUInt16LE(offset + 4).toString(16) + \"-\" +\n            objectId.readUInt16LE(offset + 6).toString(16) + \"-\" +\n            objectId.readUInt16BE(offset + 8).toString(16) + \"-\" +\n            objectId.slice(offset + 10, offset + 16).toString('hex');\n        return guid.toUpperCase();\n    }\n    /**\n     * Decode stream type\n     * @param mediaType Media type GUID\n     * @returns Media type\n     */\n    static decodeMediaType(mediaType) {\n        switch (mediaType.str) {\n            case GUID.AudioMedia.str: return 'audio';\n            case GUID.VideoMedia.str: return 'video';\n            case GUID.CommandMedia.str: return 'command';\n            case GUID.Degradable_JPEG_Media.str: return 'degradable-jpeg';\n            case GUID.FileTransferMedia.str: return 'file-transfer';\n            case GUID.BinaryMedia.str: return 'binary';\n        }\n    }\n    /**\n     * Encode GUID\n     * @param guid GUID like: \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\n     * @returns Encoded Binary GUID\n     */\n    static encode(str) {\n        const bin = Buffer.alloc(16);\n        bin.writeUInt32LE(parseInt(str.slice(0, 8), 16), 0);\n        bin.writeUInt16LE(parseInt(str.slice(9, 13), 16), 4);\n        bin.writeUInt16LE(parseInt(str.slice(14, 18), 16), 6);\n        Buffer.from(str.slice(19, 23), \"hex\").copy(bin, 8);\n        Buffer.from(str.slice(24), \"hex\").copy(bin, 10);\n        return bin;\n    }\n    constructor(str) {\n        this.str = str;\n    }\n    equals(guid) {\n        return this.str === guid.str;\n    }\n    toBin() {\n        return GUID.encode(this.str);\n    }\n}\nexports[\"default\"] = GUID;\n// 10.1 Top-level ASF object GUIDs\nGUID.HeaderObject = new GUID(\"75B22630-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.DataObject = new GUID(\"75B22636-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.SimpleIndexObject = new GUID(\"33000890-E5B1-11CF-89F4-00A0C90349CB\");\nGUID.IndexObject = new GUID(\"D6E229D3-35DA-11D1-9034-00A0C90349BE\");\nGUID.MediaObjectIndexObject = new GUID(\"FEB103F8-12AD-4C64-840F-2A1D2F7AD48C\");\nGUID.TimecodeIndexObject = new GUID(\"3CB73FD0-0C4A-4803-953D-EDF7B6228F0C\");\n// 10.2 Header Object GUIDs\nGUID.FilePropertiesObject = new GUID(\"8CABDCA1-A947-11CF-8EE4-00C00C205365\");\nGUID.StreamPropertiesObject = new GUID(\"B7DC0791-A9B7-11CF-8EE6-00C00C205365\");\nGUID.HeaderExtensionObject = new GUID(\"5FBF03B5-A92E-11CF-8EE3-00C00C205365\");\nGUID.CodecListObject = new GUID(\"86D15240-311D-11D0-A3A4-00A0C90348F6\");\nGUID.ScriptCommandObject = new GUID(\"1EFB1A30-0B62-11D0-A39B-00A0C90348F6\");\nGUID.MarkerObject = new GUID(\"F487CD01-A951-11CF-8EE6-00C00C205365\");\nGUID.BitrateMutualExclusionObject = new GUID(\"D6E229DC-35DA-11D1-9034-00A0C90349BE\");\nGUID.ErrorCorrectionObject = new GUID(\"75B22635-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.ContentDescriptionObject = new GUID(\"75B22633-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.ExtendedContentDescriptionObject = new GUID(\"D2D0A440-E307-11D2-97F0-00A0C95EA850\");\nGUID.ContentBrandingObject = new GUID(\"2211B3FA-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.StreamBitratePropertiesObject = new GUID(\"7BF875CE-468D-11D1-8D82-006097C9A2B2\");\nGUID.ContentEncryptionObject = new GUID(\"2211B3FB-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.ExtendedContentEncryptionObject = new GUID(\"298AE614-2622-4C17-B935-DAE07EE9289C\");\nGUID.DigitalSignatureObject = new GUID(\"2211B3FC-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.PaddingObject = new GUID(\"1806D474-CADF-4509-A4BA-9AABCB96AAE8\");\n// 10.3 Header Extension Object GUIDs\nGUID.ExtendedStreamPropertiesObject = new GUID(\"14E6A5CB-C672-4332-8399-A96952065B5A\");\nGUID.AdvancedMutualExclusionObject = new GUID(\"A08649CF-4775-4670-8A16-6E35357566CD\");\nGUID.GroupMutualExclusionObject = new GUID(\"D1465A40-5A79-4338-B71B-E36B8FD6C249\");\nGUID.StreamPrioritizationObject = new GUID(\"D4FED15B-88D3-454F-81F0-ED5C45999E24\");\nGUID.BandwidthSharingObject = new GUID(\"A69609E6-517B-11D2-B6AF-00C04FD908E9\");\nGUID.LanguageListObject = new GUID(\"7C4346A9-EFE0-4BFC-B229-393EDE415C85\");\nGUID.MetadataObject = new GUID(\"C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA\");\nGUID.MetadataLibraryObject = new GUID(\"44231C94-9498-49D1-A141-1D134E457054\");\nGUID.IndexParametersObject = new GUID(\"D6E229DF-35DA-11D1-9034-00A0C90349BE\");\nGUID.MediaObjectIndexParametersObject = new GUID(\"6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7\");\nGUID.TimecodeIndexParametersObject = new GUID(\"F55E496D-9797-4B5D-8C8B-604DFE9BFB24\");\nGUID.CompatibilityObject = new GUID(\"26F18B5D-4584-47EC-9F5F-0E651F0452C9\");\nGUID.AdvancedContentEncryptionObject = new GUID(\"43058533-6981-49E6-9B74-AD12CB86D58C\");\n// 10.4 Stream Properties Object Stream Type GUIDs\nGUID.AudioMedia = new GUID(\"F8699E40-5B4D-11CF-A8FD-00805F5C442B\");\nGUID.VideoMedia = new GUID(\"BC19EFC0-5B4D-11CF-A8FD-00805F5C442B\");\nGUID.CommandMedia = new GUID(\"59DACFC0-59E6-11D0-A3AC-00A0C90348F6\");\nGUID.JFIF_Media = new GUID(\"B61BE100-5B4E-11CF-A8FD-00805F5C442B\");\nGUID.Degradable_JPEG_Media = new GUID(\"35907DE0-E415-11CF-A917-00805F5C442B\");\nGUID.FileTransferMedia = new GUID(\"91BD222C-F21C-497A-8B6D-5AA86BFC0185\");\nGUID.BinaryMedia = new GUID(\"3AFB65E2-47EF-40F2-AC2C-70A90D71D343\");\nGUID.ASF_Index_Placeholder_Object = new GUID(\"D9AADE20-7C17-4F9C-BC28-8555DD98E2A2\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9HVUlELmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0EsUUFBUSxNQUFNO0FBQ2QsUUFBUSxNQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvYXNmL0dVSUQuanM/YWE2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUmVmOlxuICogLSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtZmxlaXNjaG1hbi1hc2YtMDEsIEFwcGVuZGl4IEE6IEFTRiBHVUlEc1xuICogLSBodHRwOi8vZHJhbmcuczQueHJlYS5jb20vcHJvZ3JhbS90aXBzL2lkM3RhZy93bXAvMTBfYXNmX2d1aWRzLmh0bWxcbiAqIC0gaHR0cDovL2RyYW5nLnM0LnhyZWEuY29tL3Byb2dyYW0vdGlwcy9pZDN0YWcvd21wL2luZGV4Lmh0bWxcbiAqIC0gaHR0cDovL2RyYW5nLnM0LnhyZWEuY29tL3Byb2dyYW0vdGlwcy9pZDN0YWcvd21wLzEwX2FzZl9ndWlkcy5odG1sXG4gKlxuICogQVNGIEZpbGUgU3RydWN0dXJlOlxuICogLSBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9lZTY2MzU3NSh2PXZzLjg1KS5hc3B4XG4gKlxuICogQVNGIEdVSURzOlxuICogLSBodHRwOi8vZHJhbmcuczQueHJlYS5jb20vcHJvZ3JhbS90aXBzL2lkM3RhZy93bXAvMTBfYXNmX2d1aWRzLmh0bWxcbiAqIC0gaHR0cHM6Ly9naXRodWIuY29tL2RqaS1zZGsvRkZtcGVnL2Jsb2IvbWFzdGVyL2xpYmF2Zm9ybWF0L2FzZi5jXG4gKi9cbmNsYXNzIEdVSUQge1xuICAgIHN0YXRpYyBmcm9tQmluKGJpbiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IEdVSUQodGhpcy5kZWNvZGUoYmluLCBvZmZzZXQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIEdVSUQgaW4gZm9ybWF0IGxpa2UgXCJCNTAzQkY1Ri0yRUE5LUNGMTEtOEVFMy0wMEMwMEMyMDUzNjVcIlxuICAgICAqIEBwYXJhbSBvYmplY3RJZCBCaW5hcnkgR1VJRFxuICAgICAqIEBwYXJhbSBvZmZzZXQgUmVhZCBvZmZzZXQgaW4gYnl0ZXMsIGRlZmF1bHQgMFxuICAgICAqIEByZXR1cm5zIEdVSUQgYXMgZGFzaGVkIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGRlY29kZShvYmplY3RJZCwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBndWlkID0gb2JqZWN0SWQucmVhZFVJbnQzMkxFKG9mZnNldCkudG9TdHJpbmcoMTYpICsgXCItXCIgK1xuICAgICAgICAgICAgb2JqZWN0SWQucmVhZFVJbnQxNkxFKG9mZnNldCArIDQpLnRvU3RyaW5nKDE2KSArIFwiLVwiICtcbiAgICAgICAgICAgIG9iamVjdElkLnJlYWRVSW50MTZMRShvZmZzZXQgKyA2KS50b1N0cmluZygxNikgKyBcIi1cIiArXG4gICAgICAgICAgICBvYmplY3RJZC5yZWFkVUludDE2QkUob2Zmc2V0ICsgOCkudG9TdHJpbmcoMTYpICsgXCItXCIgK1xuICAgICAgICAgICAgb2JqZWN0SWQuc2xpY2Uob2Zmc2V0ICsgMTAsIG9mZnNldCArIDE2KS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgIHJldHVybiBndWlkLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBzdHJlYW0gdHlwZVxuICAgICAqIEBwYXJhbSBtZWRpYVR5cGUgTWVkaWEgdHlwZSBHVUlEXG4gICAgICogQHJldHVybnMgTWVkaWEgdHlwZVxuICAgICAqL1xuICAgIHN0YXRpYyBkZWNvZGVNZWRpYVR5cGUobWVkaWFUeXBlKSB7XG4gICAgICAgIHN3aXRjaCAobWVkaWFUeXBlLnN0cikge1xuICAgICAgICAgICAgY2FzZSBHVUlELkF1ZGlvTWVkaWEuc3RyOiByZXR1cm4gJ2F1ZGlvJztcbiAgICAgICAgICAgIGNhc2UgR1VJRC5WaWRlb01lZGlhLnN0cjogcmV0dXJuICd2aWRlbyc7XG4gICAgICAgICAgICBjYXNlIEdVSUQuQ29tbWFuZE1lZGlhLnN0cjogcmV0dXJuICdjb21tYW5kJztcbiAgICAgICAgICAgIGNhc2UgR1VJRC5EZWdyYWRhYmxlX0pQRUdfTWVkaWEuc3RyOiByZXR1cm4gJ2RlZ3JhZGFibGUtanBlZyc7XG4gICAgICAgICAgICBjYXNlIEdVSUQuRmlsZVRyYW5zZmVyTWVkaWEuc3RyOiByZXR1cm4gJ2ZpbGUtdHJhbnNmZXInO1xuICAgICAgICAgICAgY2FzZSBHVUlELkJpbmFyeU1lZGlhLnN0cjogcmV0dXJuICdiaW5hcnknO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBHVUlEXG4gICAgICogQHBhcmFtIGd1aWQgR1VJRCBsaWtlOiBcIkI1MDNCRjVGLTJFQTktQ0YxMS04RUUzLTAwQzAwQzIwNTM2NVwiXG4gICAgICogQHJldHVybnMgRW5jb2RlZCBCaW5hcnkgR1VJRFxuICAgICAqL1xuICAgIHN0YXRpYyBlbmNvZGUoc3RyKSB7XG4gICAgICAgIGNvbnN0IGJpbiA9IEJ1ZmZlci5hbGxvYygxNik7XG4gICAgICAgIGJpbi53cml0ZVVJbnQzMkxFKHBhcnNlSW50KHN0ci5zbGljZSgwLCA4KSwgMTYpLCAwKTtcbiAgICAgICAgYmluLndyaXRlVUludDE2TEUocGFyc2VJbnQoc3RyLnNsaWNlKDksIDEzKSwgMTYpLCA0KTtcbiAgICAgICAgYmluLndyaXRlVUludDE2TEUocGFyc2VJbnQoc3RyLnNsaWNlKDE0LCAxOCksIDE2KSwgNik7XG4gICAgICAgIEJ1ZmZlci5mcm9tKHN0ci5zbGljZSgxOSwgMjMpLCBcImhleFwiKS5jb3B5KGJpbiwgOCk7XG4gICAgICAgIEJ1ZmZlci5mcm9tKHN0ci5zbGljZSgyNCksIFwiaGV4XCIpLmNvcHkoYmluLCAxMCk7XG4gICAgICAgIHJldHVybiBiaW47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0cikge1xuICAgICAgICB0aGlzLnN0ciA9IHN0cjtcbiAgICB9XG4gICAgZXF1YWxzKGd1aWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyID09PSBndWlkLnN0cjtcbiAgICB9XG4gICAgdG9CaW4oKSB7XG4gICAgICAgIHJldHVybiBHVUlELmVuY29kZSh0aGlzLnN0cik7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gR1VJRDtcbi8vIDEwLjEgVG9wLWxldmVsIEFTRiBvYmplY3QgR1VJRHNcbkdVSUQuSGVhZGVyT2JqZWN0ID0gbmV3IEdVSUQoXCI3NUIyMjYzMC02NjhFLTExQ0YtQTZEOS0wMEFBMDA2MkNFNkNcIik7XG5HVUlELkRhdGFPYmplY3QgPSBuZXcgR1VJRChcIjc1QjIyNjM2LTY2OEUtMTFDRi1BNkQ5LTAwQUEwMDYyQ0U2Q1wiKTtcbkdVSUQuU2ltcGxlSW5kZXhPYmplY3QgPSBuZXcgR1VJRChcIjMzMDAwODkwLUU1QjEtMTFDRi04OUY0LTAwQTBDOTAzNDlDQlwiKTtcbkdVSUQuSW5kZXhPYmplY3QgPSBuZXcgR1VJRChcIkQ2RTIyOUQzLTM1REEtMTFEMS05MDM0LTAwQTBDOTAzNDlCRVwiKTtcbkdVSUQuTWVkaWFPYmplY3RJbmRleE9iamVjdCA9IG5ldyBHVUlEKFwiRkVCMTAzRjgtMTJBRC00QzY0LTg0MEYtMkExRDJGN0FENDhDXCIpO1xuR1VJRC5UaW1lY29kZUluZGV4T2JqZWN0ID0gbmV3IEdVSUQoXCIzQ0I3M0ZEMC0wQzRBLTQ4MDMtOTUzRC1FREY3QjYyMjhGMENcIik7XG4vLyAxMC4yIEhlYWRlciBPYmplY3QgR1VJRHNcbkdVSUQuRmlsZVByb3BlcnRpZXNPYmplY3QgPSBuZXcgR1VJRChcIjhDQUJEQ0ExLUE5NDctMTFDRi04RUU0LTAwQzAwQzIwNTM2NVwiKTtcbkdVSUQuU3RyZWFtUHJvcGVydGllc09iamVjdCA9IG5ldyBHVUlEKFwiQjdEQzA3OTEtQTlCNy0xMUNGLThFRTYtMDBDMDBDMjA1MzY1XCIpO1xuR1VJRC5IZWFkZXJFeHRlbnNpb25PYmplY3QgPSBuZXcgR1VJRChcIjVGQkYwM0I1LUE5MkUtMTFDRi04RUUzLTAwQzAwQzIwNTM2NVwiKTtcbkdVSUQuQ29kZWNMaXN0T2JqZWN0ID0gbmV3IEdVSUQoXCI4NkQxNTI0MC0zMTFELTExRDAtQTNBNC0wMEEwQzkwMzQ4RjZcIik7XG5HVUlELlNjcmlwdENvbW1hbmRPYmplY3QgPSBuZXcgR1VJRChcIjFFRkIxQTMwLTBCNjItMTFEMC1BMzlCLTAwQTBDOTAzNDhGNlwiKTtcbkdVSUQuTWFya2VyT2JqZWN0ID0gbmV3IEdVSUQoXCJGNDg3Q0QwMS1BOTUxLTExQ0YtOEVFNi0wMEMwMEMyMDUzNjVcIik7XG5HVUlELkJpdHJhdGVNdXR1YWxFeGNsdXNpb25PYmplY3QgPSBuZXcgR1VJRChcIkQ2RTIyOURDLTM1REEtMTFEMS05MDM0LTAwQTBDOTAzNDlCRVwiKTtcbkdVSUQuRXJyb3JDb3JyZWN0aW9uT2JqZWN0ID0gbmV3IEdVSUQoXCI3NUIyMjYzNS02NjhFLTExQ0YtQTZEOS0wMEFBMDA2MkNFNkNcIik7XG5HVUlELkNvbnRlbnREZXNjcmlwdGlvbk9iamVjdCA9IG5ldyBHVUlEKFwiNzVCMjI2MzMtNjY4RS0xMUNGLUE2RDktMDBBQTAwNjJDRTZDXCIpO1xuR1VJRC5FeHRlbmRlZENvbnRlbnREZXNjcmlwdGlvbk9iamVjdCA9IG5ldyBHVUlEKFwiRDJEMEE0NDAtRTMwNy0xMUQyLTk3RjAtMDBBMEM5NUVBODUwXCIpO1xuR1VJRC5Db250ZW50QnJhbmRpbmdPYmplY3QgPSBuZXcgR1VJRChcIjIyMTFCM0ZBLUJEMjMtMTFEMi1CNEI3LTAwQTBDOTU1RkM2RVwiKTtcbkdVSUQuU3RyZWFtQml0cmF0ZVByb3BlcnRpZXNPYmplY3QgPSBuZXcgR1VJRChcIjdCRjg3NUNFLTQ2OEQtMTFEMS04RDgyLTAwNjA5N0M5QTJCMlwiKTtcbkdVSUQuQ29udGVudEVuY3J5cHRpb25PYmplY3QgPSBuZXcgR1VJRChcIjIyMTFCM0ZCLUJEMjMtMTFEMi1CNEI3LTAwQTBDOTU1RkM2RVwiKTtcbkdVSUQuRXh0ZW5kZWRDb250ZW50RW5jcnlwdGlvbk9iamVjdCA9IG5ldyBHVUlEKFwiMjk4QUU2MTQtMjYyMi00QzE3LUI5MzUtREFFMDdFRTkyODlDXCIpO1xuR1VJRC5EaWdpdGFsU2lnbmF0dXJlT2JqZWN0ID0gbmV3IEdVSUQoXCIyMjExQjNGQy1CRDIzLTExRDItQjRCNy0wMEEwQzk1NUZDNkVcIik7XG5HVUlELlBhZGRpbmdPYmplY3QgPSBuZXcgR1VJRChcIjE4MDZENDc0LUNBREYtNDUwOS1BNEJBLTlBQUJDQjk2QUFFOFwiKTtcbi8vIDEwLjMgSGVhZGVyIEV4dGVuc2lvbiBPYmplY3QgR1VJRHNcbkdVSUQuRXh0ZW5kZWRTdHJlYW1Qcm9wZXJ0aWVzT2JqZWN0ID0gbmV3IEdVSUQoXCIxNEU2QTVDQi1DNjcyLTQzMzItODM5OS1BOTY5NTIwNjVCNUFcIik7XG5HVUlELkFkdmFuY2VkTXV0dWFsRXhjbHVzaW9uT2JqZWN0ID0gbmV3IEdVSUQoXCJBMDg2NDlDRi00Nzc1LTQ2NzAtOEExNi02RTM1MzU3NTY2Q0RcIik7XG5HVUlELkdyb3VwTXV0dWFsRXhjbHVzaW9uT2JqZWN0ID0gbmV3IEdVSUQoXCJEMTQ2NUE0MC01QTc5LTQzMzgtQjcxQi1FMzZCOEZENkMyNDlcIik7XG5HVUlELlN0cmVhbVByaW9yaXRpemF0aW9uT2JqZWN0ID0gbmV3IEdVSUQoXCJENEZFRDE1Qi04OEQzLTQ1NEYtODFGMC1FRDVDNDU5OTlFMjRcIik7XG5HVUlELkJhbmR3aWR0aFNoYXJpbmdPYmplY3QgPSBuZXcgR1VJRChcIkE2OTYwOUU2LTUxN0ItMTFEMi1CNkFGLTAwQzA0RkQ5MDhFOVwiKTtcbkdVSUQuTGFuZ3VhZ2VMaXN0T2JqZWN0ID0gbmV3IEdVSUQoXCI3QzQzNDZBOS1FRkUwLTRCRkMtQjIyOS0zOTNFREU0MTVDODVcIik7XG5HVUlELk1ldGFkYXRhT2JqZWN0ID0gbmV3IEdVSUQoXCJDNUY4Q0JFQS01QkFGLTQ4NzctODQ2Ny1BQThDNDRGQTRDQ0FcIik7XG5HVUlELk1ldGFkYXRhTGlicmFyeU9iamVjdCA9IG5ldyBHVUlEKFwiNDQyMzFDOTQtOTQ5OC00OUQxLUExNDEtMUQxMzRFNDU3MDU0XCIpO1xuR1VJRC5JbmRleFBhcmFtZXRlcnNPYmplY3QgPSBuZXcgR1VJRChcIkQ2RTIyOURGLTM1REEtMTFEMS05MDM0LTAwQTBDOTAzNDlCRVwiKTtcbkdVSUQuTWVkaWFPYmplY3RJbmRleFBhcmFtZXRlcnNPYmplY3QgPSBuZXcgR1VJRChcIjZCMjAzQkFELTNGMTEtNDhFNC1BQ0E4LUQ3NjEzREUyQ0ZBN1wiKTtcbkdVSUQuVGltZWNvZGVJbmRleFBhcmFtZXRlcnNPYmplY3QgPSBuZXcgR1VJRChcIkY1NUU0OTZELTk3OTctNEI1RC04QzhCLTYwNERGRTlCRkIyNFwiKTtcbkdVSUQuQ29tcGF0aWJpbGl0eU9iamVjdCA9IG5ldyBHVUlEKFwiMjZGMThCNUQtNDU4NC00N0VDLTlGNUYtMEU2NTFGMDQ1MkM5XCIpO1xuR1VJRC5BZHZhbmNlZENvbnRlbnRFbmNyeXB0aW9uT2JqZWN0ID0gbmV3IEdVSUQoXCI0MzA1ODUzMy02OTgxLTQ5RTYtOUI3NC1BRDEyQ0I4NkQ1OENcIik7XG4vLyAxMC40IFN0cmVhbSBQcm9wZXJ0aWVzIE9iamVjdCBTdHJlYW0gVHlwZSBHVUlEc1xuR1VJRC5BdWRpb01lZGlhID0gbmV3IEdVSUQoXCJGODY5OUU0MC01QjRELTExQ0YtQThGRC0wMDgwNUY1QzQ0MkJcIik7XG5HVUlELlZpZGVvTWVkaWEgPSBuZXcgR1VJRChcIkJDMTlFRkMwLTVCNEQtMTFDRi1BOEZELTAwODA1RjVDNDQyQlwiKTtcbkdVSUQuQ29tbWFuZE1lZGlhID0gbmV3IEdVSUQoXCI1OURBQ0ZDMC01OUU2LTExRDAtQTNBQy0wMEEwQzkwMzQ4RjZcIik7XG5HVUlELkpGSUZfTWVkaWEgPSBuZXcgR1VJRChcIkI2MUJFMTAwLTVCNEUtMTFDRi1BOEZELTAwODA1RjVDNDQyQlwiKTtcbkdVSUQuRGVncmFkYWJsZV9KUEVHX01lZGlhID0gbmV3IEdVSUQoXCIzNTkwN0RFMC1FNDE1LTExQ0YtQTkxNy0wMDgwNUY1QzQ0MkJcIik7XG5HVUlELkZpbGVUcmFuc2Zlck1lZGlhID0gbmV3IEdVSUQoXCI5MUJEMjIyQy1GMjFDLTQ5N0EtOEI2RC01QUE4NkJGQzAxODVcIik7XG5HVUlELkJpbmFyeU1lZGlhID0gbmV3IEdVSUQoXCIzQUZCNjVFMi00N0VGLTQwRjItQUMyQy03MEE5MEQ3MUQzNDNcIik7XG5HVUlELkFTRl9JbmRleF9QbGFjZWhvbGRlcl9PYmplY3QgPSBuZXcgR1VJRChcIkQ5QUFERTIwLTdDMTctNEY5Qy1CQzI4LTg1NTVERDk4RTJBMlwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/asf/GUID.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/BasicParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/BasicParser.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BasicParser = void 0;\nclass BasicParser {\n    /**\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\n     * @param {INativeMetadataCollector} metadata Output\n     * @param {ITokenizer} tokenizer Input\n     * @param {IOptions} options Parsing options\n     */\n    init(metadata, tokenizer, options) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n        this.options = options;\n        return this;\n    }\n}\nexports.BasicParser = BasicParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9CYXNpY1BhcnNlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwQkFBMEI7QUFDekMsZUFBZSxZQUFZO0FBQzNCLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvY29tbW9uL0Jhc2ljUGFyc2VyLmpzP2U3Y2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhc2ljUGFyc2VyID0gdm9pZCAwO1xuY2xhc3MgQmFzaWNQYXJzZXIge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgcGFyc2VyIHdpdGggb3V0cHV0IChtZXRhZGF0YSksIGlucHV0ICh0b2tlbml6ZXIpICYgcGFyc2luZyBvcHRpb25zIChvcHRpb25zKS5cbiAgICAgKiBAcGFyYW0ge0lOYXRpdmVNZXRhZGF0YUNvbGxlY3Rvcn0gbWV0YWRhdGEgT3V0cHV0XG4gICAgICogQHBhcmFtIHtJVG9rZW5pemVyfSB0b2tlbml6ZXIgSW5wdXRcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zIFBhcnNpbmcgb3B0aW9uc1xuICAgICAqL1xuICAgIGluaXQobWV0YWRhdGEsIHRva2VuaXplciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLkJhc2ljUGFyc2VyID0gQmFzaWNQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/BasicParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js":
/*!*************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CaseInsensitiveTagMap = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ./GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\nclass CaseInsensitiveTagMap extends GenericTagMapper_1.CommonTagMapper {\n    constructor(tagTypes, tagMap) {\n        const upperCaseMap = {};\n        for (const tag of Object.keys(tagMap)) {\n            upperCaseMap[tag.toUpperCase()] = tagMap[tag];\n        }\n        super(tagTypes, upperCaseMap);\n    }\n    /**\n     * @tag  Native header tag\n     * @return common tag name (alias)\n     */\n    getCommonName(tag) {\n        return this.tagMap[tag.toUpperCase()];\n    }\n}\nexports.CaseInsensitiveTagMap = CaseInsensitiveTagMap;\n//# sourceMappingURL=CaseInsensitiveTagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9DYXNlSW5zZW5zaXRpdmVUYWdNYXAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDJCQUEyQixtQkFBTyxDQUFDLHdGQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9DYXNlSW5zZW5zaXRpdmVUYWdNYXAuanM/ZmQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FzZUluc2Vuc2l0aXZlVGFnTWFwID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4vR2VuZXJpY1RhZ01hcHBlclwiKTtcbmNsYXNzIENhc2VJbnNlbnNpdGl2ZVRhZ01hcCBleHRlbmRzIEdlbmVyaWNUYWdNYXBwZXJfMS5Db21tb25UYWdNYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHRhZ1R5cGVzLCB0YWdNYXApIHtcbiAgICAgICAgY29uc3QgdXBwZXJDYXNlTWFwID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdGFnIG9mIE9iamVjdC5rZXlzKHRhZ01hcCkpIHtcbiAgICAgICAgICAgIHVwcGVyQ2FzZU1hcFt0YWcudG9VcHBlckNhc2UoKV0gPSB0YWdNYXBbdGFnXTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcih0YWdUeXBlcywgdXBwZXJDYXNlTWFwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHRhZyAgTmF0aXZlIGhlYWRlciB0YWdcbiAgICAgKiBAcmV0dXJuIGNvbW1vbiB0YWcgbmFtZSAoYWxpYXMpXG4gICAgICovXG4gICAgZ2V0Q29tbW9uTmFtZSh0YWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnTWFwW3RhZy50b1VwcGVyQ2FzZSgpXTtcbiAgICB9XG59XG5leHBvcnRzLkNhc2VJbnNlbnNpdGl2ZVRhZ01hcCA9IENhc2VJbnNlbnNpdGl2ZVRhZ01hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhc2VJbnNlbnNpdGl2ZVRhZ01hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/CombinedTagMapper.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/CombinedTagMapper.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CombinedTagMapper = void 0;\nconst ID3v1TagMap_1 = __webpack_require__(/*! ../id3v1/ID3v1TagMap */ \"./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js\");\nconst ID3v24TagMapper_1 = __webpack_require__(/*! ../id3v2/ID3v24TagMapper */ \"./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js\");\nconst AsfTagMapper_1 = __webpack_require__(/*! ../asf/AsfTagMapper */ \"./node_modules/music-metadata/lib/asf/AsfTagMapper.js\");\nconst ID3v22TagMapper_1 = __webpack_require__(/*! ../id3v2/ID3v22TagMapper */ \"./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js\");\nconst APEv2TagMapper_1 = __webpack_require__(/*! ../apev2/APEv2TagMapper */ \"./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js\");\nconst MP4TagMapper_1 = __webpack_require__(/*! ../mp4/MP4TagMapper */ \"./node_modules/music-metadata/lib/mp4/MP4TagMapper.js\");\nconst VorbisTagMapper_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisTagMapper */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js\");\nconst RiffInfoTagMap_1 = __webpack_require__(/*! ../riff/RiffInfoTagMap */ \"./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js\");\nconst MatroskaTagMapper_1 = __webpack_require__(/*! ../matroska/MatroskaTagMapper */ \"./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js\");\nconst AiffTagMap_1 = __webpack_require__(/*! ../aiff/AiffTagMap */ \"./node_modules/music-metadata/lib/aiff/AiffTagMap.js\");\nclass CombinedTagMapper {\n    constructor() {\n        this.tagMappers = {};\n        [\n            new ID3v1TagMap_1.ID3v1TagMapper(),\n            new ID3v22TagMapper_1.ID3v22TagMapper(),\n            new ID3v24TagMapper_1.ID3v24TagMapper(),\n            new MP4TagMapper_1.MP4TagMapper(),\n            new MP4TagMapper_1.MP4TagMapper(),\n            new VorbisTagMapper_1.VorbisTagMapper(),\n            new APEv2TagMapper_1.APEv2TagMapper(),\n            new AsfTagMapper_1.AsfTagMapper(),\n            new RiffInfoTagMap_1.RiffInfoTagMapper(),\n            new MatroskaTagMapper_1.MatroskaTagMapper(),\n            new AiffTagMap_1.AiffTagMapper()\n        ].forEach(mapper => {\n            this.registerTagMapper(mapper);\n        });\n    }\n    /**\n     * Convert native to generic (common) tags\n     * @param tagType Originating tag format\n     * @param tag     Native tag to map to a generic tag id\n     * @param warnings\n     * @return Generic tag result (output of this function)\n     */\n    mapTag(tagType, tag, warnings) {\n        const tagMapper = this.tagMappers[tagType];\n        if (tagMapper) {\n            return this.tagMappers[tagType].mapGenericTag(tag, warnings);\n        }\n        throw new Error('No generic tag mapper defined for tag-format: ' + tagType);\n    }\n    registerTagMapper(genericTagMapper) {\n        for (const tagType of genericTagMapper.tagTypes) {\n            this.tagMappers[tagType] = genericTagMapper;\n        }\n    }\n}\nexports.CombinedTagMapper = CombinedTagMapper;\n//# sourceMappingURL=CombinedTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9Db21iaW5lZFRhZ01hcHBlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsc0JBQXNCLG1CQUFPLENBQUMsb0ZBQXNCO0FBQ3BELDBCQUEwQixtQkFBTyxDQUFDLDRGQUEwQjtBQUM1RCx1QkFBdUIsbUJBQU8sQ0FBQyxrRkFBcUI7QUFDcEQsMEJBQTBCLG1CQUFPLENBQUMsNEZBQTBCO0FBQzVELHlCQUF5QixtQkFBTyxDQUFDLDBGQUF5QjtBQUMxRCx1QkFBdUIsbUJBQU8sQ0FBQyxrRkFBcUI7QUFDcEQsMEJBQTBCLG1CQUFPLENBQUMsc0dBQStCO0FBQ2pFLHlCQUF5QixtQkFBTyxDQUFDLHdGQUF3QjtBQUN6RCw0QkFBNEIsbUJBQU8sQ0FBQyxzR0FBK0I7QUFDbkUscUJBQXFCLG1CQUFPLENBQUMsZ0ZBQW9CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvY29tbW9uL0NvbWJpbmVkVGFnTWFwcGVyLmpzPzBjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbWJpbmVkVGFnTWFwcGVyID0gdm9pZCAwO1xuY29uc3QgSUQzdjFUYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9pZDN2MS9JRDN2MVRhZ01hcFwiKTtcbmNvbnN0IElEM3YyNFRhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL2lkM3YyL0lEM3YyNFRhZ01hcHBlclwiKTtcbmNvbnN0IEFzZlRhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL2FzZi9Bc2ZUYWdNYXBwZXJcIik7XG5jb25zdCBJRDN2MjJUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9pZDN2Mi9JRDN2MjJUYWdNYXBwZXJcIik7XG5jb25zdCBBUEV2MlRhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL2FwZXYyL0FQRXYyVGFnTWFwcGVyXCIpO1xuY29uc3QgTVA0VGFnTWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vbXA0L01QNFRhZ01hcHBlclwiKTtcbmNvbnN0IFZvcmJpc1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL29nZy92b3JiaXMvVm9yYmlzVGFnTWFwcGVyXCIpO1xuY29uc3QgUmlmZkluZm9UYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9yaWZmL1JpZmZJbmZvVGFnTWFwXCIpO1xuY29uc3QgTWF0cm9za2FUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9tYXRyb3NrYS9NYXRyb3NrYVRhZ01hcHBlclwiKTtcbmNvbnN0IEFpZmZUYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9haWZmL0FpZmZUYWdNYXBcIik7XG5jbGFzcyBDb21iaW5lZFRhZ01hcHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGFnTWFwcGVycyA9IHt9O1xuICAgICAgICBbXG4gICAgICAgICAgICBuZXcgSUQzdjFUYWdNYXBfMS5JRDN2MVRhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IElEM3YyMlRhZ01hcHBlcl8xLklEM3YyMlRhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IElEM3YyNFRhZ01hcHBlcl8xLklEM3YyNFRhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IE1QNFRhZ01hcHBlcl8xLk1QNFRhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IE1QNFRhZ01hcHBlcl8xLk1QNFRhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IFZvcmJpc1RhZ01hcHBlcl8xLlZvcmJpc1RhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IEFQRXYyVGFnTWFwcGVyXzEuQVBFdjJUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBBc2ZUYWdNYXBwZXJfMS5Bc2ZUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBSaWZmSW5mb1RhZ01hcF8xLlJpZmZJbmZvVGFnTWFwcGVyKCksXG4gICAgICAgICAgICBuZXcgTWF0cm9za2FUYWdNYXBwZXJfMS5NYXRyb3NrYVRhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IEFpZmZUYWdNYXBfMS5BaWZmVGFnTWFwcGVyKClcbiAgICAgICAgXS5mb3JFYWNoKG1hcHBlciA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyVGFnTWFwcGVyKG1hcHBlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IG5hdGl2ZSB0byBnZW5lcmljIChjb21tb24pIHRhZ3NcbiAgICAgKiBAcGFyYW0gdGFnVHlwZSBPcmlnaW5hdGluZyB0YWcgZm9ybWF0XG4gICAgICogQHBhcmFtIHRhZyAgICAgTmF0aXZlIHRhZyB0byBtYXAgdG8gYSBnZW5lcmljIHRhZyBpZFxuICAgICAqIEBwYXJhbSB3YXJuaW5nc1xuICAgICAqIEByZXR1cm4gR2VuZXJpYyB0YWcgcmVzdWx0IChvdXRwdXQgb2YgdGhpcyBmdW5jdGlvbilcbiAgICAgKi9cbiAgICBtYXBUYWcodGFnVHlwZSwgdGFnLCB3YXJuaW5ncykge1xuICAgICAgICBjb25zdCB0YWdNYXBwZXIgPSB0aGlzLnRhZ01hcHBlcnNbdGFnVHlwZV07XG4gICAgICAgIGlmICh0YWdNYXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZ01hcHBlcnNbdGFnVHlwZV0ubWFwR2VuZXJpY1RhZyh0YWcsIHdhcm5pbmdzKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlbmVyaWMgdGFnIG1hcHBlciBkZWZpbmVkIGZvciB0YWctZm9ybWF0OiAnICsgdGFnVHlwZSk7XG4gICAgfVxuICAgIHJlZ2lzdGVyVGFnTWFwcGVyKGdlbmVyaWNUYWdNYXBwZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCB0YWdUeXBlIG9mIGdlbmVyaWNUYWdNYXBwZXIudGFnVHlwZXMpIHtcbiAgICAgICAgICAgIHRoaXMudGFnTWFwcGVyc1t0YWdUeXBlXSA9IGdlbmVyaWNUYWdNYXBwZXI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNvbWJpbmVkVGFnTWFwcGVyID0gQ29tYmluZWRUYWdNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db21iaW5lZFRhZ01hcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/CombinedTagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/FourCC.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/FourCC.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FourCcToken = void 0;\nconst util = __webpack_require__(/*! ./Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst validFourCC = /^[\\x21-\\x7e©][\\x20-\\x7e\\x00()]{3}/;\n/**\n * Token for read FourCC\n * Ref: https://en.wikipedia.org/wiki/FourCC\n */\nexports.FourCcToken = {\n    len: 4,\n    get: (buf, off) => {\n        const id = buf.toString('binary', off, off + exports.FourCcToken.len);\n        if (!id.match(validFourCC)) {\n            throw new Error(`FourCC contains invalid characters: ${util.a2hex(id)} \"${id}\"`);\n        }\n        return id;\n    },\n    put: (buffer, offset, id) => {\n        const str = Buffer.from(id, 'binary');\n        if (str.length !== 4)\n            throw new Error('Invalid length');\n        return str.copy(buffer, offset);\n    }\n};\n//# sourceMappingURL=FourCC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9Gb3VyQ0MuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixhQUFhLG1CQUFPLENBQUMsZ0VBQVE7QUFDN0Isb0RBQW9ELEVBQUU7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsZ0JBQWdCLEdBQUcsR0FBRztBQUN6RjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvY29tbW9uL0ZvdXJDQy5qcz8yM2RhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gb3VyQ2NUb2tlbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi9VdGlsXCIpO1xuY29uc3QgdmFsaWRGb3VyQ0MgPSAvXltcXHgyMS1cXHg3ZcKpXVtcXHgyMC1cXHg3ZVxceDAwKCldezN9Lztcbi8qKlxuICogVG9rZW4gZm9yIHJlYWQgRm91ckNDXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ZvdXJDQ1xuICovXG5leHBvcnRzLkZvdXJDY1Rva2VuID0ge1xuICAgIGxlbjogNCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IGJ1Zi50b1N0cmluZygnYmluYXJ5Jywgb2ZmLCBvZmYgKyBleHBvcnRzLkZvdXJDY1Rva2VuLmxlbik7XG4gICAgICAgIGlmICghaWQubWF0Y2godmFsaWRGb3VyQ0MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvdXJDQyBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnM6ICR7dXRpbC5hMmhleChpZCl9IFwiJHtpZH1cImApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9LFxuICAgIHB1dDogKGJ1ZmZlciwgb2Zmc2V0LCBpZCkgPT4ge1xuICAgICAgICBjb25zdCBzdHIgPSBCdWZmZXIuZnJvbShpZCwgJ2JpbmFyeScpO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCAhPT0gNClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsZW5ndGgnKTtcbiAgICAgICAgcmV0dXJuIHN0ci5jb3B5KGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rm91ckNDLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/FourCC.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/GenericTagMapper.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/GenericTagMapper.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommonTagMapper = void 0;\nclass CommonTagMapper {\n    static toIntOrNull(str) {\n        const cleaned = parseInt(str, 10);\n        return isNaN(cleaned) ? null : cleaned;\n    }\n    // TODO: a string of 1of1 would fail to be converted\n    // converts 1/10 to no : 1, of : 10\n    // or 1 to no : 1, of : 0\n    static normalizeTrack(origVal) {\n        const split = origVal.toString().split('/');\n        return {\n            no: parseInt(split[0], 10) || null,\n            of: parseInt(split[1], 10) || null\n        };\n    }\n    constructor(tagTypes, tagMap) {\n        this.tagTypes = tagTypes;\n        this.tagMap = tagMap;\n    }\n    /**\n     * Process and set common tags\n     * write common tags to\n     * @param tag Native tag\n     * @param warnings Register warnings\n     * @return common name\n     */\n    mapGenericTag(tag, warnings) {\n        tag = { id: tag.id, value: tag.value }; // clone object\n        this.postMap(tag, warnings);\n        // Convert native tag event to generic 'alias' tag\n        const id = this.getCommonName(tag.id);\n        return id ? { id, value: tag.value } : null;\n    }\n    /**\n     * Convert native tag key to common tag key\n     * @tag  Native header tag\n     * @return common tag name (alias)\n     */\n    getCommonName(tag) {\n        return this.tagMap[tag];\n    }\n    /**\n     * Handle post mapping exceptions / correction\n     * @param tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\n     * @param warnings Used to register warnings\n     */\n    postMap(tag, warnings) {\n        return;\n    }\n}\nexports.CommonTagMapper = CommonTagMapper;\nCommonTagMapper.maxRatingScore = 1;\n//# sourceMappingURL=GenericTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0NBQWdDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyLmpzPzZhZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbW1vblRhZ01hcHBlciA9IHZvaWQgMDtcbmNsYXNzIENvbW1vblRhZ01hcHBlciB7XG4gICAgc3RhdGljIHRvSW50T3JOdWxsKHN0cikge1xuICAgICAgICBjb25zdCBjbGVhbmVkID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gICAgICAgIHJldHVybiBpc05hTihjbGVhbmVkKSA/IG51bGwgOiBjbGVhbmVkO1xuICAgIH1cbiAgICAvLyBUT0RPOiBhIHN0cmluZyBvZiAxb2YxIHdvdWxkIGZhaWwgdG8gYmUgY29udmVydGVkXG4gICAgLy8gY29udmVydHMgMS8xMCB0byBubyA6IDEsIG9mIDogMTBcbiAgICAvLyBvciAxIHRvIG5vIDogMSwgb2YgOiAwXG4gICAgc3RhdGljIG5vcm1hbGl6ZVRyYWNrKG9yaWdWYWwpIHtcbiAgICAgICAgY29uc3Qgc3BsaXQgPSBvcmlnVmFsLnRvU3RyaW5nKCkuc3BsaXQoJy8nKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vOiBwYXJzZUludChzcGxpdFswXSwgMTApIHx8IG51bGwsXG4gICAgICAgICAgICBvZjogcGFyc2VJbnQoc3BsaXRbMV0sIDEwKSB8fCBudWxsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHRhZ1R5cGVzLCB0YWdNYXApIHtcbiAgICAgICAgdGhpcy50YWdUeXBlcyA9IHRhZ1R5cGVzO1xuICAgICAgICB0aGlzLnRhZ01hcCA9IHRhZ01hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhbmQgc2V0IGNvbW1vbiB0YWdzXG4gICAgICogd3JpdGUgY29tbW9uIHRhZ3MgdG9cbiAgICAgKiBAcGFyYW0gdGFnIE5hdGl2ZSB0YWdcbiAgICAgKiBAcGFyYW0gd2FybmluZ3MgUmVnaXN0ZXIgd2FybmluZ3NcbiAgICAgKiBAcmV0dXJuIGNvbW1vbiBuYW1lXG4gICAgICovXG4gICAgbWFwR2VuZXJpY1RhZyh0YWcsIHdhcm5pbmdzKSB7XG4gICAgICAgIHRhZyA9IHsgaWQ6IHRhZy5pZCwgdmFsdWU6IHRhZy52YWx1ZSB9OyAvLyBjbG9uZSBvYmplY3RcbiAgICAgICAgdGhpcy5wb3N0TWFwKHRhZywgd2FybmluZ3MpO1xuICAgICAgICAvLyBDb252ZXJ0IG5hdGl2ZSB0YWcgZXZlbnQgdG8gZ2VuZXJpYyAnYWxpYXMnIHRhZ1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuZ2V0Q29tbW9uTmFtZSh0YWcuaWQpO1xuICAgICAgICByZXR1cm4gaWQgPyB7IGlkLCB2YWx1ZTogdGFnLnZhbHVlIH0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IG5hdGl2ZSB0YWcga2V5IHRvIGNvbW1vbiB0YWcga2V5XG4gICAgICogQHRhZyAgTmF0aXZlIGhlYWRlciB0YWdcbiAgICAgKiBAcmV0dXJuIGNvbW1vbiB0YWcgbmFtZSAoYWxpYXMpXG4gICAgICovXG4gICAgZ2V0Q29tbW9uTmFtZSh0YWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnTWFwW3RhZ107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBwb3N0IG1hcHBpbmcgZXhjZXB0aW9ucyAvIGNvcnJlY3Rpb25cbiAgICAgKiBAcGFyYW0gdGFnIFRhZyBlLmcuIHtcIsKpYWxiXCIsIFwiQnVlbmEgVmlzdGEgU29jaWFsIENsdWJcIilcbiAgICAgKiBAcGFyYW0gd2FybmluZ3MgVXNlZCB0byByZWdpc3RlciB3YXJuaW5nc1xuICAgICAqL1xuICAgIHBvc3RNYXAodGFnLCB3YXJuaW5ncykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuZXhwb3J0cy5Db21tb25UYWdNYXBwZXIgPSBDb21tb25UYWdNYXBwZXI7XG5Db21tb25UYWdNYXBwZXIubWF4UmF0aW5nU2NvcmUgPSAxO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2VuZXJpY1RhZ01hcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/GenericTagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/GenericTagTypes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/GenericTagTypes.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isUnique = exports.isSingleton = exports.commonTags = void 0;\nexports.commonTags = {\n    year: { multiple: false },\n    track: { multiple: false },\n    disk: { multiple: false },\n    title: { multiple: false },\n    artist: { multiple: false },\n    artists: { multiple: true, unique: true },\n    albumartist: { multiple: false },\n    album: { multiple: false },\n    date: { multiple: false },\n    originaldate: { multiple: false },\n    originalyear: { multiple: false },\n    comment: { multiple: true, unique: false },\n    genre: { multiple: true, unique: true },\n    picture: { multiple: true, unique: true },\n    composer: { multiple: true, unique: true },\n    lyrics: { multiple: true, unique: false },\n    albumsort: { multiple: false, unique: true },\n    titlesort: { multiple: false, unique: true },\n    work: { multiple: false, unique: true },\n    artistsort: { multiple: false, unique: true },\n    albumartistsort: { multiple: false, unique: true },\n    composersort: { multiple: false, unique: true },\n    lyricist: { multiple: true, unique: true },\n    writer: { multiple: true, unique: true },\n    conductor: { multiple: true, unique: true },\n    remixer: { multiple: true, unique: true },\n    arranger: { multiple: true, unique: true },\n    engineer: { multiple: true, unique: true },\n    producer: { multiple: true, unique: true },\n    technician: { multiple: true, unique: true },\n    djmixer: { multiple: true, unique: true },\n    mixer: { multiple: true, unique: true },\n    label: { multiple: true, unique: true },\n    grouping: { multiple: false },\n    subtitle: { multiple: true },\n    discsubtitle: { multiple: false },\n    totaltracks: { multiple: false },\n    totaldiscs: { multiple: false },\n    compilation: { multiple: false },\n    rating: { multiple: true },\n    bpm: { multiple: false },\n    mood: { multiple: false },\n    media: { multiple: false },\n    catalognumber: { multiple: true, unique: true },\n    tvShow: { multiple: false },\n    tvShowSort: { multiple: false },\n    tvSeason: { multiple: false },\n    tvEpisode: { multiple: false },\n    tvEpisodeId: { multiple: false },\n    tvNetwork: { multiple: false },\n    podcast: { multiple: false },\n    podcasturl: { multiple: false },\n    releasestatus: { multiple: false },\n    releasetype: { multiple: true },\n    releasecountry: { multiple: false },\n    script: { multiple: false },\n    language: { multiple: false },\n    copyright: { multiple: false },\n    license: { multiple: false },\n    encodedby: { multiple: false },\n    encodersettings: { multiple: false },\n    gapless: { multiple: false },\n    barcode: { multiple: false },\n    isrc: { multiple: true },\n    asin: { multiple: false },\n    musicbrainz_recordingid: { multiple: false },\n    musicbrainz_trackid: { multiple: false },\n    musicbrainz_albumid: { multiple: false },\n    musicbrainz_artistid: { multiple: true },\n    musicbrainz_albumartistid: { multiple: true },\n    musicbrainz_releasegroupid: { multiple: false },\n    musicbrainz_workid: { multiple: false },\n    musicbrainz_trmid: { multiple: false },\n    musicbrainz_discid: { multiple: false },\n    acoustid_id: { multiple: false },\n    acoustid_fingerprint: { multiple: false },\n    musicip_puid: { multiple: false },\n    musicip_fingerprint: { multiple: false },\n    website: { multiple: false },\n    'performer:instrument': { multiple: true, unique: true },\n    averageLevel: { multiple: false },\n    peakLevel: { multiple: false },\n    notes: { multiple: true, unique: false },\n    key: { multiple: false },\n    originalalbum: { multiple: false },\n    originalartist: { multiple: false },\n    discogs_artist_id: { multiple: true, unique: true },\n    discogs_release_id: { multiple: false },\n    discogs_label_id: { multiple: false },\n    discogs_master_release_id: { multiple: false },\n    discogs_votes: { multiple: false },\n    discogs_rating: { multiple: false },\n    replaygain_track_peak: { multiple: false },\n    replaygain_track_gain: { multiple: false },\n    replaygain_album_peak: { multiple: false },\n    replaygain_album_gain: { multiple: false },\n    replaygain_track_minmax: { multiple: false },\n    replaygain_album_minmax: { multiple: false },\n    replaygain_undo: { multiple: false },\n    description: { multiple: true },\n    longDescription: { multiple: false },\n    category: { multiple: true },\n    hdVideo: { multiple: false },\n    keywords: { multiple: true },\n    movement: { multiple: false },\n    movementIndex: { multiple: false },\n    movementTotal: { multiple: false },\n    podcastId: { multiple: false },\n    showMovement: { multiple: false },\n    stik: { multiple: false }\n};\n/**\n * @param alias Name of common tag\n * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false\n */\nfunction isSingleton(alias) {\n    return exports.commonTags.hasOwnProperty(alias) && !exports.commonTags[alias].multiple;\n}\nexports.isSingleton = isSingleton;\n/**\n * @param alias Common (generic) tag\n * @returns {boolean|*} true if given alias is a singleton or explicitly marked as unique\n */\nfunction isUnique(alias) {\n    return !exports.commonTags[alias].multiple || exports.commonTags[alias].unique;\n}\nexports.isUnique = isUnique;\n//# sourceMappingURL=GenericTagTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/GenericTagTypes.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/MetadataCollector.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/MetadataCollector.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.joinArtists = exports.MetadataCollector = void 0;\nconst type_1 = __webpack_require__(/*! ../type */ \"./node_modules/music-metadata/lib/type.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst GenericTagTypes_1 = __webpack_require__(/*! ./GenericTagTypes */ \"./node_modules/music-metadata/lib/common/GenericTagTypes.js\");\nconst CombinedTagMapper_1 = __webpack_require__(/*! ./CombinedTagMapper */ \"./node_modules/music-metadata/lib/common/CombinedTagMapper.js\");\nconst GenericTagMapper_1 = __webpack_require__(/*! ./GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\nconst Util_1 = __webpack_require__(/*! ./Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst FileType = __webpack_require__(/*! file-type/core */ \"./node_modules/file-type/core.js\");\nconst debug = (0, debug_1.default)('music-metadata:collector');\nconst TagPriority = ['matroska', 'APEv2', 'vorbis', 'ID3v2.4', 'ID3v2.3', 'ID3v2.2', 'exif', 'asf', 'iTunes', 'AIFF', 'ID3v1'];\n/**\n * Provided to the parser to uodate the metadata result.\n * Responsible for triggering async updates\n */\nclass MetadataCollector {\n    constructor(opts) {\n        this.opts = opts;\n        this.format = {\n            tagTypes: [],\n            trackInfo: []\n        };\n        this.native = {};\n        this.common = {\n            track: { no: null, of: null },\n            disk: { no: null, of: null },\n            movementIndex: {}\n        };\n        this.quality = {\n            warnings: []\n        };\n        /**\n         * Keeps track of origin priority for each mapped id\n         */\n        this.commonOrigin = {};\n        /**\n         * Maps a tag type to a priority\n         */\n        this.originPriority = {};\n        this.tagMapper = new CombinedTagMapper_1.CombinedTagMapper();\n        let priority = 1;\n        for (const tagType of TagPriority) {\n            this.originPriority[tagType] = priority++;\n        }\n        this.originPriority.artificial = 500; // Filled using alternative tags\n        this.originPriority.id3v1 = 600; // Consider as the worst because of the field length limit\n    }\n    /**\n     * @returns {boolean} true if one or more tags have been found\n     */\n    hasAny() {\n        return Object.keys(this.native).length > 0;\n    }\n    addStreamInfo(streamInfo) {\n        debug(`streamInfo: type=${type_1.TrackType[streamInfo.type]}, codec=${streamInfo.codecName}`);\n        this.format.trackInfo.push(streamInfo);\n    }\n    setFormat(key, value) {\n        debug(`format: ${key} = ${value}`);\n        this.format[key] = value; // as any to override readonly\n        if (this.opts.observer) {\n            this.opts.observer({ metadata: this, tag: { type: 'format', id: key, value } });\n        }\n    }\n    addTag(tagType, tagId, value) {\n        debug(`tag ${tagType}.${tagId} = ${value}`);\n        if (!this.native[tagType]) {\n            this.format.tagTypes.push(tagType);\n            this.native[tagType] = [];\n        }\n        this.native[tagType].push({ id: tagId, value });\n        this.toCommon(tagType, tagId, value);\n    }\n    addWarning(warning) {\n        this.quality.warnings.push({ message: warning });\n    }\n    postMap(tagType, tag) {\n        // Common tag (alias) found\n        // check if we need to do something special with common tag\n        // if the event has been aliased then we need to clean it before\n        // it is emitted to the user. e.g. genre (20) -> Electronic\n        switch (tag.id) {\n            case 'artist':\n                if (this.commonOrigin.artist === this.originPriority[tagType]) {\n                    // Assume the artist field is used as artists\n                    return this.postMap('artificial', { id: 'artists', value: tag.value });\n                }\n                if (!this.common.artists) {\n                    // Fill artists using artist source\n                    this.setGenericTag('artificial', { id: 'artists', value: tag.value });\n                }\n                break;\n            case 'artists':\n                if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {\n                    if (!this.common.artists || this.common.artists.indexOf(tag.value) === -1) {\n                        // Fill artist using artists source\n                        const artists = (this.common.artists || []).concat([tag.value]);\n                        const value = joinArtists(artists);\n                        const artistTag = { id: 'artist', value };\n                        this.setGenericTag('artificial', artistTag);\n                    }\n                }\n                break;\n            case 'picture':\n                this.postFixPicture(tag.value).then(picture => {\n                    if (picture !== null) {\n                        tag.value = picture;\n                        this.setGenericTag(tagType, tag);\n                    }\n                });\n                return;\n            case 'totaltracks':\n                this.common.track.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\n                return;\n            case 'totaldiscs':\n                this.common.disk.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\n                return;\n            case 'movementTotal':\n                this.common.movementIndex.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\n                return;\n            case 'track':\n            case 'disk':\n            case 'movementIndex':\n                const of = this.common[tag.id].of; // store of value, maybe maybe overwritten\n                this.common[tag.id] = GenericTagMapper_1.CommonTagMapper.normalizeTrack(tag.value);\n                this.common[tag.id].of = of != null ? of : this.common[tag.id].of;\n                return;\n            case 'bpm':\n            case 'year':\n            case 'originalyear':\n                tag.value = parseInt(tag.value, 10);\n                break;\n            case 'date':\n                // ToDo: be more strict on 'YYYY...'\n                const year = parseInt(tag.value.substr(0, 4), 10);\n                if (!isNaN(year)) {\n                    this.common.year = year;\n                }\n                break;\n            case 'discogs_label_id':\n            case 'discogs_release_id':\n            case 'discogs_master_release_id':\n            case 'discogs_artist_id':\n            case 'discogs_votes':\n                tag.value = typeof tag.value === 'string' ? parseInt(tag.value, 10) : tag.value;\n                break;\n            case 'replaygain_track_gain':\n            case 'replaygain_track_peak':\n            case 'replaygain_album_gain':\n            case 'replaygain_album_peak':\n                tag.value = (0, Util_1.toRatio)(tag.value);\n                break;\n            case 'replaygain_track_minmax':\n                tag.value = tag.value.split(',').map(v => parseInt(v, 10));\n                break;\n            case 'replaygain_undo':\n                const minMix = tag.value.split(',').map(v => parseInt(v, 10));\n                tag.value = {\n                    leftChannel: minMix[0],\n                    rightChannel: minMix[1]\n                };\n                break;\n            case 'gapless': // iTunes gap-less flag\n            case 'compilation':\n            case 'podcast':\n            case 'showMovement':\n                tag.value = tag.value === '1' || tag.value === 1; // boolean\n                break;\n            case 'isrc': // Only keep unique values\n                if (this.common[tag.id] && this.common[tag.id].indexOf(tag.value) !== -1)\n                    return;\n                break;\n            default:\n            // nothing to do\n        }\n        if (tag.value !== null) {\n            this.setGenericTag(tagType, tag);\n        }\n    }\n    /**\n     * Convert native tags to common tags\n     * @returns {IAudioMetadata} Native + common tags\n     */\n    toCommonMetadata() {\n        return {\n            format: this.format,\n            native: this.native,\n            quality: this.quality,\n            common: this.common\n        };\n    }\n    /**\n     * Fix some common issues with picture object\n     * @param picture Picture\n     */\n    async postFixPicture(picture) {\n        if (picture.data && picture.data.length > 0) {\n            if (!picture.format) {\n                const fileType = await FileType.fromBuffer(picture.data);\n                if (fileType) {\n                    picture.format = fileType.mime;\n                }\n                else {\n                    return null;\n                }\n            }\n            picture.format = picture.format.toLocaleLowerCase();\n            switch (picture.format) {\n                case 'image/jpg':\n                    picture.format = 'image/jpeg'; // ToDo: register warning\n            }\n            return picture;\n        }\n        this.addWarning(`Empty picture tag found`);\n        return null;\n    }\n    /**\n     * Convert native tag to common tags\n     */\n    toCommon(tagType, tagId, value) {\n        const tag = { id: tagId, value };\n        const genericTag = this.tagMapper.mapTag(tagType, tag, this);\n        if (genericTag) {\n            this.postMap(tagType, genericTag);\n        }\n    }\n    /**\n     * Set generic tag\n     */\n    setGenericTag(tagType, tag) {\n        debug(`common.${tag.id} = ${tag.value}`);\n        const prio0 = this.commonOrigin[tag.id] || 1000;\n        const prio1 = this.originPriority[tagType];\n        if ((0, GenericTagTypes_1.isSingleton)(tag.id)) {\n            if (prio1 <= prio0) {\n                this.common[tag.id] = tag.value;\n                this.commonOrigin[tag.id] = prio1;\n            }\n            else {\n                return debug(`Ignore native tag (singleton): ${tagType}.${tag.id} = ${tag.value}`);\n            }\n        }\n        else {\n            if (prio1 === prio0) {\n                if (!(0, GenericTagTypes_1.isUnique)(tag.id) || this.common[tag.id].indexOf(tag.value) === -1) {\n                    this.common[tag.id].push(tag.value);\n                }\n                else {\n                    debug(`Ignore duplicate value: ${tagType}.${tag.id} = ${tag.value}`);\n                }\n                // no effect? this.commonOrigin[tag.id] = prio1;\n            }\n            else if (prio1 < prio0) {\n                this.common[tag.id] = [tag.value];\n                this.commonOrigin[tag.id] = prio1;\n            }\n            else {\n                return debug(`Ignore native tag (list): ${tagType}.${tag.id} = ${tag.value}`);\n            }\n        }\n        if (this.opts.observer) {\n            this.opts.observer({ metadata: this, tag: { type: 'common', id: tag.id, value: tag.value } });\n        }\n        // ToDo: trigger metadata event\n    }\n}\nexports.MetadataCollector = MetadataCollector;\nfunction joinArtists(artists) {\n    if (artists.length > 2) {\n        return artists.slice(0, artists.length - 1).join(', ') + ' & ' + artists[artists.length - 1];\n    }\n    return artists.join(' & ');\n}\nexports.joinArtists = joinArtists;\n//# sourceMappingURL=MetadataCollector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/MetadataCollector.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js":
/*!**************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RandomUint8ArrayReader = void 0;\n/**\n * Provides abstract Uint8Array access via the IRandomRead interface\n */\nclass RandomUint8ArrayReader {\n    constructor(uint8Array) {\n        this.uint8Array = uint8Array;\n        this.fileSize = uint8Array.length;\n    }\n    /**\n     * Read from a given position of an abstracted file or buffer.\n     * @param uint8Array - Uint8Array that the data will be written to.\n     * @param offset - Offset in the buffer to start writing at.\n     * @param length - Integer specifying the number of bytes to read.\n     * @param position - Specifies where to begin reading from in the file.\n     * @return Promise providing bytes read\n     */\n    async randomRead(uint8Array, offset, length, position) {\n        uint8Array.set(this.uint8Array.subarray(position, position + length), offset);\n        return length;\n    }\n}\nexports.RandomUint8ArrayReader = RandomUint8ArrayReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9SYW5kb21VaW50OEFycmF5UmVhZGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9jb21tb24vUmFuZG9tVWludDhBcnJheVJlYWRlci5qcz8xNGU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SYW5kb21VaW50OEFycmF5UmVhZGVyID0gdm9pZCAwO1xuLyoqXG4gKiBQcm92aWRlcyBhYnN0cmFjdCBVaW50OEFycmF5IGFjY2VzcyB2aWEgdGhlIElSYW5kb21SZWFkIGludGVyZmFjZVxuICovXG5jbGFzcyBSYW5kb21VaW50OEFycmF5UmVhZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1aW50OEFycmF5KSB7XG4gICAgICAgIHRoaXMudWludDhBcnJheSA9IHVpbnQ4QXJyYXk7XG4gICAgICAgIHRoaXMuZmlsZVNpemUgPSB1aW50OEFycmF5Lmxlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBmcm9tIGEgZ2l2ZW4gcG9zaXRpb24gb2YgYW4gYWJzdHJhY3RlZCBmaWxlIG9yIGJ1ZmZlci5cbiAgICAgKiBAcGFyYW0gdWludDhBcnJheSAtIFVpbnQ4QXJyYXkgdGhhdCB0aGUgZGF0YSB3aWxsIGJlIHdyaXR0ZW4gdG8uXG4gICAgICogQHBhcmFtIG9mZnNldCAtIE9mZnNldCBpbiB0aGUgYnVmZmVyIHRvIHN0YXJ0IHdyaXRpbmcgYXQuXG4gICAgICogQHBhcmFtIGxlbmd0aCAtIEludGVnZXIgc3BlY2lmeWluZyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWQuXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIC0gU3BlY2lmaWVzIHdoZXJlIHRvIGJlZ2luIHJlYWRpbmcgZnJvbSBpbiB0aGUgZmlsZS5cbiAgICAgKiBAcmV0dXJuIFByb21pc2UgcHJvdmlkaW5nIGJ5dGVzIHJlYWRcbiAgICAgKi9cbiAgICBhc3luYyByYW5kb21SZWFkKHVpbnQ4QXJyYXksIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbikge1xuICAgICAgICB1aW50OEFycmF5LnNldCh0aGlzLnVpbnQ4QXJyYXkuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgbGVuZ3RoKSwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG59XG5leHBvcnRzLlJhbmRvbVVpbnQ4QXJyYXlSZWFkZXIgPSBSYW5kb21VaW50OEFycmF5UmVhZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/common/Util.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/Util.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toRatio = exports.dbToRatio = exports.ratioToDb = exports.a2hex = exports.isBitSet = exports.getBitAllignedNumber = exports.stripNulls = exports.decodeString = exports.trimRightNull = exports.findZero = exports.getBit = void 0;\nfunction getBit(buf, off, bit) {\n    return (buf[off] & (1 << bit)) !== 0;\n}\nexports.getBit = getBit;\n/**\n * Found delimiting zero in uint8Array\n * @param uint8Array Uint8Array to find the zero delimiter in\n * @param start Offset in uint8Array\n * @param end Last position to parse in uint8Array\n * @param encoding The string encoding used\n * @return Absolute position on uint8Array where zero found\n */\nfunction findZero(uint8Array, start, end, encoding) {\n    let i = start;\n    if (encoding === 'utf16le') {\n        while (uint8Array[i] !== 0 || uint8Array[i + 1] !== 0) {\n            if (i >= end)\n                return end;\n            i += 2;\n        }\n        return i;\n    }\n    else {\n        while (uint8Array[i] !== 0) {\n            if (i >= end)\n                return end;\n            i++;\n        }\n        return i;\n    }\n}\nexports.findZero = findZero;\nfunction trimRightNull(x) {\n    const pos0 = x.indexOf('\\0');\n    return pos0 === -1 ? x : x.substr(0, pos0);\n}\nexports.trimRightNull = trimRightNull;\nfunction swapBytes(uint8Array) {\n    const l = uint8Array.length;\n    if ((l & 1) !== 0)\n        throw new Error('Buffer length must be even');\n    for (let i = 0; i < l; i += 2) {\n        const a = uint8Array[i];\n        uint8Array[i] = uint8Array[i + 1];\n        uint8Array[i + 1] = a;\n    }\n    return uint8Array;\n}\n/**\n * Decode string\n */\nfunction decodeString(uint8Array, encoding) {\n    // annoying workaround for a double BOM issue\n    // https://github.com/leetreveil/musicmetadata/issues/84\n    if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) { // little endian\n        return decodeString(uint8Array.subarray(2), encoding);\n    }\n    else if (encoding === 'utf16le' && uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {\n        // BOM, indicating big endian decoding\n        if ((uint8Array.length & 1) !== 0)\n            throw new Error('Expected even number of octets for 16-bit unicode string');\n        return decodeString(swapBytes(uint8Array), encoding);\n    }\n    return Buffer.from(uint8Array).toString(encoding);\n}\nexports.decodeString = decodeString;\nfunction stripNulls(str) {\n    str = str.replace(/^\\x00+/g, '');\n    str = str.replace(/\\x00+$/g, '');\n    return str;\n}\nexports.stripNulls = stripNulls;\n/**\n * Read bit-aligned number start from buffer\n * Total offset in bits = byteOffset * 8 + bitOffset\n * @param source Byte buffer\n * @param byteOffset Starting offset in bytes\n * @param bitOffset Starting offset in bits: 0 = lsb\n * @param len Length of number in bits\n * @return Decoded bit aligned number\n */\nfunction getBitAllignedNumber(source, byteOffset, bitOffset, len) {\n    const byteOff = byteOffset + ~~(bitOffset / 8);\n    const bitOff = bitOffset % 8;\n    let value = source[byteOff];\n    value &= 0xff >> bitOff;\n    const bitsRead = 8 - bitOff;\n    const bitsLeft = len - bitsRead;\n    if (bitsLeft < 0) {\n        value >>= (8 - bitOff - len);\n    }\n    else if (bitsLeft > 0) {\n        value <<= bitsLeft;\n        value |= getBitAllignedNumber(source, byteOffset, bitOffset + bitsRead, bitsLeft);\n    }\n    return value;\n}\nexports.getBitAllignedNumber = getBitAllignedNumber;\n/**\n * Read bit-aligned number start from buffer\n * Total offset in bits = byteOffset * 8 + bitOffset\n * @param source Byte Uint8Array\n * @param byteOffset Starting offset in bytes\n * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is the least significant bit\n * @return True if bit is set\n */\nfunction isBitSet(source, byteOffset, bitOffset) {\n    return getBitAllignedNumber(source, byteOffset, bitOffset, 1) === 1;\n}\nexports.isBitSet = isBitSet;\nfunction a2hex(str) {\n    const arr = [];\n    for (let i = 0, l = str.length; i < l; i++) {\n        const hex = Number(str.charCodeAt(i)).toString(16);\n        arr.push(hex.length === 1 ? '0' + hex : hex);\n    }\n    return arr.join(' ');\n}\nexports.a2hex = a2hex;\n/**\n * Convert power ratio to DB\n * ratio: [0..1]\n */\nfunction ratioToDb(ratio) {\n    return 10 * Math.log10(ratio);\n}\nexports.ratioToDb = ratioToDb;\n/**\n * Convert dB to ratio\n * db Decibels\n */\nfunction dbToRatio(dB) {\n    return Math.pow(10, dB / 10);\n}\nexports.dbToRatio = dbToRatio;\n/**\n * Convert replay gain to ratio and Decibel\n * @param value string holding a ratio like '0.034' or '-7.54 dB'\n */\nfunction toRatio(value) {\n    const ps = value.split(' ').map(p => p.trim().toLowerCase());\n    // @ts-ignore\n    if (ps.length >= 1) {\n        const v = parseFloat(ps[0]);\n        return ps.length === 2 && ps[1] === 'db' ? {\n            dB: v,\n            ratio: dbToRatio(v)\n        } : {\n            dB: ratioToDb(v),\n            ratio: v\n        };\n    }\n}\nexports.toRatio = toRatio;\n//# sourceMappingURL=Util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9VdGlsLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsYUFBYSxHQUFHLGdCQUFnQixHQUFHLDRCQUE0QixHQUFHLGtCQUFrQixHQUFHLG9CQUFvQixHQUFHLHFCQUFxQixHQUFHLGdCQUFnQixHQUFHLGNBQWM7QUFDak87QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0Esb0NBQW9DLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9VdGlsLmpzP2I4MGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvUmF0aW8gPSBleHBvcnRzLmRiVG9SYXRpbyA9IGV4cG9ydHMucmF0aW9Ub0RiID0gZXhwb3J0cy5hMmhleCA9IGV4cG9ydHMuaXNCaXRTZXQgPSBleHBvcnRzLmdldEJpdEFsbGlnbmVkTnVtYmVyID0gZXhwb3J0cy5zdHJpcE51bGxzID0gZXhwb3J0cy5kZWNvZGVTdHJpbmcgPSBleHBvcnRzLnRyaW1SaWdodE51bGwgPSBleHBvcnRzLmZpbmRaZXJvID0gZXhwb3J0cy5nZXRCaXQgPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRCaXQoYnVmLCBvZmYsIGJpdCkge1xuICAgIHJldHVybiAoYnVmW29mZl0gJiAoMSA8PCBiaXQpKSAhPT0gMDtcbn1cbmV4cG9ydHMuZ2V0Qml0ID0gZ2V0Qml0O1xuLyoqXG4gKiBGb3VuZCBkZWxpbWl0aW5nIHplcm8gaW4gdWludDhBcnJheVxuICogQHBhcmFtIHVpbnQ4QXJyYXkgVWludDhBcnJheSB0byBmaW5kIHRoZSB6ZXJvIGRlbGltaXRlciBpblxuICogQHBhcmFtIHN0YXJ0IE9mZnNldCBpbiB1aW50OEFycmF5XG4gKiBAcGFyYW0gZW5kIExhc3QgcG9zaXRpb24gdG8gcGFyc2UgaW4gdWludDhBcnJheVxuICogQHBhcmFtIGVuY29kaW5nIFRoZSBzdHJpbmcgZW5jb2RpbmcgdXNlZFxuICogQHJldHVybiBBYnNvbHV0ZSBwb3NpdGlvbiBvbiB1aW50OEFycmF5IHdoZXJlIHplcm8gZm91bmRcbiAqL1xuZnVuY3Rpb24gZmluZFplcm8odWludDhBcnJheSwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgICBsZXQgaSA9IHN0YXJ0O1xuICAgIGlmIChlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnKSB7XG4gICAgICAgIHdoaWxlICh1aW50OEFycmF5W2ldICE9PSAwIHx8IHVpbnQ4QXJyYXlbaSArIDFdICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuZDtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdoaWxlICh1aW50OEFycmF5W2ldICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuZDtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaTtcbiAgICB9XG59XG5leHBvcnRzLmZpbmRaZXJvID0gZmluZFplcm87XG5mdW5jdGlvbiB0cmltUmlnaHROdWxsKHgpIHtcbiAgICBjb25zdCBwb3MwID0geC5pbmRleE9mKCdcXDAnKTtcbiAgICByZXR1cm4gcG9zMCA9PT0gLTEgPyB4IDogeC5zdWJzdHIoMCwgcG9zMCk7XG59XG5leHBvcnRzLnRyaW1SaWdodE51bGwgPSB0cmltUmlnaHROdWxsO1xuZnVuY3Rpb24gc3dhcEJ5dGVzKHVpbnQ4QXJyYXkpIHtcbiAgICBjb25zdCBsID0gdWludDhBcnJheS5sZW5ndGg7XG4gICAgaWYgKChsICYgMSkgIT09IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQnVmZmVyIGxlbmd0aCBtdXN0IGJlIGV2ZW4nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgICBjb25zdCBhID0gdWludDhBcnJheVtpXTtcbiAgICAgICAgdWludDhBcnJheVtpXSA9IHVpbnQ4QXJyYXlbaSArIDFdO1xuICAgICAgICB1aW50OEFycmF5W2kgKyAxXSA9IGE7XG4gICAgfVxuICAgIHJldHVybiB1aW50OEFycmF5O1xufVxuLyoqXG4gKiBEZWNvZGUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyh1aW50OEFycmF5LCBlbmNvZGluZykge1xuICAgIC8vIGFubm95aW5nIHdvcmthcm91bmQgZm9yIGEgZG91YmxlIEJPTSBpc3N1ZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sZWV0cmV2ZWlsL211c2ljbWV0YWRhdGEvaXNzdWVzLzg0XG4gICAgaWYgKHVpbnQ4QXJyYXlbMF0gPT09IDB4RkYgJiYgdWludDhBcnJheVsxXSA9PT0gMHhGRSkgeyAvLyBsaXR0bGUgZW5kaWFuXG4gICAgICAgIHJldHVybiBkZWNvZGVTdHJpbmcodWludDhBcnJheS5zdWJhcnJheSgyKSwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnICYmIHVpbnQ4QXJyYXlbMF0gPT09IDB4RkUgJiYgdWludDhBcnJheVsxXSA9PT0gMHhGRikge1xuICAgICAgICAvLyBCT00sIGluZGljYXRpbmcgYmlnIGVuZGlhbiBkZWNvZGluZ1xuICAgICAgICBpZiAoKHVpbnQ4QXJyYXkubGVuZ3RoICYgMSkgIT09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGV2ZW4gbnVtYmVyIG9mIG9jdGV0cyBmb3IgMTYtYml0IHVuaWNvZGUgc3RyaW5nJyk7XG4gICAgICAgIHJldHVybiBkZWNvZGVTdHJpbmcoc3dhcEJ5dGVzKHVpbnQ4QXJyYXkpLCBlbmNvZGluZyk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbSh1aW50OEFycmF5KS50b1N0cmluZyhlbmNvZGluZyk7XG59XG5leHBvcnRzLmRlY29kZVN0cmluZyA9IGRlY29kZVN0cmluZztcbmZ1bmN0aW9uIHN0cmlwTnVsbHMoc3RyKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL15cXHgwMCsvZywgJycpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXHgwMCskL2csICcnKTtcbiAgICByZXR1cm4gc3RyO1xufVxuZXhwb3J0cy5zdHJpcE51bGxzID0gc3RyaXBOdWxscztcbi8qKlxuICogUmVhZCBiaXQtYWxpZ25lZCBudW1iZXIgc3RhcnQgZnJvbSBidWZmZXJcbiAqIFRvdGFsIG9mZnNldCBpbiBiaXRzID0gYnl0ZU9mZnNldCAqIDggKyBiaXRPZmZzZXRcbiAqIEBwYXJhbSBzb3VyY2UgQnl0ZSBidWZmZXJcbiAqIEBwYXJhbSBieXRlT2Zmc2V0IFN0YXJ0aW5nIG9mZnNldCBpbiBieXRlc1xuICogQHBhcmFtIGJpdE9mZnNldCBTdGFydGluZyBvZmZzZXQgaW4gYml0czogMCA9IGxzYlxuICogQHBhcmFtIGxlbiBMZW5ndGggb2YgbnVtYmVyIGluIGJpdHNcbiAqIEByZXR1cm4gRGVjb2RlZCBiaXQgYWxpZ25lZCBudW1iZXJcbiAqL1xuZnVuY3Rpb24gZ2V0Qml0QWxsaWduZWROdW1iZXIoc291cmNlLCBieXRlT2Zmc2V0LCBiaXRPZmZzZXQsIGxlbikge1xuICAgIGNvbnN0IGJ5dGVPZmYgPSBieXRlT2Zmc2V0ICsgfn4oYml0T2Zmc2V0IC8gOCk7XG4gICAgY29uc3QgYml0T2ZmID0gYml0T2Zmc2V0ICUgODtcbiAgICBsZXQgdmFsdWUgPSBzb3VyY2VbYnl0ZU9mZl07XG4gICAgdmFsdWUgJj0gMHhmZiA+PiBiaXRPZmY7XG4gICAgY29uc3QgYml0c1JlYWQgPSA4IC0gYml0T2ZmO1xuICAgIGNvbnN0IGJpdHNMZWZ0ID0gbGVuIC0gYml0c1JlYWQ7XG4gICAgaWYgKGJpdHNMZWZ0IDwgMCkge1xuICAgICAgICB2YWx1ZSA+Pj0gKDggLSBiaXRPZmYgLSBsZW4pO1xuICAgIH1cbiAgICBlbHNlIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgICAgdmFsdWUgPDw9IGJpdHNMZWZ0O1xuICAgICAgICB2YWx1ZSB8PSBnZXRCaXRBbGxpZ25lZE51bWJlcihzb3VyY2UsIGJ5dGVPZmZzZXQsIGJpdE9mZnNldCArIGJpdHNSZWFkLCBiaXRzTGVmdCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydHMuZ2V0Qml0QWxsaWduZWROdW1iZXIgPSBnZXRCaXRBbGxpZ25lZE51bWJlcjtcbi8qKlxuICogUmVhZCBiaXQtYWxpZ25lZCBudW1iZXIgc3RhcnQgZnJvbSBidWZmZXJcbiAqIFRvdGFsIG9mZnNldCBpbiBiaXRzID0gYnl0ZU9mZnNldCAqIDggKyBiaXRPZmZzZXRcbiAqIEBwYXJhbSBzb3VyY2UgQnl0ZSBVaW50OEFycmF5XG4gKiBAcGFyYW0gYnl0ZU9mZnNldCBTdGFydGluZyBvZmZzZXQgaW4gYnl0ZXNcbiAqIEBwYXJhbSBiaXRPZmZzZXQgU3RhcnRpbmcgb2Zmc2V0IGluIGJpdHM6IDAgPSBtb3N0IHNpZ25pZmljYW50IGJpdCwgNyBpcyB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0XG4gKiBAcmV0dXJuIFRydWUgaWYgYml0IGlzIHNldFxuICovXG5mdW5jdGlvbiBpc0JpdFNldChzb3VyY2UsIGJ5dGVPZmZzZXQsIGJpdE9mZnNldCkge1xuICAgIHJldHVybiBnZXRCaXRBbGxpZ25lZE51bWJlcihzb3VyY2UsIGJ5dGVPZmZzZXQsIGJpdE9mZnNldCwgMSkgPT09IDE7XG59XG5leHBvcnRzLmlzQml0U2V0ID0gaXNCaXRTZXQ7XG5mdW5jdGlvbiBhMmhleChzdHIpIHtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgaGV4ID0gTnVtYmVyKHN0ci5jaGFyQ29kZUF0KGkpKS50b1N0cmluZygxNik7XG4gICAgICAgIGFyci5wdXNoKGhleC5sZW5ndGggPT09IDEgPyAnMCcgKyBoZXggOiBoZXgpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyLmpvaW4oJyAnKTtcbn1cbmV4cG9ydHMuYTJoZXggPSBhMmhleDtcbi8qKlxuICogQ29udmVydCBwb3dlciByYXRpbyB0byBEQlxuICogcmF0aW86IFswLi4xXVxuICovXG5mdW5jdGlvbiByYXRpb1RvRGIocmF0aW8pIHtcbiAgICByZXR1cm4gMTAgKiBNYXRoLmxvZzEwKHJhdGlvKTtcbn1cbmV4cG9ydHMucmF0aW9Ub0RiID0gcmF0aW9Ub0RiO1xuLyoqXG4gKiBDb252ZXJ0IGRCIHRvIHJhdGlvXG4gKiBkYiBEZWNpYmVsc1xuICovXG5mdW5jdGlvbiBkYlRvUmF0aW8oZEIpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMTAsIGRCIC8gMTApO1xufVxuZXhwb3J0cy5kYlRvUmF0aW8gPSBkYlRvUmF0aW87XG4vKipcbiAqIENvbnZlcnQgcmVwbGF5IGdhaW4gdG8gcmF0aW8gYW5kIERlY2liZWxcbiAqIEBwYXJhbSB2YWx1ZSBzdHJpbmcgaG9sZGluZyBhIHJhdGlvIGxpa2UgJzAuMDM0JyBvciAnLTcuNTQgZEInXG4gKi9cbmZ1bmN0aW9uIHRvUmF0aW8odmFsdWUpIHtcbiAgICBjb25zdCBwcyA9IHZhbHVlLnNwbGl0KCcgJykubWFwKHAgPT4gcC50cmltKCkudG9Mb3dlckNhc2UoKSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChwcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCB2ID0gcGFyc2VGbG9hdChwc1swXSk7XG4gICAgICAgIHJldHVybiBwcy5sZW5ndGggPT09IDIgJiYgcHNbMV0gPT09ICdkYicgPyB7XG4gICAgICAgICAgICBkQjogdixcbiAgICAgICAgICAgIHJhdGlvOiBkYlRvUmF0aW8odilcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIGRCOiByYXRpb1RvRGIodiksXG4gICAgICAgICAgICByYXRpbzogdlxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMudG9SYXRpbyA9IHRvUmF0aW87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VdGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/common/Util.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/core.js":
/*!*************************************************!*\
  !*** ./node_modules/music-metadata/lib/core.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.scanAppendingHeaders = exports.selectCover = exports.ratingToStars = exports.orderTags = exports.parseFromTokenizer = exports.parseBuffer = exports.parseStream = void 0;\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst ParserFactory_1 = __webpack_require__(/*! ./ParserFactory */ \"./node_modules/music-metadata/lib/ParserFactory.js\");\nconst RandomUint8ArrayReader_1 = __webpack_require__(/*! ./common/RandomUint8ArrayReader */ \"./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ./apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ./id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst Lyrics3_1 = __webpack_require__(/*! ./lyrics3/Lyrics3 */ \"./node_modules/music-metadata/lib/lyrics3/Lyrics3.js\");\n/**\n * Parse audio from Node Stream.Readable\n * @param stream - Stream to read the audio track from\n * @param options - Parsing options\n * @param fileInfo - File information object or MIME-type string\n * @returns Metadata\n */\nfunction parseStream(stream, fileInfo, options = {}) {\n    return parseFromTokenizer(strtok3.fromStream(stream, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo), options);\n}\nexports.parseStream = parseStream;\n/**\n * Parse audio from Node Buffer\n * @param uint8Array - Uint8Array holding audio data\n * @param fileInfo - File information object or MIME-type string\n * @param options - Parsing options\n * @returns Metadata\n * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15\n */\nasync function parseBuffer(uint8Array, fileInfo, options = {}) {\n    const bufferReader = new RandomUint8ArrayReader_1.RandomUint8ArrayReader(uint8Array);\n    await scanAppendingHeaders(bufferReader, options);\n    const tokenizer = strtok3.fromBuffer(uint8Array, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo);\n    return parseFromTokenizer(tokenizer, options);\n}\nexports.parseBuffer = parseBuffer;\n/**\n * Parse audio from ITokenizer source\n * @param tokenizer - Audio source implementing the tokenizer interface\n * @param options - Parsing options\n * @returns Metadata\n */\nfunction parseFromTokenizer(tokenizer, options) {\n    return ParserFactory_1.ParserFactory.parseOnContentType(tokenizer, options);\n}\nexports.parseFromTokenizer = parseFromTokenizer;\n/**\n * Create a dictionary ordered by their tag id (key)\n * @param nativeTags list of tags\n * @returns tags indexed by id\n */\nfunction orderTags(nativeTags) {\n    const tags = {};\n    for (const tag of nativeTags) {\n        (tags[tag.id] = (tags[tag.id] || [])).push(tag.value);\n    }\n    return tags;\n}\nexports.orderTags = orderTags;\n/**\n * Convert rating to 1-5 star rating\n * @param rating: Normalized rating [0..1] (common.rating[n].rating)\n * @returns Number of stars: 1, 2, 3, 4 or 5 stars\n */\nfunction ratingToStars(rating) {\n    return rating === undefined ? 0 : 1 + Math.round(rating * 4);\n}\nexports.ratingToStars = ratingToStars;\n/**\n * Select most likely cover image.\n * @param pictures Usually metadata.common.picture\n * @return Cover image, if any, otherwise null\n */\nfunction selectCover(pictures) {\n    return pictures ? pictures.reduce((acc, cur) => {\n        if (cur.name && cur.name.toLowerCase() in ['front', 'cover', 'cover (front)'])\n            return cur;\n        return acc;\n    }) : null;\n}\nexports.selectCover = selectCover;\nasync function scanAppendingHeaders(randomReader, options = {}) {\n    let apeOffset = randomReader.fileSize;\n    if (await (0, ID3v1Parser_1.hasID3v1Header)(randomReader)) {\n        apeOffset -= 128;\n        const lyricsLen = await (0, Lyrics3_1.getLyricsHeaderLength)(randomReader);\n        apeOffset -= lyricsLen;\n    }\n    options.apeHeader = await APEv2Parser_1.APEv2Parser.findApeFooterOffset(randomReader, apeOffset);\n}\nexports.scanAppendingHeaders = scanAppendingHeaders;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvcmUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsMEJBQTBCLEdBQUcsbUJBQW1CLEdBQUcsbUJBQW1CO0FBQ3ZLLGdCQUFnQixtQkFBTyxDQUFDLDREQUFrQjtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQywyRUFBaUI7QUFDakQsaUNBQWlDLG1CQUFPLENBQUMsMkdBQWlDO0FBQzFFLHNCQUFzQixtQkFBTyxDQUFDLG1GQUFxQjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyxtRkFBcUI7QUFDbkQsa0JBQWtCLG1CQUFPLENBQUMsK0VBQW1CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELDBGQUEwRixxQkFBcUI7QUFDL0c7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0Esc0ZBQXNGLHFCQUFxQjtBQUMzRztBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG1CQUFtQjtBQUNuQiw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvcmUuanM/YTEyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NhbkFwcGVuZGluZ0hlYWRlcnMgPSBleHBvcnRzLnNlbGVjdENvdmVyID0gZXhwb3J0cy5yYXRpbmdUb1N0YXJzID0gZXhwb3J0cy5vcmRlclRhZ3MgPSBleHBvcnRzLnBhcnNlRnJvbVRva2VuaXplciA9IGV4cG9ydHMucGFyc2VCdWZmZXIgPSBleHBvcnRzLnBhcnNlU3RyZWFtID0gdm9pZCAwO1xuY29uc3Qgc3RydG9rMyA9IHJlcXVpcmUoXCJzdHJ0b2szL2xpYi9jb3JlXCIpO1xuY29uc3QgUGFyc2VyRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vUGFyc2VyRmFjdG9yeVwiKTtcbmNvbnN0IFJhbmRvbVVpbnQ4QXJyYXlSZWFkZXJfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9SYW5kb21VaW50OEFycmF5UmVhZGVyXCIpO1xuY29uc3QgQVBFdjJQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL2FwZXYyL0FQRXYyUGFyc2VyXCIpO1xuY29uc3QgSUQzdjFQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL2lkM3YxL0lEM3YxUGFyc2VyXCIpO1xuY29uc3QgTHlyaWNzM18xID0gcmVxdWlyZShcIi4vbHlyaWNzMy9MeXJpY3MzXCIpO1xuLyoqXG4gKiBQYXJzZSBhdWRpbyBmcm9tIE5vZGUgU3RyZWFtLlJlYWRhYmxlXG4gKiBAcGFyYW0gc3RyZWFtIC0gU3RyZWFtIHRvIHJlYWQgdGhlIGF1ZGlvIHRyYWNrIGZyb21cbiAqIEBwYXJhbSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcGFyYW0gZmlsZUluZm8gLSBGaWxlIGluZm9ybWF0aW9uIG9iamVjdCBvciBNSU1FLXR5cGUgc3RyaW5nXG4gKiBAcmV0dXJucyBNZXRhZGF0YVxuICovXG5mdW5jdGlvbiBwYXJzZVN0cmVhbShzdHJlYW0sIGZpbGVJbmZvLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gcGFyc2VGcm9tVG9rZW5pemVyKHN0cnRvazMuZnJvbVN0cmVhbShzdHJlYW0sIHR5cGVvZiBmaWxlSW5mbyA9PT0gJ3N0cmluZycgPyB7IG1pbWVUeXBlOiBmaWxlSW5mbyB9IDogZmlsZUluZm8pLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMucGFyc2VTdHJlYW0gPSBwYXJzZVN0cmVhbTtcbi8qKlxuICogUGFyc2UgYXVkaW8gZnJvbSBOb2RlIEJ1ZmZlclxuICogQHBhcmFtIHVpbnQ4QXJyYXkgLSBVaW50OEFycmF5IGhvbGRpbmcgYXVkaW8gZGF0YVxuICogQHBhcmFtIGZpbGVJbmZvIC0gRmlsZSBpbmZvcm1hdGlvbiBvYmplY3Qgb3IgTUlNRS10eXBlIHN0cmluZ1xuICogQHBhcmFtIG9wdGlvbnMgLSBQYXJzaW5nIG9wdGlvbnNcbiAqIEByZXR1cm5zIE1ldGFkYXRhXG4gKiBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L3N0cnRvazMvYmxvYi9lNjkzOGM4MWZmNjg1MDc0ZDVlYjMwNjRhMTFjMGIwM2NhOTM0YzFkL3NyYy9pbmRleC50cyNMMTVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcGFyc2VCdWZmZXIodWludDhBcnJheSwgZmlsZUluZm8sIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGJ1ZmZlclJlYWRlciA9IG5ldyBSYW5kb21VaW50OEFycmF5UmVhZGVyXzEuUmFuZG9tVWludDhBcnJheVJlYWRlcih1aW50OEFycmF5KTtcbiAgICBhd2FpdCBzY2FuQXBwZW5kaW5nSGVhZGVycyhidWZmZXJSZWFkZXIsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHRva2VuaXplciA9IHN0cnRvazMuZnJvbUJ1ZmZlcih1aW50OEFycmF5LCB0eXBlb2YgZmlsZUluZm8gPT09ICdzdHJpbmcnID8geyBtaW1lVHlwZTogZmlsZUluZm8gfSA6IGZpbGVJbmZvKTtcbiAgICByZXR1cm4gcGFyc2VGcm9tVG9rZW5pemVyKHRva2VuaXplciwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlQnVmZmVyID0gcGFyc2VCdWZmZXI7XG4vKipcbiAqIFBhcnNlIGF1ZGlvIGZyb20gSVRva2VuaXplciBzb3VyY2VcbiAqIEBwYXJhbSB0b2tlbml6ZXIgLSBBdWRpbyBzb3VyY2UgaW1wbGVtZW50aW5nIHRoZSB0b2tlbml6ZXIgaW50ZXJmYWNlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFBhcnNpbmcgb3B0aW9uc1xuICogQHJldHVybnMgTWV0YWRhdGFcbiAqL1xuZnVuY3Rpb24gcGFyc2VGcm9tVG9rZW5pemVyKHRva2VuaXplciwgb3B0aW9ucykge1xuICAgIHJldHVybiBQYXJzZXJGYWN0b3J5XzEuUGFyc2VyRmFjdG9yeS5wYXJzZU9uQ29udGVudFR5cGUodG9rZW5pemVyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMucGFyc2VGcm9tVG9rZW5pemVyID0gcGFyc2VGcm9tVG9rZW5pemVyO1xuLyoqXG4gKiBDcmVhdGUgYSBkaWN0aW9uYXJ5IG9yZGVyZWQgYnkgdGhlaXIgdGFnIGlkIChrZXkpXG4gKiBAcGFyYW0gbmF0aXZlVGFncyBsaXN0IG9mIHRhZ3NcbiAqIEByZXR1cm5zIHRhZ3MgaW5kZXhlZCBieSBpZFxuICovXG5mdW5jdGlvbiBvcmRlclRhZ3MobmF0aXZlVGFncykge1xuICAgIGNvbnN0IHRhZ3MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBuYXRpdmVUYWdzKSB7XG4gICAgICAgICh0YWdzW3RhZy5pZF0gPSAodGFnc1t0YWcuaWRdIHx8IFtdKSkucHVzaCh0YWcudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGFncztcbn1cbmV4cG9ydHMub3JkZXJUYWdzID0gb3JkZXJUYWdzO1xuLyoqXG4gKiBDb252ZXJ0IHJhdGluZyB0byAxLTUgc3RhciByYXRpbmdcbiAqIEBwYXJhbSByYXRpbmc6IE5vcm1hbGl6ZWQgcmF0aW5nIFswLi4xXSAoY29tbW9uLnJhdGluZ1tuXS5yYXRpbmcpXG4gKiBAcmV0dXJucyBOdW1iZXIgb2Ygc3RhcnM6IDEsIDIsIDMsIDQgb3IgNSBzdGFyc1xuICovXG5mdW5jdGlvbiByYXRpbmdUb1N0YXJzKHJhdGluZykge1xuICAgIHJldHVybiByYXRpbmcgPT09IHVuZGVmaW5lZCA/IDAgOiAxICsgTWF0aC5yb3VuZChyYXRpbmcgKiA0KTtcbn1cbmV4cG9ydHMucmF0aW5nVG9TdGFycyA9IHJhdGluZ1RvU3RhcnM7XG4vKipcbiAqIFNlbGVjdCBtb3N0IGxpa2VseSBjb3ZlciBpbWFnZS5cbiAqIEBwYXJhbSBwaWN0dXJlcyBVc3VhbGx5IG1ldGFkYXRhLmNvbW1vbi5waWN0dXJlXG4gKiBAcmV0dXJuIENvdmVyIGltYWdlLCBpZiBhbnksIG90aGVyd2lzZSBudWxsXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdENvdmVyKHBpY3R1cmVzKSB7XG4gICAgcmV0dXJuIHBpY3R1cmVzID8gcGljdHVyZXMucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICBpZiAoY3VyLm5hbWUgJiYgY3VyLm5hbWUudG9Mb3dlckNhc2UoKSBpbiBbJ2Zyb250JywgJ2NvdmVyJywgJ2NvdmVyIChmcm9udCknXSlcbiAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSkgOiBudWxsO1xufVxuZXhwb3J0cy5zZWxlY3RDb3ZlciA9IHNlbGVjdENvdmVyO1xuYXN5bmMgZnVuY3Rpb24gc2NhbkFwcGVuZGluZ0hlYWRlcnMocmFuZG9tUmVhZGVyLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgYXBlT2Zmc2V0ID0gcmFuZG9tUmVhZGVyLmZpbGVTaXplO1xuICAgIGlmIChhd2FpdCAoMCwgSUQzdjFQYXJzZXJfMS5oYXNJRDN2MUhlYWRlcikocmFuZG9tUmVhZGVyKSkge1xuICAgICAgICBhcGVPZmZzZXQgLT0gMTI4O1xuICAgICAgICBjb25zdCBseXJpY3NMZW4gPSBhd2FpdCAoMCwgTHlyaWNzM18xLmdldEx5cmljc0hlYWRlckxlbmd0aCkocmFuZG9tUmVhZGVyKTtcbiAgICAgICAgYXBlT2Zmc2V0IC09IGx5cmljc0xlbjtcbiAgICB9XG4gICAgb3B0aW9ucy5hcGVIZWFkZXIgPSBhd2FpdCBBUEV2MlBhcnNlcl8xLkFQRXYyUGFyc2VyLmZpbmRBcGVGb290ZXJPZmZzZXQocmFuZG9tUmVhZGVyLCBhcGVPZmZzZXQpO1xufVxuZXhwb3J0cy5zY2FuQXBwZW5kaW5nSGVhZGVycyA9IHNjYW5BcHBlbmRpbmdIZWFkZXJzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/core.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DsdiffParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst DsdiffToken_1 = __webpack_require__(/*! ./DsdiffToken */ \"./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:aiff');\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nclass DsdiffParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new Error('Unexpected chunk-ID');\n        const type = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCC_1.FourCcToken.len));\n            default:\n                throw Error(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= DsdiffToken_1.ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(DsdiffToken_1.ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            case 'PROP': // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n                if (propType !== 'SND ')\n                    throw new Error('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCC_1.FourCcToken.len));\n                break;\n            case 'ID3': // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n            case 'DSD':\n                this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                case 'CHNL': // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));\n                    break;\n                case 'CMPR': // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(Token.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                case 'ABSS': // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                case 'LSCO': // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                case 'COMT':\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(DsdiffToken_1.ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= FourCC_1.FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(FourCC_1.FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\nexports.DsdiffParser = DsdiffParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChunkHeader64 = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexports.ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: FourCC_1.FourCcToken.get(buf, off),\n            // Size\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZGlmZi9Ec2RpZmZUb2tlbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDRFQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvZHNkaWZmL0RzZGlmZlRva2VuLmpzPzkyYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNodW5rSGVhZGVyNjQgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IEZvdXJDQ18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9Gb3VyQ0NcIik7XG4vKipcbiAqIERTRElGRiBjaHVuayBoZWFkZXJcbiAqIFRoZSBkYXRhLXNpemUgZW5jb2RpbmcgaXMgZGV2aWF0aW5nIGZyb20gRUEtSUZGIDg1XG4gKiBSZWY6IGh0dHA6Ly93d3cuc29uaWNzdHVkaW8uY29tL3BkZi9kc2QvRFNESUZGXzEuNV9TcGVjLnBkZlxuICovXG5leHBvcnRzLkNodW5rSGVhZGVyNjQgPSB7XG4gICAgbGVuOiAxMixcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gR3JvdXAtSURcbiAgICAgICAgICAgIGNodW5rSUQ6IEZvdXJDQ18xLkZvdXJDY1Rva2VuLmdldChidWYsIG9mZiksXG4gICAgICAgICAgICAvLyBTaXplXG4gICAgICAgICAgICBjaHVua1NpemU6IFRva2VuLklOVDY0X0JFLmdldChidWYsIG9mZiArIDQpXG4gICAgICAgIH07XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsf/DsfChunk.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfChunk.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.ChunkHeader = {\n    len: 12,\n    get: (buf, off) => {\n        return { id: FourCC_1.FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\n    }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.DsdChunk = {\n    len: 16,\n    get: (buf, off) => {\n        return {\n            fileSize: Token.INT64_LE.get(buf, off),\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\n        };\n    }\n};\nvar ChannelType;\n(function (ChannelType) {\n    ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\n    ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\n    ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\n    ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\n    ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\n    ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\n    ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.FormatChunk = {\n    len: 40,\n    get: (buf, off) => {\n        return {\n            formatVersion: Token.INT32_LE.get(buf, off),\n            formatID: Token.INT32_LE.get(buf, off + 4),\n            channelType: Token.INT32_LE.get(buf, off + 8),\n            channelNum: Token.INT32_LE.get(buf, off + 12),\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZi9Ec2ZDaHVuay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxtQkFBbUIsR0FBRyxnQkFBZ0IsR0FBRyxtQkFBbUI7QUFDbEYsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDRFQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QyxtQkFBbUIsS0FBSztBQUNqRTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZi9Ec2ZDaHVuay5qcz9jYTA4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gb3JtYXRDaHVuayA9IGV4cG9ydHMuQ2hhbm5lbFR5cGUgPSBleHBvcnRzLkRzZENodW5rID0gZXhwb3J0cy5DaHVua0hlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgRm91ckNDXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0ZvdXJDQ1wiKTtcbi8qKlxuICogQ29tbW9uIGNodW5rIERTRCBoZWFkZXI6IHRoZSAnY2h1bmsgbmFtZSAoRm91ci1DQyknICYgY2h1bmsgc2l6ZVxuICovXG5leHBvcnRzLkNodW5rSGVhZGVyID0ge1xuICAgIGxlbjogMTIsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgaWQ6IEZvdXJDQ18xLkZvdXJDY1Rva2VuLmdldChidWYsIG9mZiksIHNpemU6IFRva2VuLlVJTlQ2NF9MRS5nZXQoYnVmLCBvZmYgKyA0KSB9O1xuICAgIH1cbn07XG4vKipcbiAqIENvbW1vbiBjaHVuayBEU0QgaGVhZGVyOiB0aGUgJ2NodW5rIG5hbWUgKEZvdXItQ0MpJyAmIGNodW5rIHNpemVcbiAqL1xuZXhwb3J0cy5Ec2RDaHVuayA9IHtcbiAgICBsZW46IDE2LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWxlU2l6ZTogVG9rZW4uSU5UNjRfTEUuZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIG1ldGFkYXRhUG9pbnRlcjogVG9rZW4uSU5UNjRfTEUuZ2V0KGJ1Ziwgb2ZmICsgOClcbiAgICAgICAgfTtcbiAgICB9XG59O1xudmFyIENoYW5uZWxUeXBlO1xuKGZ1bmN0aW9uIChDaGFubmVsVHlwZSkge1xuICAgIENoYW5uZWxUeXBlW0NoYW5uZWxUeXBlW1wibW9ub1wiXSA9IDFdID0gXCJtb25vXCI7XG4gICAgQ2hhbm5lbFR5cGVbQ2hhbm5lbFR5cGVbXCJzdGVyZW9cIl0gPSAyXSA9IFwic3RlcmVvXCI7XG4gICAgQ2hhbm5lbFR5cGVbQ2hhbm5lbFR5cGVbXCJjaGFubmVsc1wiXSA9IDNdID0gXCJjaGFubmVsc1wiO1xuICAgIENoYW5uZWxUeXBlW0NoYW5uZWxUeXBlW1wicXVhZFwiXSA9IDRdID0gXCJxdWFkXCI7XG4gICAgQ2hhbm5lbFR5cGVbQ2hhbm5lbFR5cGVbXCI0IGNoYW5uZWxzXCJdID0gNV0gPSBcIjQgY2hhbm5lbHNcIjtcbiAgICBDaGFubmVsVHlwZVtDaGFubmVsVHlwZVtcIjUgY2hhbm5lbHNcIl0gPSA2XSA9IFwiNSBjaGFubmVsc1wiO1xuICAgIENoYW5uZWxUeXBlW0NoYW5uZWxUeXBlW1wiNS4xIGNoYW5uZWxzXCJdID0gN10gPSBcIjUuMSBjaGFubmVsc1wiO1xufSkoQ2hhbm5lbFR5cGUgPSBleHBvcnRzLkNoYW5uZWxUeXBlIHx8IChleHBvcnRzLkNoYW5uZWxUeXBlID0ge30pKTtcbi8qKlxuICogQ29tbW9uIGNodW5rIERTRCBoZWFkZXI6IHRoZSAnY2h1bmsgbmFtZSAoRm91ci1DQyknICYgY2h1bmsgc2l6ZVxuICovXG5leHBvcnRzLkZvcm1hdENodW5rID0ge1xuICAgIGxlbjogNDAsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdFZlcnNpb246IFRva2VuLklOVDMyX0xFLmdldChidWYsIG9mZiksXG4gICAgICAgICAgICBmb3JtYXRJRDogVG9rZW4uSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgNCksXG4gICAgICAgICAgICBjaGFubmVsVHlwZTogVG9rZW4uSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgOCksXG4gICAgICAgICAgICBjaGFubmVsTnVtOiBUb2tlbi5JTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAxMiksXG4gICAgICAgICAgICBzYW1wbGluZ0ZyZXF1ZW5jeTogVG9rZW4uSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTYpLFxuICAgICAgICAgICAgYml0c1BlclNhbXBsZTogVG9rZW4uSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjApLFxuICAgICAgICAgICAgc2FtcGxlQ291bnQ6IFRva2VuLklOVDY0X0xFLmdldChidWYsIG9mZiArIDI0KSxcbiAgICAgICAgICAgIGJsb2NrU2l6ZVBlckNoYW5uZWw6IFRva2VuLklOVDMyX0xFLmdldChidWYsIG9mZiArIDMyKVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/dsf/DsfChunk.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsf/DsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfParser.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DsfParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst DsfChunk_1 = __webpack_require__(/*! ./DsfChunk */ \"./node_modules/music-metadata/lib/dsf/DsfChunk.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:DSF');\n/**\n * DSF (dsd stream file) File Parser\n * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\n */\nclass DsfParser extends AbstractID3Parser_1.AbstractID3Parser {\n    async postId3v2Parse() {\n        const p0 = this.tokenizer.position; // mark start position, normally 0\n        const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);\n        if (chunkHeader.id !== 'DSD ')\n            throw new Error('Invalid chunk signature');\n        this.metadata.setFormat('container', 'DSF');\n        this.metadata.setFormat('lossless', true);\n        const dsdChunk = await this.tokenizer.readToken(DsfChunk_1.DsdChunk);\n        if (dsdChunk.metadataPointer === BigInt(0)) {\n            debug(`No ID3v2 tag present`);\n        }\n        else {\n            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);\n            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);\n            // Jump to ID3 header\n            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);\n            return new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);\n        }\n    }\n    async parseChunks(bytesRemaining) {\n        while (bytesRemaining >= DsfChunk_1.ChunkHeader.len) {\n            const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);\n            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);\n            switch (chunkHeader.id) {\n                case 'fmt ':\n                    const formatChunk = await this.tokenizer.readToken(DsfChunk_1.FormatChunk);\n                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);\n                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);\n                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);\n                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);\n                    this.metadata.setFormat('duration', Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);\n                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;\n                    this.metadata.setFormat('bitrate', bitrate);\n                    return; // We got what we want, stop further processing of chunks\n                default:\n                    this.tokenizer.ignore(Number(chunkHeader.size) - DsfChunk_1.ChunkHeader.len);\n                    break;\n            }\n            bytesRemaining -= chunkHeader.size;\n        }\n    }\n}\nexports.DsfParser = DsfParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZi9Ec2ZQYXJzZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLDRCQUE0QixtQkFBTyxDQUFDLGdHQUE0QjtBQUNoRSxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBWTtBQUN2QyxzQkFBc0IsbUJBQU8sQ0FBQyxvRkFBc0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMseUJBQXlCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0IsT0FBTyxpQkFBaUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZi9Ec2ZQYXJzZXIuanM/MDdkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHNmUGFyc2VyID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IEFic3RyYWN0SUQzUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vaWQzdjIvQWJzdHJhY3RJRDNQYXJzZXJcIik7XG5jb25zdCBEc2ZDaHVua18xID0gcmVxdWlyZShcIi4vRHNmQ2h1bmtcIik7XG5jb25zdCBJRDN2MlBhcnNlcl8xID0gcmVxdWlyZShcIi4uL2lkM3YyL0lEM3YyUGFyc2VyXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOkRTRicpO1xuLyoqXG4gKiBEU0YgKGRzZCBzdHJlYW0gZmlsZSkgRmlsZSBQYXJzZXJcbiAqIFJlZjogaHR0cHM6Ly9kc2QtZ3VpZGUuY29tL3NpdGVzL2RlZmF1bHQvZmlsZXMvd2hpdGUtcGFwZXJzL0RTRkZpbGVGb3JtYXRTcGVjX0UucGRmXG4gKi9cbmNsYXNzIERzZlBhcnNlciBleHRlbmRzIEFic3RyYWN0SUQzUGFyc2VyXzEuQWJzdHJhY3RJRDNQYXJzZXIge1xuICAgIGFzeW5jIHBvc3RJZDN2MlBhcnNlKCkge1xuICAgICAgICBjb25zdCBwMCA9IHRoaXMudG9rZW5pemVyLnBvc2l0aW9uOyAvLyBtYXJrIHN0YXJ0IHBvc2l0aW9uLCBub3JtYWxseSAwXG4gICAgICAgIGNvbnN0IGNodW5rSGVhZGVyID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKERzZkNodW5rXzEuQ2h1bmtIZWFkZXIpO1xuICAgICAgICBpZiAoY2h1bmtIZWFkZXIuaWQgIT09ICdEU0QgJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaHVuayBzaWduYXR1cmUnKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvbnRhaW5lcicsICdEU0YnKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2xvc3NsZXNzJywgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGRzZENodW5rID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKERzZkNodW5rXzEuRHNkQ2h1bmspO1xuICAgICAgICBpZiAoZHNkQ2h1bmsubWV0YWRhdGFQb2ludGVyID09PSBCaWdJbnQoMCkpIHtcbiAgICAgICAgICAgIGRlYnVnKGBObyBJRDN2MiB0YWcgcHJlc2VudGApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVidWcoYGV4cGVjdCBJRDN2MiBhdCBvZmZzZXQ9JHtkc2RDaHVuay5tZXRhZGF0YVBvaW50ZXJ9YCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBhcnNlQ2h1bmtzKGRzZENodW5rLmZpbGVTaXplIC0gY2h1bmtIZWFkZXIuc2l6ZSk7XG4gICAgICAgICAgICAvLyBKdW1wIHRvIElEMyBoZWFkZXJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShOdW1iZXIoZHNkQ2h1bmsubWV0YWRhdGFQb2ludGVyKSAtIHRoaXMudG9rZW5pemVyLnBvc2l0aW9uIC0gcDApO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJRDN2MlBhcnNlcl8xLklEM3YyUGFyc2VyKCkucGFyc2UodGhpcy5tZXRhZGF0YSwgdGhpcy50b2tlbml6ZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcGFyc2VDaHVua3MoYnl0ZXNSZW1haW5pbmcpIHtcbiAgICAgICAgd2hpbGUgKGJ5dGVzUmVtYWluaW5nID49IERzZkNodW5rXzEuQ2h1bmtIZWFkZXIubGVuKSB7XG4gICAgICAgICAgICBjb25zdCBjaHVua0hlYWRlciA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihEc2ZDaHVua18xLkNodW5rSGVhZGVyKTtcbiAgICAgICAgICAgIGRlYnVnKGBQYXJzaW5nIGNodW5rIG5hbWU9JHtjaHVua0hlYWRlci5pZH0gc2l6ZT0ke2NodW5rSGVhZGVyLnNpemV9YCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNodW5rSGVhZGVyLmlkKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZm10ICc6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdENodW5rID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKERzZkNodW5rXzEuRm9ybWF0Q2h1bmspO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZDaGFubmVscycsIGZvcm1hdENodW5rLmNoYW5uZWxOdW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnc2FtcGxlUmF0ZScsIGZvcm1hdENodW5rLnNhbXBsaW5nRnJlcXVlbmN5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHNQZXJTYW1wbGUnLCBmb3JtYXRDaHVuay5iaXRzUGVyU2FtcGxlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mU2FtcGxlcycsIGZvcm1hdENodW5rLnNhbXBsZUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2R1cmF0aW9uJywgTnVtYmVyKGZvcm1hdENodW5rLnNhbXBsZUNvdW50KSAvIGZvcm1hdENodW5rLnNhbXBsaW5nRnJlcXVlbmN5KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYml0cmF0ZSA9IGZvcm1hdENodW5rLmJpdHNQZXJTYW1wbGUgKiBmb3JtYXRDaHVuay5zYW1wbGluZ0ZyZXF1ZW5jeSAqIGZvcm1hdENodW5rLmNoYW5uZWxOdW07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgYml0cmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gV2UgZ290IHdoYXQgd2Ugd2FudCwgc3RvcCBmdXJ0aGVyIHByb2Nlc3Npbmcgb2YgY2h1bmtzXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuaWdub3JlKE51bWJlcihjaHVua0hlYWRlci5zaXplKSAtIERzZkNodW5rXzEuQ2h1bmtIZWFkZXIubGVuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBieXRlc1JlbWFpbmluZyAtPSBjaHVua0hlYWRlci5zaXplO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ec2ZQYXJzZXIgPSBEc2ZQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/dsf/DsfParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/flac/FlacParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/flac/FlacParser.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FlacParser = void 0;\nconst token_types_1 = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst Vorbis_1 = __webpack_require__(/*! ../ogg/vorbis/Vorbis */ \"./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst VorbisDecoder_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisDecoder */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:FLAC');\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nvar BlockType;\n(function (BlockType) {\n    BlockType[BlockType[\"STREAMINFO\"] = 0] = \"STREAMINFO\";\n    BlockType[BlockType[\"PADDING\"] = 1] = \"PADDING\";\n    BlockType[BlockType[\"APPLICATION\"] = 2] = \"APPLICATION\";\n    BlockType[BlockType[\"SEEKTABLE\"] = 3] = \"SEEKTABLE\";\n    BlockType[BlockType[\"VORBIS_COMMENT\"] = 4] = \"VORBIS_COMMENT\";\n    BlockType[BlockType[\"CUESHEET\"] = 5] = \"CUESHEET\";\n    BlockType[BlockType[\"PICTURE\"] = 6] = \"PICTURE\";\n})(BlockType || (BlockType = {}));\nclass FlacParser extends AbstractID3Parser_1.AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.padding = 0;\n    }\n    /**\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\n     * @param {INativeMetadataCollector} metadata Output\n     * @param {ITokenizer} tokenizer Input\n     * @param {IOptions} options Parsing options\n     */\n    init(metadata, tokenizer, options) {\n        super.init(metadata, tokenizer, options);\n        this.vorbisParser = new VorbisParser_1.VorbisParser(metadata, options);\n        return this;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new Error('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(Metadata.BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case BlockType.STREAMINFO:\n                return this.parseBlockStreamInfo(blockHeader.length);\n            case BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case BlockType.APPLICATION:\n                break;\n            case BlockType.SEEKTABLE:\n                break;\n            case BlockType.VORBIS_COMMENT:\n                return this.parseComment(blockHeader.length);\n            case BlockType.CUESHEET:\n                break;\n            case BlockType.PICTURE:\n                return this.parsePicture(blockHeader.length).then();\n            default:\n                this.metadata.addWarning('Unknown block type: ' + blockHeader.type);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async parseBlockStreamInfo(dataLen) {\n        if (dataLen !== Metadata.BlockStreamInfo.len)\n            throw new Error('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(Metadata.BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(dataLen) {\n        const data = await this.tokenizer.readToken(new token_types_1.Uint8ArrayType(dataLen));\n        const decoder = new VorbisDecoder_1.VorbisDecoder(data, 0);\n        decoder.readStringUtf8(); // vendor (skip)\n        const commentListLength = decoder.readInt32();\n        for (let i = 0; i < commentListLength; i++) {\n            const tag = decoder.parseUserComment();\n            this.vorbisParser.addTag(tag.key, tag.value);\n        }\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        else {\n            const picture = await this.tokenizer.readToken(new Vorbis_1.VorbisPictureToken(dataLen));\n            this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);\n        }\n    }\n}\nexports.FlacParser = FlacParser;\nclass Metadata {\n}\nMetadata.BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: token_types_1.UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nMetadata.BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: token_types_1.UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: token_types_1.UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: token_types_1.UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: token_types_1.UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: token_types_1.UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new token_types_1.Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/flac/FlacParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasID3v1Header = exports.ID3v1Parser = exports.Genres = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst token_types_1 = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ID3v1');\n/**\n * ID3v1 Genre mappings\n * Ref: https://de.wikipedia.org/wiki/Liste_der_ID3v1-Genres\n */\nexports.Genres = [\n    'Blues', 'Classic Rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip-Hop',\n    'Jazz', 'Metal', 'New Age', 'Oldies', 'Other', 'Pop', 'R&B', 'Rap', 'Reggae', 'Rock',\n    'Techno', 'Industrial', 'Alternative', 'Ska', 'Death Metal', 'Pranks', 'Soundtrack',\n    'Euro-Techno', 'Ambient', 'Trip-Hop', 'Vocal', 'Jazz+Funk', 'Fusion', 'Trance',\n    'Classical', 'Instrumental', 'Acid', 'House', 'Game', 'Sound Clip', 'Gospel', 'Noise',\n    'Alt. Rock', 'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental Pop',\n    'Instrumental Rock', 'Ethnic', 'Gothic', 'Darkwave', 'Techno-Industrial',\n    'Electronic', 'Pop-Folk', 'Eurodance', 'Dream', 'Southern Rock', 'Comedy', 'Cult',\n    'Gangsta Rap', 'Top 40', 'Christian Rap', 'Pop/Funk', 'Jungle', 'Native American',\n    'Cabaret', 'New Wave', 'Psychedelic', 'Rave', 'Showtunes', 'Trailer', 'Lo-Fi', 'Tribal',\n    'Acid Punk', 'Acid Jazz', 'Polka', 'Retro', 'Musical', 'Rock & Roll', 'Hard Rock',\n    'Folk', 'Folk/Rock', 'National Folk', 'Swing', 'Fast-Fusion', 'Bebob', 'Latin', 'Revival',\n    'Celtic', 'Bluegrass', 'Avantgarde', 'Gothic Rock', 'Progressive Rock', 'Psychedelic Rock',\n    'Symphonic Rock', 'Slow Rock', 'Big Band', 'Chorus', 'Easy Listening', 'Acoustic', 'Humour',\n    'Speech', 'Chanson', 'Opera', 'Chamber Music', 'Sonata', 'Symphony', 'Booty Bass', 'Primus',\n    'Porn Groove', 'Satire', 'Slow Jam', 'Club', 'Tango', 'Samba', 'Folklore',\n    'Ballad', 'Power Ballad', 'Rhythmic Soul', 'Freestyle', 'Duet', 'Punk Rock', 'Drum Solo',\n    'A Cappella', 'Euro-House', 'Dance Hall', 'Goa', 'Drum & Bass', 'Club-House',\n    'Hardcore', 'Terror', 'Indie', 'BritPop', 'Negerpunk', 'Polsk Punk', 'Beat',\n    'Christian Gangsta Rap', 'Heavy Metal', 'Black Metal', 'Crossover', 'Contemporary Christian',\n    'Christian Rock', 'Merengue', 'Salsa', 'Thrash Metal', 'Anime', 'JPop', 'Synthpop',\n    'Abstract', 'Art Rock', 'Baroque', 'Bhangra', 'Big Beat', 'Breakbeat', 'Chillout',\n    'Downtempo', 'Dub', 'EBM', 'Eclectic', 'Electro', 'Electroclash', 'Emo', 'Experimental',\n    'Garage', 'Global', 'IDM', 'Illbient', 'Industro-Goth', 'Jam Band', 'Krautrock',\n    'Leftfield', 'Lounge', 'Math Rock', 'New Romantic', 'Nu-Breakz', 'Post-Punk', 'Post-Rock',\n    'Psytrance', 'Shoegaze', 'Space Rock', 'Trop Rock', 'World Music', 'Neoclassical', 'Audiobook',\n    'Audio Theatre', 'Neue Deutsche Welle', 'Podcast', 'Indie Rock', 'G-Funk', 'Dubstep',\n    'Garage Rock', 'Psybient'\n];\n/**\n * Spec: http://id3.org/ID3v1\n * Wiki: https://en.wikipedia.org/wiki/ID3\n */\nconst Iid3v1Token = {\n    len: 128,\n    /**\n     * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header\n     * @param off Offset in buffer in bytes\n     * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned\n     */\n    get: (buf, off) => {\n        const header = new Id3v1StringType(3).get(buf, off);\n        return header === 'TAG' ? {\n            header,\n            title: new Id3v1StringType(30).get(buf, off + 3),\n            artist: new Id3v1StringType(30).get(buf, off + 33),\n            album: new Id3v1StringType(30).get(buf, off + 63),\n            year: new Id3v1StringType(4).get(buf, off + 93),\n            comment: new Id3v1StringType(28).get(buf, off + 97),\n            // ID3v1.1 separator for track\n            zeroByte: token_types_1.UINT8.get(buf, off + 127),\n            // track: ID3v1.1 field added by Michael Mutschler\n            track: token_types_1.UINT8.get(buf, off + 126),\n            genre: token_types_1.UINT8.get(buf, off + 127)\n        } : null;\n    }\n};\nclass Id3v1StringType extends token_types_1.StringType {\n    constructor(len) {\n        super(len, 'binary');\n    }\n    get(buf, off) {\n        let value = super.get(buf, off);\n        value = util.trimRightNull(value);\n        value = value.trim();\n        return value.length > 0 ? value : undefined;\n    }\n}\nclass ID3v1Parser extends BasicParser_1.BasicParser {\n    static getGenre(genreIndex) {\n        if (genreIndex < exports.Genres.length) {\n            return exports.Genres[genreIndex];\n        }\n        return undefined; // ToDO: generate warning\n    }\n    async parse() {\n        if (!this.tokenizer.fileInfo.size) {\n            debug('Skip checking for ID3v1 because the file-size is unknown');\n            return;\n        }\n        if (this.options.apeHeader) {\n            this.tokenizer.ignore(this.options.apeHeader.offset - this.tokenizer.position);\n            const apeParser = new APEv2Parser_1.APEv2Parser();\n            apeParser.init(this.metadata, this.tokenizer, this.options);\n            await apeParser.parseTags(this.options.apeHeader.footer);\n        }\n        const offset = this.tokenizer.fileInfo.size - Iid3v1Token.len;\n        if (this.tokenizer.position > offset) {\n            debug('Already consumed the last 128 bytes');\n            return;\n        }\n        const header = await this.tokenizer.readToken(Iid3v1Token, offset);\n        if (header) {\n            debug('ID3v1 header found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);\n            for (const id of ['title', 'artist', 'album', 'comment', 'track', 'year']) {\n                if (header[id] && header[id] !== '')\n                    this.addTag(id, header[id]);\n            }\n            const genre = ID3v1Parser.getGenre(header.genre);\n            if (genre)\n                this.addTag('genre', genre);\n        }\n        else {\n            debug('ID3v1 header not found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('ID3v1', id, value);\n    }\n}\nexports.ID3v1Parser = ID3v1Parser;\nasync function hasID3v1Header(reader) {\n    if (reader.fileSize >= 128) {\n        const tag = Buffer.alloc(3);\n        await reader.randomRead(tag, 0, tag.length, reader.fileSize - 128);\n        return tag.toString('binary') === 'TAG';\n    }\n    return false;\n}\nexports.hasID3v1Header = hasID3v1Header;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v1TagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * ID3v1 tag mappings\n */\nconst id3v1TagMap = {\n    title: 'title',\n    artist: 'artist',\n    album: 'album',\n    year: 'year',\n    comment: 'comment',\n    track: 'track',\n    genre: 'genre'\n};\nclass ID3v1TagMapper extends GenericTagMapper_1.CommonTagMapper {\n    constructor() {\n        super(['ID3v1'], id3v1TagMap);\n    }\n}\nexports.ID3v1TagMapper = ID3v1TagMapper;\n//# sourceMappingURL=ID3v1TagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YxL0lEM3YxVGFnTWFwLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QiwyQkFBMkIsbUJBQU8sQ0FBQyxnR0FBNEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YxL0lEM3YxVGFnTWFwLmpzP2I4YjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklEM3YxVGFnTWFwcGVyID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyXCIpO1xuLyoqXG4gKiBJRDN2MSB0YWcgbWFwcGluZ3NcbiAqL1xuY29uc3QgaWQzdjFUYWdNYXAgPSB7XG4gICAgdGl0bGU6ICd0aXRsZScsXG4gICAgYXJ0aXN0OiAnYXJ0aXN0JyxcbiAgICBhbGJ1bTogJ2FsYnVtJyxcbiAgICB5ZWFyOiAneWVhcicsXG4gICAgY29tbWVudDogJ2NvbW1lbnQnLFxuICAgIHRyYWNrOiAndHJhY2snLFxuICAgIGdlbnJlOiAnZ2VucmUnXG59O1xuY2xhc3MgSUQzdjFUYWdNYXBwZXIgZXh0ZW5kcyBHZW5lcmljVGFnTWFwcGVyXzEuQ29tbW9uVGFnTWFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoWydJRDN2MSddLCBpZDN2MVRhZ01hcCk7XG4gICAgfVxufVxuZXhwb3J0cy5JRDN2MVRhZ01hcHBlciA9IElEM3YxVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUQzdjFUYWdNYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractID3Parser = void 0;\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ./ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser_1.ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                debug(`End-of-stream`);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\n            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\nexports.AbstractID3Parser = AbstractID3Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0Fic3RyYWN0SUQzUGFyc2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixlQUFlLG1CQUFPLENBQUMsNERBQWtCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLDJFQUFjO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLDZFQUFlO0FBQzdDLHNCQUFzQixtQkFBTyxDQUFDLG9GQUFzQjtBQUNwRCxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0Fic3RyYWN0SUQzUGFyc2VyLmpzP2E2NDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic3RyYWN0SUQzUGFyc2VyID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcInN0cnRvazMvbGliL2NvcmVcIik7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgSUQzdjJUb2tlbl8xID0gcmVxdWlyZShcIi4vSUQzdjJUb2tlblwiKTtcbmNvbnN0IElEM3YyUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9JRDN2MlBhcnNlclwiKTtcbmNvbnN0IElEM3YxUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vaWQzdjEvSUQzdjFQYXJzZXJcIik7XG5jb25zdCBCYXNpY1BhcnNlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9CYXNpY1BhcnNlclwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpJRDMnKTtcbi8qKlxuICogQWJzdHJhY3QgcGFyc2VyIHdoaWNoIHRyaWVzIHRha2UgSUQzdjIgYW5kIElEM3YxIGhlYWRlcnMuXG4gKi9cbmNsYXNzIEFic3RyYWN0SUQzUGFyc2VyIGV4dGVuZHMgQmFzaWNQYXJzZXJfMS5CYXNpY1BhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaWQzcGFyc2VyID0gbmV3IElEM3YyUGFyc2VyXzEuSUQzdjJQYXJzZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIHN0YXJ0c1dpdGhJRDN2MkhlYWRlcih0b2tlbml6ZXIpIHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0b2tlbml6ZXIucGVla1Rva2VuKElEM3YyVG9rZW5fMS5JRDN2MkhlYWRlcikpLmZpbGVJZGVudGlmaWVyID09PSAnSUQzJztcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBhcnNlSUQzdjIoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgY29yZV8xLkVuZE9mU3RyZWFtRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhgRW5kLW9mLXN0cmVhbWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsaXplKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlSUQzdjIoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudHJ5UmVhZElkM3YySGVhZGVycygpO1xuICAgICAgICBkZWJ1ZygnRW5kIG9mIElEM3YyIGhlYWRlciwgZ28gdG8gTVBFRy1wYXJzZXI6IHBvcz0lcycsIHRoaXMudG9rZW5pemVyLnBvc2l0aW9uKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wb3N0SWQzdjJQYXJzZSgpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNraXBQb3N0SGVhZGVycyAmJiB0aGlzLm1ldGFkYXRhLmhhc0FueSgpKSB7XG4gICAgICAgICAgICB0aGlzLmZpbmFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpZDN2MXBhcnNlciA9IG5ldyBJRDN2MVBhcnNlcl8xLklEM3YxUGFyc2VyKCk7XG4gICAgICAgICAgICBhd2FpdCBpZDN2MXBhcnNlci5pbml0KHRoaXMubWV0YWRhdGEsIHRoaXMudG9rZW5pemVyLCB0aGlzLm9wdGlvbnMpLnBhcnNlKCk7XG4gICAgICAgICAgICB0aGlzLmZpbmFsaXplKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdHJ5UmVhZElkM3YySGVhZGVycygpIHtcbiAgICAgICAgY29uc3QgaWQzSGVhZGVyID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucGVla1Rva2VuKElEM3YyVG9rZW5fMS5JRDN2MkhlYWRlcik7XG4gICAgICAgIGlmIChpZDNIZWFkZXIuZmlsZUlkZW50aWZpZXIgPT09ICdJRDMnKSB7XG4gICAgICAgICAgICBkZWJ1ZygnRm91bmQgSUQzdjIgaGVhZGVyLCBwb3M9JXMnLCB0aGlzLnRva2VuaXplci5wb3NpdGlvbik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmlkM3BhcnNlci5wYXJzZSh0aGlzLm1ldGFkYXRhLCB0aGlzLnRva2VuaXplciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyeVJlYWRJZDN2MkhlYWRlcnMoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RJRDNQYXJzZXIgPSBBYnN0cmFjdElEM1BhcnNlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/FrameParser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/FrameParser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FrameParser = exports.parseGenre = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nfunction parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = ID3v1Parser_1.Genres[word];\n        }\n        genres.push(word);\n    }\n    return genres;\n}\nexports.parseGenre = parseGenre;\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return ID3v1Parser_1.Genres[code];\n    }\n}\nclass FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = ID3v2Token_1.TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        const out = {};\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST':\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.slice(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = this.splitValue(type, text);\n                        output = FrameParser.functionList(output);\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            case 'TXXX':\n                output = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                output = {\n                    description: output.id,\n                    text: this.splitValue(type, util.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\n                };\n                break;\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = ID3v2Token_1.AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = Buffer.from(uint8Array.slice(offset, length));\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = Token.UINT32_BE.get(uint8Array, 0);\n                break;\n            case 'SYLT':\n                // skip text encoding (1 byte),\n                //      language (3 bytes),\n                //      time stamp format (1 byte),\n                //      content tagTypes (1 byte),\n                //      content descriptor (1 byte)\n                offset += 7;\n                output = [];\n                while (offset < length) {\n                    const txt = uint8Array.slice(offset, offset = util.findZero(uint8Array, offset, length, encoding));\n                    offset += 5; // push offset forward one +  4 byte timestamp\n                    output.push(util.decodeString(txt, encoding));\n                }\n                break;\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM':\n                offset += 1;\n                out.language = util.decodeString(uint8Array.slice(offset, offset + 3), defaultEnc);\n                offset += 3;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                out.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                offset = fzero + nullTerminatorLength;\n                out.text = util.decodeString(uint8Array.slice(offset, length), encoding).replace(/\\x00+$/, '');\n                output = [out];\n                break;\n            case 'UFID':\n                output = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: output.id, identifier: output.data };\n                break;\n            case 'PRIV': // private frame\n                output = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: output.id, data: output.data };\n                break;\n            case 'POPM': // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: dataLen >= 5 ? Token.UINT32_BE.get(uint8Array, offset + 1) : undefined\n                };\n                break;\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length - offset, encoding);\n                const filename = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length - offset, encoding);\n                const description = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                output = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.slice(offset + 1, length)\n                };\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                output = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.slice(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.slice(0, length);\n                break;\n            }\n            default:\n                debug('Warning: unsupported id3v2-tag-type: ' + type);\n                break;\n        }\n        return output;\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf16le' ? 2 : 1;\n    }\n}\nexports.FrameParser = FrameParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v2/FrameParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v22TagMapper = exports.id3v22TagMap = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * ID3v2.2 tag mappings\n */\nexports.id3v22TagMap = {\n    TT2: 'title',\n    TP1: 'artist',\n    TP2: 'albumartist',\n    TAL: 'album',\n    TYE: 'year',\n    COM: 'comment',\n    TRK: 'track',\n    TPA: 'disk',\n    TCO: 'genre',\n    PIC: 'picture',\n    TCM: 'composer',\n    TOR: 'originaldate',\n    TOT: 'originalalbum',\n    TXT: 'lyricist',\n    TP3: 'conductor',\n    TPB: 'label',\n    TT1: 'grouping',\n    TT3: 'subtitle',\n    TLA: 'language',\n    TCR: 'copyright',\n    WCP: 'license',\n    TEN: 'encodedby',\n    TSS: 'encodersettings',\n    WAR: 'website',\n    'COM:iTunPGAP': 'gapless'\n    /* ToDo: iTunes tags:\n    'COM:iTunNORM': ,\n    'COM:iTunSMPB': 'encoder delay',\n    'COM:iTunes_CDDB_IDs'\n    */ ,\n    PCS: 'podcast',\n    TCP: \"compilation\",\n    TDR: 'date',\n    TS2: 'albumartistsort',\n    TSA: 'albumsort',\n    TSC: 'composersort',\n    TSP: 'artistsort',\n    TST: 'titlesort',\n    WFD: 'podcasturl',\n    TBP: 'bpm'\n};\nclass ID3v22TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super(['ID3v2.2'], exports.id3v22TagMap);\n    }\n}\nexports.ID3v22TagMapper = ID3v22TagMapper;\n//# sourceMappingURL=ID3v22TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0lEM3YyMlRhZ01hcHBlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxvQkFBb0I7QUFDOUMsZ0NBQWdDLG1CQUFPLENBQUMsMEdBQWlDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0lEM3YyMlRhZ01hcHBlci5qcz84MmVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JRDN2MjJUYWdNYXBwZXIgPSBleHBvcnRzLmlkM3YyMlRhZ01hcCA9IHZvaWQgMDtcbmNvbnN0IENhc2VJbnNlbnNpdGl2ZVRhZ01hcF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9DYXNlSW5zZW5zaXRpdmVUYWdNYXBcIik7XG4vKipcbiAqIElEM3YyLjIgdGFnIG1hcHBpbmdzXG4gKi9cbmV4cG9ydHMuaWQzdjIyVGFnTWFwID0ge1xuICAgIFRUMjogJ3RpdGxlJyxcbiAgICBUUDE6ICdhcnRpc3QnLFxuICAgIFRQMjogJ2FsYnVtYXJ0aXN0JyxcbiAgICBUQUw6ICdhbGJ1bScsXG4gICAgVFlFOiAneWVhcicsXG4gICAgQ09NOiAnY29tbWVudCcsXG4gICAgVFJLOiAndHJhY2snLFxuICAgIFRQQTogJ2Rpc2snLFxuICAgIFRDTzogJ2dlbnJlJyxcbiAgICBQSUM6ICdwaWN0dXJlJyxcbiAgICBUQ006ICdjb21wb3NlcicsXG4gICAgVE9SOiAnb3JpZ2luYWxkYXRlJyxcbiAgICBUT1Q6ICdvcmlnaW5hbGFsYnVtJyxcbiAgICBUWFQ6ICdseXJpY2lzdCcsXG4gICAgVFAzOiAnY29uZHVjdG9yJyxcbiAgICBUUEI6ICdsYWJlbCcsXG4gICAgVFQxOiAnZ3JvdXBpbmcnLFxuICAgIFRUMzogJ3N1YnRpdGxlJyxcbiAgICBUTEE6ICdsYW5ndWFnZScsXG4gICAgVENSOiAnY29weXJpZ2h0JyxcbiAgICBXQ1A6ICdsaWNlbnNlJyxcbiAgICBURU46ICdlbmNvZGVkYnknLFxuICAgIFRTUzogJ2VuY29kZXJzZXR0aW5ncycsXG4gICAgV0FSOiAnd2Vic2l0ZScsXG4gICAgJ0NPTTppVHVuUEdBUCc6ICdnYXBsZXNzJ1xuICAgIC8qIFRvRG86IGlUdW5lcyB0YWdzOlxuICAgICdDT006aVR1bk5PUk0nOiAsXG4gICAgJ0NPTTppVHVuU01QQic6ICdlbmNvZGVyIGRlbGF5JyxcbiAgICAnQ09NOmlUdW5lc19DRERCX0lEcydcbiAgICAqLyAsXG4gICAgUENTOiAncG9kY2FzdCcsXG4gICAgVENQOiBcImNvbXBpbGF0aW9uXCIsXG4gICAgVERSOiAnZGF0ZScsXG4gICAgVFMyOiAnYWxidW1hcnRpc3Rzb3J0JyxcbiAgICBUU0E6ICdhbGJ1bXNvcnQnLFxuICAgIFRTQzogJ2NvbXBvc2Vyc29ydCcsXG4gICAgVFNQOiAnYXJ0aXN0c29ydCcsXG4gICAgVFNUOiAndGl0bGVzb3J0JyxcbiAgICBXRkQ6ICdwb2RjYXN0dXJsJyxcbiAgICBUQlA6ICdicG0nXG59O1xuY2xhc3MgSUQzdjIyVGFnTWFwcGVyIGV4dGVuZHMgQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXzEuQ2FzZUluc2Vuc2l0aXZlVGFnTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoWydJRDN2Mi4yJ10sIGV4cG9ydHMuaWQzdjIyVGFnTWFwKTtcbiAgICB9XG59XG5leHBvcnRzLklEM3YyMlRhZ01hcHBlciA9IElEM3YyMlRhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlEM3YyMlRhZ01hcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v24TagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * ID3v2.3/ID3v2.4 tag mappings\n */\nconst id3v24TagMap = {\n    // id3v2.3\n    TIT2: 'title',\n    TPE1: 'artist',\n    'TXXX:Artists': 'artists',\n    TPE2: 'albumartist',\n    TALB: 'album',\n    TDRV: 'date',\n    /**\n     * Original release year\n     */\n    TORY: 'originalyear',\n    TPOS: 'disk',\n    TCON: 'genre',\n    APIC: 'picture',\n    TCOM: 'composer',\n    'USLT:description': 'lyrics',\n    TSOA: 'albumsort',\n    TSOT: 'titlesort',\n    TOAL: 'originalalbum',\n    TSOP: 'artistsort',\n    TSO2: 'albumartistsort',\n    TSOC: 'composersort',\n    TEXT: 'lyricist',\n    'TXXX:Writer': 'writer',\n    TPE3: 'conductor',\n    // 'IPLS:instrument': 'performer:instrument', // ToDo\n    TPE4: 'remixer',\n    'IPLS:arranger': 'arranger',\n    'IPLS:engineer': 'engineer',\n    'IPLS:producer': 'producer',\n    'IPLS:DJ-mix': 'djmixer',\n    'IPLS:mix': 'mixer',\n    TPUB: 'label',\n    TIT1: 'grouping',\n    TIT3: 'subtitle',\n    TRCK: 'track',\n    TCMP: 'compilation',\n    POPM: 'rating',\n    TBPM: 'bpm',\n    TMED: 'media',\n    'TXXX:CATALOGNUMBER': 'catalognumber',\n    'TXXX:MusicBrainz Album Status': 'releasestatus',\n    'TXXX:MusicBrainz Album Type': 'releasetype',\n    /**\n     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0\n     */\n    'TXXX:MusicBrainz Album Release Country': 'releasecountry',\n    /**\n     * Release country as implemented // ToDo: report\n     */\n    'TXXX:RELEASECOUNTRY': 'releasecountry',\n    'TXXX:SCRIPT': 'script',\n    TLAN: 'language',\n    TCOP: 'copyright',\n    WCOP: 'license',\n    TENC: 'encodedby',\n    TSSE: 'encodersettings',\n    'TXXX:BARCODE': 'barcode',\n    'TXXX:ISRC': 'isrc',\n    TSRC: 'isrc',\n    'TXXX:ASIN': 'asin',\n    'TXXX:originalyear': 'originalyear',\n    'UFID:http://musicbrainz.org': 'musicbrainz_recordingid',\n    'TXXX:MusicBrainz Release Track Id': 'musicbrainz_trackid',\n    'TXXX:MusicBrainz Album Id': 'musicbrainz_albumid',\n    'TXXX:MusicBrainz Artist Id': 'musicbrainz_artistid',\n    'TXXX:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\n    'TXXX:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\n    'TXXX:MusicBrainz Work Id': 'musicbrainz_workid',\n    'TXXX:MusicBrainz TRM Id': 'musicbrainz_trmid',\n    'TXXX:MusicBrainz Disc Id': 'musicbrainz_discid',\n    'TXXX:ACOUSTID_ID': 'acoustid_id',\n    'TXXX:Acoustid Id': 'acoustid_id',\n    'TXXX:Acoustid Fingerprint': 'acoustid_fingerprint',\n    'TXXX:MusicIP PUID': 'musicip_puid',\n    'TXXX:MusicMagic Fingerprint': 'musicip_fingerprint',\n    WOAR: 'website',\n    // id3v2.4\n    // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames\n    TDRC: 'date',\n    TYER: 'year',\n    TDOR: 'originaldate',\n    // 'TMCL:instrument': 'performer:instrument',\n    'TIPL:arranger': 'arranger',\n    'TIPL:engineer': 'engineer',\n    'TIPL:producer': 'producer',\n    'TIPL:DJ-mix': 'djmixer',\n    'TIPL:mix': 'mixer',\n    TMOO: 'mood',\n    // additional mappings:\n    SYLT: 'lyrics',\n    TSST: 'discsubtitle',\n    TKEY: 'key',\n    COMM: 'comment',\n    TOPE: 'originalartist',\n    // Windows Media Player\n    'PRIV:AverageLevel': 'averageLevel',\n    'PRIV:PeakLevel': 'peakLevel',\n    // Discogs\n    'TXXX:DISCOGS_ARTIST_ID': 'discogs_artist_id',\n    'TXXX:DISCOGS_ARTISTS': 'artists',\n    'TXXX:DISCOGS_ARTIST_NAME': 'artists',\n    'TXXX:DISCOGS_ALBUM_ARTISTS': 'albumartist',\n    'TXXX:DISCOGS_CATALOG': 'catalognumber',\n    'TXXX:DISCOGS_COUNTRY': 'releasecountry',\n    'TXXX:DISCOGS_DATE': 'originaldate',\n    'TXXX:DISCOGS_LABEL': 'label',\n    'TXXX:DISCOGS_LABEL_ID': 'discogs_label_id',\n    'TXXX:DISCOGS_MASTER_RELEASE_ID': 'discogs_master_release_id',\n    'TXXX:DISCOGS_RATING': 'discogs_rating',\n    'TXXX:DISCOGS_RELEASED': 'date',\n    'TXXX:DISCOGS_RELEASE_ID': 'discogs_release_id',\n    'TXXX:DISCOGS_VOTES': 'discogs_votes',\n    'TXXX:CATALOGID': 'catalognumber',\n    'TXXX:STYLE': 'genre',\n    'TXXX:REPLAYGAIN_TRACK_PEAK': 'replaygain_track_peak',\n    'TXXX:REPLAYGAIN_TRACK_GAIN': 'replaygain_track_gain',\n    'TXXX:REPLAYGAIN_ALBUM_PEAK': 'replaygain_album_peak',\n    'TXXX:REPLAYGAIN_ALBUM_GAIN': 'replaygain_album_gain',\n    'TXXX:MP3GAIN_MINMAX': 'replaygain_track_minmax',\n    'TXXX:MP3GAIN_ALBUM_MINMAX': 'replaygain_album_minmax',\n    'TXXX:MP3GAIN_UNDO': 'replaygain_undo',\n    MVNM: 'movement',\n    MVIN: 'movementIndex',\n    PCST: 'podcast',\n    TCAT: 'category',\n    TDES: 'description',\n    TDRL: 'date',\n    TGID: 'podcastId',\n    TKWD: 'keywords',\n    WFED: 'podcasturl'\n};\nclass ID3v24TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    static toRating(popm) {\n        return {\n            source: popm.email,\n            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * GenericTagMapper_1.CommonTagMapper.maxRatingScore : undefined\n        };\n    }\n    constructor() {\n        super(['ID3v2.3', 'ID3v2.4'], id3v24TagMap);\n    }\n    /**\n     * Handle post mapping exceptions / correction\n     * @param tag to post map\n     * @param warnings Wil be used to register (collect) warnings\n     * @return Common value e.g. \"Buena Vista Social Club\"\n     */\n    postMap(tag, warnings) {\n        switch (tag.id) {\n            case 'UFID': // decode MusicBrainz Recording Id\n                if (tag.value.owner_identifier === 'http://musicbrainz.org') {\n                    tag.id += ':' + tag.value.owner_identifier;\n                    tag.value = util.decodeString(tag.value.identifier, 'latin1'); // latin1 == iso-8859-1\n                }\n                break;\n            case 'PRIV':\n                switch (tag.value.owner_identifier) {\n                    // decode Windows Media Player\n                    case 'AverageLevel':\n                    case 'PeakValue':\n                        tag.id += ':' + tag.value.owner_identifier;\n                        tag.value = tag.value.data.length === 4 ? tag.value.data.readUInt32LE(0) : null;\n                        if (tag.value === null) {\n                            warnings.addWarning(`Failed to parse PRIV:PeakValue`);\n                        }\n                        break;\n                    default:\n                        warnings.addWarning(`Unknown PRIV owner-identifier: ${tag.value.owner_identifier}`);\n                }\n                break;\n            case 'COMM':\n                tag.value = tag.value ? tag.value.text : null;\n                break;\n            case 'POPM':\n                tag.value = ID3v24TagMapper.toRating(tag.value);\n                break;\n            default:\n                break;\n        }\n    }\n}\nexports.ID3v24TagMapper = ID3v24TagMapper;\n//# sourceMappingURL=ID3v24TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v2Parser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst FrameParser_1 = __webpack_require__(/*! ./FrameParser */ \"./node_modules/music-metadata/lib/id3v2/FrameParser.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\nclass ID3v2Parser {\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw new Error('header versionIndex is incorrect');\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? ':' + description : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = ('ID3v2.' + id3Header.version.major);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            if (tag.id === 'TXXX') {\n                if (tag.value) {\n                    for (const text of tag.value.text) {\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n                    }\n                }\n            }\n            else if (tag.id === 'COM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n                }\n            }\n            else if (tag.id === 'COMM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n                }\n            }\n            else if (Array.isArray(tag.value)) {\n                for (const value of tag.value) {\n                    this.addTag(tag.id, value);\n                }\n            }\n            else {\n                this.addTag(tag.id, tag.value);\n            }\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: Buffer.from(uint8Array.slice(0, 3)).toString('ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: Buffer.from(uint8Array.slice(0, 4)).toString('ascii'),\n                    length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n        return header;\n    }\n}\nexports.ID3v2Parser = ID3v2Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/ID3v2Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v2Token.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextEncodingToken = exports.ExtendedHeader = exports.ID3v2Header = exports.UINT32SYNCSAFE = exports.AttachedPictureType = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * The picture type according to the ID3v2 APIC frame\n * Ref: http://id3.org/id3v2.3.0#Attached_picture\n */\nvar AttachedPictureType;\n(function (AttachedPictureType) {\n    AttachedPictureType[AttachedPictureType[\"Other\"] = 0] = \"Other\";\n    AttachedPictureType[AttachedPictureType[\"32x32 pixels 'file icon' (PNG only)\"] = 1] = \"32x32 pixels 'file icon' (PNG only)\";\n    AttachedPictureType[AttachedPictureType[\"Other file icon\"] = 2] = \"Other file icon\";\n    AttachedPictureType[AttachedPictureType[\"Cover (front)\"] = 3] = \"Cover (front)\";\n    AttachedPictureType[AttachedPictureType[\"Cover (back)\"] = 4] = \"Cover (back)\";\n    AttachedPictureType[AttachedPictureType[\"Leaflet page\"] = 5] = \"Leaflet page\";\n    AttachedPictureType[AttachedPictureType[\"Media (e.g. label side of CD)\"] = 6] = \"Media (e.g. label side of CD)\";\n    AttachedPictureType[AttachedPictureType[\"Lead artist/lead performer/soloist\"] = 7] = \"Lead artist/lead performer/soloist\";\n    AttachedPictureType[AttachedPictureType[\"Artist/performer\"] = 8] = \"Artist/performer\";\n    AttachedPictureType[AttachedPictureType[\"Conductor\"] = 9] = \"Conductor\";\n    AttachedPictureType[AttachedPictureType[\"Band/Orchestra\"] = 10] = \"Band/Orchestra\";\n    AttachedPictureType[AttachedPictureType[\"Composer\"] = 11] = \"Composer\";\n    AttachedPictureType[AttachedPictureType[\"Lyricist/text writer\"] = 12] = \"Lyricist/text writer\";\n    AttachedPictureType[AttachedPictureType[\"Recording Location\"] = 13] = \"Recording Location\";\n    AttachedPictureType[AttachedPictureType[\"During recording\"] = 14] = \"During recording\";\n    AttachedPictureType[AttachedPictureType[\"During performance\"] = 15] = \"During performance\";\n    AttachedPictureType[AttachedPictureType[\"Movie/video screen capture\"] = 16] = \"Movie/video screen capture\";\n    AttachedPictureType[AttachedPictureType[\"A bright coloured fish\"] = 17] = \"A bright coloured fish\";\n    AttachedPictureType[AttachedPictureType[\"Illustration\"] = 18] = \"Illustration\";\n    AttachedPictureType[AttachedPictureType[\"Band/artist logotype\"] = 19] = \"Band/artist logotype\";\n    AttachedPictureType[AttachedPictureType[\"Publisher/Studio logotype\"] = 20] = \"Publisher/Studio logotype\";\n})(AttachedPictureType = exports.AttachedPictureType || (exports.AttachedPictureType = {}));\n/**\n * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\n * 4 * %0xxxxxxx\n */\nexports.UINT32SYNCSAFE = {\n    get: (buf, off) => {\n        return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\n            ((buf[off + 1]) << 14) | ((buf[off]) << 21);\n    },\n    len: 4\n};\n/**\n * ID3v2 header\n * Ref: http://id3.org/id3v2.3.0#ID3v2_header\n * ToDo\n */\nexports.ID3v2Header = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // ID3v2/file identifier   \"ID3\"\n            fileIdentifier: new Token.StringType(3, 'ascii').get(buf, off),\n            // ID3v2 versionIndex\n            version: {\n                major: Token.INT8.get(buf, off + 3),\n                revision: Token.INT8.get(buf, off + 4)\n            },\n            // ID3v2 flags\n            flags: {\n                // Unsynchronisation\n                unsynchronisation: util.getBit(buf, off + 5, 7),\n                // Extended header\n                isExtendedHeader: util.getBit(buf, off + 5, 6),\n                // Experimental indicator\n                expIndicator: util.getBit(buf, off + 5, 5),\n                footer: util.getBit(buf, off + 5, 4)\n            },\n            size: exports.UINT32SYNCSAFE.get(buf, off + 6)\n        };\n    }\n};\nexports.ExtendedHeader = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // Extended header size\n            size: Token.UINT32_BE.get(buf, off),\n            // Extended Flags\n            extendedFlags: Token.UINT16_BE.get(buf, off + 4),\n            // Size of padding\n            sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),\n            // CRC data present\n            crcDataPresent: util.getBit(buf, off + 4, 31)\n        };\n    }\n};\nexports.TextEncodingToken = {\n    len: 1,\n    get: (uint8Array, off) => {\n        switch (uint8Array[off]) {\n            case 0x00:\n                return { encoding: 'latin1' }; // binary\n            case 0x01:\n                return { encoding: 'utf16le', bom: true };\n            case 0x02:\n                return { encoding: 'utf16le', bom: false };\n            case 0x03:\n                return { encoding: 'utf8', bom: false };\n            default:\n                return { encoding: 'utf8', bom: false };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/iff/index.js":
/*!******************************************************!*\
  !*** ./node_modules/music-metadata/lib/iff/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\n/**\n * Common AIFF chunk header\n */\nexports.Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Chunk type ID\n            chunkID: FourCC_1.FourCcToken.get(buf, off),\n            // Chunk size\n            chunkSize: Number(BigInt(Token.UINT32_BE.get(buf, off + 4)))\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lmZi9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDRFQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZmYvaW5kZXguanM/MjZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBGb3VyQ0NfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRm91ckNDXCIpO1xuLyoqXG4gKiBDb21tb24gQUlGRiBjaHVuayBoZWFkZXJcbiAqL1xuZXhwb3J0cy5IZWFkZXIgPSB7XG4gICAgbGVuOiA4LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBDaHVuayB0eXBlIElEXG4gICAgICAgICAgICBjaHVua0lEOiBGb3VyQ0NfMS5Gb3VyQ2NUb2tlbi5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgLy8gQ2h1bmsgc2l6ZVxuICAgICAgICAgICAgY2h1bmtTaXplOiBOdW1iZXIoQmlnSW50KFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyA0KSkpXG4gICAgICAgIH07XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/iff/index.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/lyrics3/Lyrics3.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/lyrics3/Lyrics3.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getLyricsHeaderLength = exports.endTag2 = void 0;\nexports.endTag2 = 'LYRICS200';\nasync function getLyricsHeaderLength(reader) {\n    if (reader.fileSize >= 143) {\n        const buf = Buffer.alloc(15);\n        await reader.randomRead(buf, 0, buf.length, reader.fileSize - 143);\n        const txt = buf.toString('binary');\n        const tag = txt.substr(6);\n        if (tag === exports.endTag2) {\n            return parseInt(txt.substr(0, 6), 10) + 15;\n        }\n    }\n    return 0;\n}\nexports.getLyricsHeaderLength = getLyricsHeaderLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2x5cmljczMvTHlyaWNzMy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsZUFBZTtBQUMvQyxlQUFlO0FBQ2Y7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2x5cmljczMvTHlyaWNzMy5qcz8yMTQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRMeXJpY3NIZWFkZXJMZW5ndGggPSBleHBvcnRzLmVuZFRhZzIgPSB2b2lkIDA7XG5leHBvcnRzLmVuZFRhZzIgPSAnTFlSSUNTMjAwJztcbmFzeW5jIGZ1bmN0aW9uIGdldEx5cmljc0hlYWRlckxlbmd0aChyZWFkZXIpIHtcbiAgICBpZiAocmVhZGVyLmZpbGVTaXplID49IDE0Mykge1xuICAgICAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2MoMTUpO1xuICAgICAgICBhd2FpdCByZWFkZXIucmFuZG9tUmVhZChidWYsIDAsIGJ1Zi5sZW5ndGgsIHJlYWRlci5maWxlU2l6ZSAtIDE0Myk7XG4gICAgICAgIGNvbnN0IHR4dCA9IGJ1Zi50b1N0cmluZygnYmluYXJ5Jyk7XG4gICAgICAgIGNvbnN0IHRhZyA9IHR4dC5zdWJzdHIoNik7XG4gICAgICAgIGlmICh0YWcgPT09IGV4cG9ydHMuZW5kVGFnMikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHR4dC5zdWJzdHIoMCwgNiksIDEwKSArIDE1O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0cy5nZXRMeXJpY3NIZWFkZXJMZW5ndGggPSBnZXRMeXJpY3NIZWFkZXJMZW5ndGg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/lyrics3/Lyrics3.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/MatroskaDtd.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaDtd.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.elements = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/music-metadata/lib/matroska/types.js\");\n/**\n * Elements of document type description\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\n * Extended with:\n * - https://www.matroska.org/technical/specs/index.html\n */\nexports.elements = {\n    0x1a45dfa3: {\n        name: 'ebml',\n        container: {\n            0x4286: { name: 'ebmlVersion', value: types_1.DataType.uint },\n            0x42f7: { name: 'ebmlReadVersion', value: types_1.DataType.uint },\n            0x42f2: { name: 'ebmlMaxIDWidth', value: types_1.DataType.uint },\n            0x42f3: { name: 'ebmlMaxSizeWidth', value: types_1.DataType.uint },\n            0x4282: { name: 'docType', value: types_1.DataType.string },\n            0x4287: { name: 'docTypeVersion', value: types_1.DataType.uint },\n            0x4285: { name: 'docTypeReadVersion', value: types_1.DataType.uint } // 5.1.7\n        }\n    },\n    // Matroska segments\n    0x18538067: {\n        name: 'segment',\n        container: {\n            // Meta Seek Information\n            0x114d9b74: {\n                name: 'seekHead',\n                container: {\n                    0x4dbb: {\n                        name: 'seek',\n                        container: {\n                            0x53ab: { name: 'seekId', value: types_1.DataType.binary },\n                            0x53ac: { name: 'seekPosition', value: types_1.DataType.uint }\n                        }\n                    }\n                }\n            },\n            // Segment Information\n            0x1549a966: {\n                name: 'info',\n                container: {\n                    0x73a4: { name: 'uid', value: types_1.DataType.uid },\n                    0x7384: { name: 'filename', value: types_1.DataType.string },\n                    0x3cb923: { name: 'prevUID', value: types_1.DataType.uid },\n                    0x3c83ab: { name: 'prevFilename', value: types_1.DataType.string },\n                    0x3eb923: { name: 'nextUID', value: types_1.DataType.uid },\n                    0x3e83bb: { name: 'nextFilename', value: types_1.DataType.string },\n                    0x2ad7b1: { name: 'timecodeScale', value: types_1.DataType.uint },\n                    0x4489: { name: 'duration', value: types_1.DataType.float },\n                    0x4461: { name: 'dateUTC', value: types_1.DataType.uint },\n                    0x7ba9: { name: 'title', value: types_1.DataType.string },\n                    0x4d80: { name: 'muxingApp', value: types_1.DataType.string },\n                    0x5741: { name: 'writingApp', value: types_1.DataType.string }\n                }\n            },\n            // Cluster\n            0x1f43b675: {\n                name: 'cluster',\n                multiple: true,\n                container: {\n                    0xe7: { name: 'timecode', value: types_1.DataType.uid },\n                    0xa3: { name: 'unknown', value: types_1.DataType.binary },\n                    0xa7: { name: 'position', value: types_1.DataType.uid },\n                    0xab: { name: 'prevSize', value: types_1.DataType.uid }\n                }\n            },\n            // Track\n            0x1654ae6b: {\n                name: 'tracks',\n                container: {\n                    0xae: {\n                        name: 'entries',\n                        multiple: true,\n                        container: {\n                            0xd7: { name: 'trackNumber', value: types_1.DataType.uint },\n                            0x73c5: { name: 'uid', value: types_1.DataType.uid },\n                            0x83: { name: 'trackType', value: types_1.DataType.uint },\n                            0xb9: { name: 'flagEnabled', value: types_1.DataType.bool },\n                            0x88: { name: 'flagDefault', value: types_1.DataType.bool },\n                            0x55aa: { name: 'flagForced', value: types_1.DataType.bool },\n                            0x9c: { name: 'flagLacing', value: types_1.DataType.bool },\n                            0x6de7: { name: 'minCache', value: types_1.DataType.uint },\n                            0x6de8: { name: 'maxCache', value: types_1.DataType.uint },\n                            0x23e383: { name: 'defaultDuration', value: types_1.DataType.uint },\n                            0x23314f: { name: 'timecodeScale', value: types_1.DataType.float },\n                            0x536e: { name: 'name', value: types_1.DataType.string },\n                            0x22b59c: { name: 'language', value: types_1.DataType.string },\n                            0x86: { name: 'codecID', value: types_1.DataType.string },\n                            0x63a2: { name: 'codecPrivate', value: types_1.DataType.binary },\n                            0x258688: { name: 'codecName', value: types_1.DataType.string },\n                            0x3a9697: { name: 'codecSettings', value: types_1.DataType.string },\n                            0x3b4040: { name: 'codecInfoUrl', value: types_1.DataType.string },\n                            0x26b240: { name: 'codecDownloadUrl', value: types_1.DataType.string },\n                            0xaa: { name: 'codecDecodeAll', value: types_1.DataType.bool },\n                            0x6fab: { name: 'trackOverlay', value: types_1.DataType.uint },\n                            // Video\n                            0xe0: {\n                                name: 'video',\n                                container: {\n                                    0x9a: { name: 'flagInterlaced', value: types_1.DataType.bool },\n                                    0x53b8: { name: 'stereoMode', value: types_1.DataType.uint },\n                                    0xb0: { name: 'pixelWidth', value: types_1.DataType.uint },\n                                    0xba: { name: 'pixelHeight', value: types_1.DataType.uint },\n                                    0x54b0: { name: 'displayWidth', value: types_1.DataType.uint },\n                                    0x54ba: { name: 'displayHeight', value: types_1.DataType.uint },\n                                    0x54b3: { name: 'aspectRatioType', value: types_1.DataType.uint },\n                                    0x2eb524: { name: 'colourSpace', value: types_1.DataType.uint },\n                                    0x2fb523: { name: 'gammaValue', value: types_1.DataType.float }\n                                }\n                            },\n                            // Audio\n                            0xe1: {\n                                name: 'audio',\n                                container: {\n                                    0xb5: { name: 'samplingFrequency', value: types_1.DataType.float },\n                                    0x78b5: { name: 'outputSamplingFrequency', value: types_1.DataType.float },\n                                    0x9f: { name: 'channels', value: types_1.DataType.uint },\n                                    0x94: { name: 'channels', value: types_1.DataType.uint },\n                                    0x7d7b: { name: 'channelPositions', value: types_1.DataType.binary },\n                                    0x6264: { name: 'bitDepth', value: types_1.DataType.uint }\n                                }\n                            },\n                            // Content Encoding\n                            0x6d80: {\n                                name: 'contentEncodings',\n                                container: {\n                                    0x6240: {\n                                        name: 'contentEncoding',\n                                        container: {\n                                            0x5031: { name: 'order', value: types_1.DataType.uint },\n                                            0x5032: { name: 'scope', value: types_1.DataType.bool },\n                                            0x5033: { name: 'type', value: types_1.DataType.uint },\n                                            0x5034: {\n                                                name: 'contentEncoding',\n                                                container: {\n                                                    0x4254: { name: 'contentCompAlgo', value: types_1.DataType.uint },\n                                                    0x4255: { name: 'contentCompSettings', value: types_1.DataType.binary }\n                                                }\n                                            },\n                                            0x5035: {\n                                                name: 'contentEncoding',\n                                                container: {\n                                                    0x47e1: { name: 'contentEncAlgo', value: types_1.DataType.uint },\n                                                    0x47e2: { name: 'contentEncKeyID', value: types_1.DataType.binary },\n                                                    0x47e3: { name: 'contentSignature ', value: types_1.DataType.binary },\n                                                    0x47e4: { name: 'ContentSigKeyID  ', value: types_1.DataType.binary },\n                                                    0x47e5: { name: 'contentSigAlgo ', value: types_1.DataType.uint },\n                                                    0x47e6: { name: 'contentSigHashAlgo ', value: types_1.DataType.uint }\n                                                }\n                                            },\n                                            0x6264: { name: 'bitDepth', value: types_1.DataType.uint }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // Cueing Data\n            0x1c53bb6b: {\n                name: 'cues',\n                container: {\n                    0xbb: {\n                        name: 'cuePoint',\n                        container: {\n                            0xb3: { name: 'cueTime', value: types_1.DataType.uid },\n                            0xb7: {\n                                name: 'positions',\n                                container: {\n                                    0xf7: { name: 'track', value: types_1.DataType.uint },\n                                    0xf1: { name: 'clusterPosition', value: types_1.DataType.uint },\n                                    0x5378: { name: 'blockNumber', value: types_1.DataType.uint },\n                                    0xea: { name: 'codecState', value: types_1.DataType.uint },\n                                    0xdb: {\n                                        name: 'reference', container: {\n                                            0x96: { name: 'time', value: types_1.DataType.uint },\n                                            0x97: { name: 'cluster', value: types_1.DataType.uint },\n                                            0x535f: { name: 'number', value: types_1.DataType.uint },\n                                            0xeb: { name: 'codecState', value: types_1.DataType.uint }\n                                        }\n                                    },\n                                    0xf0: { name: 'relativePosition', value: types_1.DataType.uint } // extended\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // Attachment\n            0x1941a469: {\n                name: 'attachments',\n                container: {\n                    0x61a7: {\n                        name: 'attachedFiles',\n                        multiple: true,\n                        container: {\n                            0x467e: { name: 'description', value: types_1.DataType.string },\n                            0x466e: { name: 'name', value: types_1.DataType.string },\n                            0x4660: { name: 'mimeType', value: types_1.DataType.string },\n                            0x465c: { name: 'data', value: types_1.DataType.binary },\n                            0x46ae: { name: 'uid', value: types_1.DataType.uid }\n                        }\n                    }\n                }\n            },\n            // Chapters\n            0x1043a770: {\n                name: 'chapters',\n                container: {\n                    0x45b9: {\n                        name: 'editionEntry',\n                        container: {\n                            0xb6: {\n                                name: 'chapterAtom',\n                                container: {\n                                    0x73c4: { name: 'uid', value: types_1.DataType.uid },\n                                    0x91: { name: 'timeStart', value: types_1.DataType.uint },\n                                    0x92: { name: 'timeEnd', value: types_1.DataType.uid },\n                                    0x98: { name: 'hidden', value: types_1.DataType.bool },\n                                    0x4598: { name: 'enabled', value: types_1.DataType.uid },\n                                    0x8f: { name: 'track', container: {\n                                            0x89: { name: 'trackNumber', value: types_1.DataType.uid },\n                                            0x80: {\n                                                name: 'display', container: {\n                                                    0x85: { name: 'string', value: types_1.DataType.string },\n                                                    0x437c: { name: 'language ', value: types_1.DataType.string },\n                                                    0x437e: { name: 'country ', value: types_1.DataType.string }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // Tagging\n            0x1254c367: {\n                name: 'tags',\n                container: {\n                    0x7373: {\n                        name: 'tag',\n                        multiple: true,\n                        container: {\n                            0x63c0: {\n                                name: 'target',\n                                container: {\n                                    0x63c5: { name: 'tagTrackUID', value: types_1.DataType.uid },\n                                    0x63c4: { name: 'tagChapterUID', value: types_1.DataType.uint },\n                                    0x63c6: { name: 'tagAttachmentUID', value: types_1.DataType.uid },\n                                    0x63ca: { name: 'targetType', value: types_1.DataType.string },\n                                    0x68ca: { name: 'targetTypeValue', value: types_1.DataType.uint },\n                                    0x63c9: { name: 'tagEditionUID', value: types_1.DataType.uid } // extended\n                                }\n                            },\n                            0x67c8: {\n                                name: 'simpleTags',\n                                multiple: true,\n                                container: {\n                                    0x45a3: { name: 'name', value: types_1.DataType.string },\n                                    0x4487: { name: 'string', value: types_1.DataType.string },\n                                    0x4485: { name: 'binary', value: types_1.DataType.binary },\n                                    0x447a: { name: 'language', value: types_1.DataType.string },\n                                    0x447b: { name: 'languageIETF', value: types_1.DataType.string },\n                                    0x4484: { name: 'default', value: types_1.DataType.bool } // extended\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/matroska/MatroskaDtd.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/MatroskaParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaParser.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatroskaParser = void 0;\nconst token_types_1 = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/music-metadata/lib/matroska/types.js\");\nconst matroskaDtd = __webpack_require__(/*! ./MatroskaDtd */ \"./node_modules/music-metadata/lib/matroska/MatroskaDtd.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:matroska');\n/**\n * Extensible Binary Meta Language (EBML) parser\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nclass MatroskaParser extends BasicParser_1.BasicParser {\n    constructor() {\n        super();\n        this.padding = 0;\n        this.parserMap = new Map();\n        this.ebmlMaxIDLength = 4;\n        this.ebmlMaxSizeLength = 8;\n        this.parserMap.set(types_1.DataType.uint, e => this.readUint(e));\n        this.parserMap.set(types_1.DataType.string, e => this.readString(e));\n        this.parserMap.set(types_1.DataType.binary, e => this.readBuffer(e));\n        this.parserMap.set(types_1.DataType.uid, async (e) => await this.readUint(e) === 1);\n        this.parserMap.set(types_1.DataType.bool, e => this.readFlag(e));\n        this.parserMap.set(types_1.DataType.float, e => this.readFloat(e));\n    }\n    /**\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\n     * @param {INativeMetadataCollector} metadata Output\n     * @param {ITokenizer} tokenizer Input\n     * @param {IOptions} options Parsing options\n     */\n    init(metadata, tokenizer, options) {\n        super.init(metadata, tokenizer, options);\n        return this;\n    }\n    async parse() {\n        const matroska = await this.parseContainer(matroskaDtd.elements, this.tokenizer.fileInfo.size, []);\n        this.metadata.setFormat('container', `EBML/${matroska.ebml.docType}`);\n        if (matroska.segment) {\n            const info = matroska.segment.info;\n            if (info) {\n                const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\n                if (typeof info.duration === 'number') {\n                    const duration = info.duration * timecodeScale / 1000000000;\n                    this.addTag('segment:title', info.title);\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const audioTracks = matroska.segment.tracks;\n            if (audioTracks && audioTracks.entries) {\n                audioTracks.entries.forEach(entry => {\n                    const stream = {\n                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\n                        codecSettings: entry.codecSettings,\n                        flagDefault: entry.flagDefault,\n                        flagLacing: entry.flagLacing,\n                        flagEnabled: entry.flagEnabled,\n                        language: entry.language,\n                        name: entry.name,\n                        type: entry.trackType,\n                        audio: entry.audio,\n                        video: entry.video\n                    };\n                    this.metadata.addStreamInfo(stream);\n                });\n                const audioTrack = audioTracks.entries\n                    .filter(entry => {\n                    return entry.trackType === types_1.TrackType.audio.valueOf();\n                })\n                    .reduce((acc, cur) => {\n                    if (!acc) {\n                        return cur;\n                    }\n                    if (!acc.flagDefault && cur.flagDefault) {\n                        return cur;\n                    }\n                    if (cur.trackNumber && cur.trackNumber < acc.trackNumber) {\n                        return cur;\n                    }\n                    return acc;\n                }, null);\n                if (audioTrack) {\n                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\n                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\n                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\n                }\n                if (matroska.segment.tags) {\n                    matroska.segment.tags.tag.forEach(tag => {\n                        const target = tag.target;\n                        const targetType = (target === null || target === void 0 ? void 0 : target.targetTypeValue) ? types_1.TargetType[target.targetTypeValue] : ((target === null || target === void 0 ? void 0 : target.targetType) ? target.targetType : 'track');\n                        tag.simpleTags.forEach(simpleTag => {\n                            const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\n                            this.addTag(`${targetType}:${simpleTag.name}`, value);\n                        });\n                    });\n                }\n                if (matroska.segment.attachments) {\n                    matroska.segment.attachments.attachedFiles\n                        .filter(file => file.mimeType.startsWith('image/'))\n                        .map(file => {\n                        return {\n                            data: file.data,\n                            format: file.mimeType,\n                            description: file.description,\n                            name: file.name\n                        };\n                    }).forEach(picture => {\n                        this.addTag('picture', picture);\n                    });\n                }\n            }\n        }\n    }\n    async parseContainer(container, posDone, path) {\n        const tree = {};\n        while (this.tokenizer.position < posDone) {\n            let element;\n            try {\n                element = await this.readElement();\n            }\n            catch (error) {\n                if (error.message === 'End-Of-Stream') {\n                    break;\n                }\n                throw error;\n            }\n            const type = container[element.id];\n            if (type) {\n                debug(`Element: name=${type.name}, container=${!!type.container}`);\n                if (type.container) {\n                    const res = await this.parseContainer(type.container, element.len >= 0 ? this.tokenizer.position + element.len : -1, path.concat([type.name]));\n                    if (type.multiple) {\n                        if (!tree[type.name]) {\n                            tree[type.name] = [];\n                        }\n                        tree[type.name].push(res);\n                    }\n                    else {\n                        tree[type.name] = res;\n                    }\n                }\n                else {\n                    tree[type.name] = await this.parserMap.get(type.value)(element);\n                }\n            }\n            else {\n                switch (element.id) {\n                    case 0xec: // void\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    default:\n                        debug(`parseEbml: path=${path.join('/')}, unknown element: id=${element.id.toString(16)}`);\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                }\n            }\n        }\n        return tree;\n    }\n    async readVintData(maxLength) {\n        const msb = await this.tokenizer.peekNumber(token_types_1.UINT8);\n        let mask = 0x80;\n        let oc = 1;\n        // Calculate VINT_WIDTH\n        while ((msb & mask) === 0) {\n            if (oc > maxLength) {\n                throw new Error('VINT value exceeding maximum size');\n            }\n            ++oc;\n            mask >>= 1;\n        }\n        const id = Buffer.alloc(oc);\n        await this.tokenizer.readBuffer(id);\n        return id;\n    }\n    async readElement() {\n        const id = await this.readVintData(this.ebmlMaxIDLength);\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\n        const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n        return {\n            id: id.readUIntBE(0, id.length),\n            len: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n        };\n    }\n    isMaxValue(vintData) {\n        if (vintData.length === this.ebmlMaxSizeLength) {\n            for (let n = 1; n < this.ebmlMaxSizeLength; ++n) {\n                if (vintData[n] !== 0xff)\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    async readFloat(e) {\n        switch (e.len) {\n            case 0:\n                return 0.0;\n            case 4:\n                return this.tokenizer.readNumber(token_types_1.Float32_BE);\n            case 8:\n                return this.tokenizer.readNumber(token_types_1.Float64_BE);\n            case 10:\n                return this.tokenizer.readNumber(token_types_1.Float64_BE);\n            default:\n                throw new Error(`Invalid IEEE-754 float length: ${e.len}`);\n        }\n    }\n    async readFlag(e) {\n        return (await this.readUint(e)) === 1;\n    }\n    async readUint(e) {\n        const buf = await this.readBuffer(e);\n        const nrLen = Math.min(6, e.len); // JavaScript can max read 6 bytes integer\n        return buf.readUIntBE(e.len - nrLen, nrLen);\n    }\n    async readString(e) {\n        const rawString = await this.tokenizer.readToken(new token_types_1.StringType(e.len, 'utf-8'));\n        return rawString.replace(/\\00.*$/g, '');\n    }\n    async readBuffer(e) {\n        const buf = Buffer.alloc(e.len);\n        await this.tokenizer.readBuffer(buf);\n        return buf;\n    }\n    addTag(tagId, value) {\n        this.metadata.addTag('matroska', tagId, value);\n    }\n}\nexports.MatroskaParser = MatroskaParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/matroska/MatroskaParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatroskaTagMapper = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * EBML Tag map\n */\nconst ebmlTagMap = {\n    'segment:title': 'title',\n    'album:ARTIST': 'albumartist',\n    'album:ARTISTSORT': 'albumartistsort',\n    'album:TITLE': 'album',\n    'album:DATE_RECORDED': 'originaldate',\n    'album:PART_NUMBER': 'disk',\n    'album:TOTAL_PARTS': 'totaltracks',\n    'track:ARTIST': 'artist',\n    'track:ARTISTSORT': 'artistsort',\n    'track:TITLE': 'title',\n    'track:PART_NUMBER': 'track',\n    'track:MUSICBRAINZ_TRACKID': 'musicbrainz_recordingid',\n    'track:MUSICBRAINZ_ALBUMID': 'musicbrainz_albumid',\n    'track:MUSICBRAINZ_ARTISTID': 'musicbrainz_artistid',\n    'track:PUBLISHER': 'label',\n    'track:GENRE': 'genre',\n    'track:ENCODER': 'encodedby',\n    'track:ENCODER_OPTIONS': 'encodersettings',\n    'edition:TOTAL_PARTS': 'totaldiscs',\n    picture: 'picture'\n};\nclass MatroskaTagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super(['matroska'], ebmlTagMap);\n    }\n}\nexports.MatroskaTagMapper = MatroskaTagMapper;\n//# sourceMappingURL=MatroskaTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21hdHJvc2thL01hdHJvc2thVGFnTWFwcGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQ0FBZ0MsbUJBQU8sQ0FBQywwR0FBaUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbWF0cm9za2EvTWF0cm9za2FUYWdNYXBwZXIuanM/NmZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWF0cm9za2FUYWdNYXBwZXIgPSB2b2lkIDA7XG5jb25zdCBDYXNlSW5zZW5zaXRpdmVUYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXCIpO1xuLyoqXG4gKiBFQk1MIFRhZyBtYXBcbiAqL1xuY29uc3QgZWJtbFRhZ01hcCA9IHtcbiAgICAnc2VnbWVudDp0aXRsZSc6ICd0aXRsZScsXG4gICAgJ2FsYnVtOkFSVElTVCc6ICdhbGJ1bWFydGlzdCcsXG4gICAgJ2FsYnVtOkFSVElTVFNPUlQnOiAnYWxidW1hcnRpc3Rzb3J0JyxcbiAgICAnYWxidW06VElUTEUnOiAnYWxidW0nLFxuICAgICdhbGJ1bTpEQVRFX1JFQ09SREVEJzogJ29yaWdpbmFsZGF0ZScsXG4gICAgJ2FsYnVtOlBBUlRfTlVNQkVSJzogJ2Rpc2snLFxuICAgICdhbGJ1bTpUT1RBTF9QQVJUUyc6ICd0b3RhbHRyYWNrcycsXG4gICAgJ3RyYWNrOkFSVElTVCc6ICdhcnRpc3QnLFxuICAgICd0cmFjazpBUlRJU1RTT1JUJzogJ2FydGlzdHNvcnQnLFxuICAgICd0cmFjazpUSVRMRSc6ICd0aXRsZScsXG4gICAgJ3RyYWNrOlBBUlRfTlVNQkVSJzogJ3RyYWNrJyxcbiAgICAndHJhY2s6TVVTSUNCUkFJTlpfVFJBQ0tJRCc6ICdtdXNpY2JyYWluel9yZWNvcmRpbmdpZCcsXG4gICAgJ3RyYWNrOk1VU0lDQlJBSU5aX0FMQlVNSUQnOiAnbXVzaWNicmFpbnpfYWxidW1pZCcsXG4gICAgJ3RyYWNrOk1VU0lDQlJBSU5aX0FSVElTVElEJzogJ211c2ljYnJhaW56X2FydGlzdGlkJyxcbiAgICAndHJhY2s6UFVCTElTSEVSJzogJ2xhYmVsJyxcbiAgICAndHJhY2s6R0VOUkUnOiAnZ2VucmUnLFxuICAgICd0cmFjazpFTkNPREVSJzogJ2VuY29kZWRieScsXG4gICAgJ3RyYWNrOkVOQ09ERVJfT1BUSU9OUyc6ICdlbmNvZGVyc2V0dGluZ3MnLFxuICAgICdlZGl0aW9uOlRPVEFMX1BBUlRTJzogJ3RvdGFsZGlzY3MnLFxuICAgIHBpY3R1cmU6ICdwaWN0dXJlJ1xufTtcbmNsYXNzIE1hdHJvc2thVGFnTWFwcGVyIGV4dGVuZHMgQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXzEuQ2FzZUluc2Vuc2l0aXZlVGFnTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoWydtYXRyb3NrYSddLCBlYm1sVGFnTWFwKTtcbiAgICB9XG59XG5leHBvcnRzLk1hdHJvc2thVGFnTWFwcGVyID0gTWF0cm9za2FUYWdNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXRyb3NrYVRhZ01hcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/matroska/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/types.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = exports.TargetType = exports.DataType = void 0;\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"string\"] = 0] = \"string\";\n    DataType[DataType[\"uint\"] = 1] = \"uint\";\n    DataType[DataType[\"uid\"] = 2] = \"uid\";\n    DataType[DataType[\"bool\"] = 3] = \"bool\";\n    DataType[DataType[\"binary\"] = 4] = \"binary\";\n    DataType[DataType[\"float\"] = 5] = \"float\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nvar TargetType;\n(function (TargetType) {\n    TargetType[TargetType[\"shot\"] = 10] = \"shot\";\n    TargetType[TargetType[\"scene\"] = 20] = \"scene\";\n    TargetType[TargetType[\"track\"] = 30] = \"track\";\n    TargetType[TargetType[\"part\"] = 40] = \"part\";\n    TargetType[TargetType[\"album\"] = 50] = \"album\";\n    TargetType[TargetType[\"edition\"] = 60] = \"edition\";\n    TargetType[TargetType[\"collection\"] = 70] = \"collection\";\n})(TargetType = exports.TargetType || (exports.TargetType = {}));\nvar TrackType;\n(function (TrackType) {\n    TrackType[TrackType[\"video\"] = 1] = \"video\";\n    TrackType[TrackType[\"audio\"] = 2] = \"audio\";\n    TrackType[TrackType[\"complex\"] = 3] = \"complex\";\n    TrackType[TrackType[\"logo\"] = 4] = \"logo\";\n    TrackType[TrackType[\"subtitle\"] = 17] = \"subtitle\";\n    TrackType[TrackType[\"button\"] = 18] = \"button\";\n    TrackType[TrackType[\"control\"] = 32] = \"control\";\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21hdHJvc2thL3R5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLGtCQUFrQixHQUFHLGdCQUFnQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0MsZ0JBQWdCLEtBQUs7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0MsaUJBQWlCLEtBQUs7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tYXRyb3NrYS90eXBlcy5qcz8xOTQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFja1R5cGUgPSBleHBvcnRzLlRhcmdldFR5cGUgPSBleHBvcnRzLkRhdGFUeXBlID0gdm9pZCAwO1xudmFyIERhdGFUeXBlO1xuKGZ1bmN0aW9uIChEYXRhVHlwZSkge1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1wic3RyaW5nXCJdID0gMF0gPSBcInN0cmluZ1wiO1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1widWludFwiXSA9IDFdID0gXCJ1aW50XCI7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJ1aWRcIl0gPSAyXSA9IFwidWlkXCI7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJib29sXCJdID0gM10gPSBcImJvb2xcIjtcbiAgICBEYXRhVHlwZVtEYXRhVHlwZVtcImJpbmFyeVwiXSA9IDRdID0gXCJiaW5hcnlcIjtcbiAgICBEYXRhVHlwZVtEYXRhVHlwZVtcImZsb2F0XCJdID0gNV0gPSBcImZsb2F0XCI7XG59KShEYXRhVHlwZSA9IGV4cG9ydHMuRGF0YVR5cGUgfHwgKGV4cG9ydHMuRGF0YVR5cGUgPSB7fSkpO1xudmFyIFRhcmdldFR5cGU7XG4oZnVuY3Rpb24gKFRhcmdldFR5cGUpIHtcbiAgICBUYXJnZXRUeXBlW1RhcmdldFR5cGVbXCJzaG90XCJdID0gMTBdID0gXCJzaG90XCI7XG4gICAgVGFyZ2V0VHlwZVtUYXJnZXRUeXBlW1wic2NlbmVcIl0gPSAyMF0gPSBcInNjZW5lXCI7XG4gICAgVGFyZ2V0VHlwZVtUYXJnZXRUeXBlW1widHJhY2tcIl0gPSAzMF0gPSBcInRyYWNrXCI7XG4gICAgVGFyZ2V0VHlwZVtUYXJnZXRUeXBlW1wicGFydFwiXSA9IDQwXSA9IFwicGFydFwiO1xuICAgIFRhcmdldFR5cGVbVGFyZ2V0VHlwZVtcImFsYnVtXCJdID0gNTBdID0gXCJhbGJ1bVwiO1xuICAgIFRhcmdldFR5cGVbVGFyZ2V0VHlwZVtcImVkaXRpb25cIl0gPSA2MF0gPSBcImVkaXRpb25cIjtcbiAgICBUYXJnZXRUeXBlW1RhcmdldFR5cGVbXCJjb2xsZWN0aW9uXCJdID0gNzBdID0gXCJjb2xsZWN0aW9uXCI7XG59KShUYXJnZXRUeXBlID0gZXhwb3J0cy5UYXJnZXRUeXBlIHx8IChleHBvcnRzLlRhcmdldFR5cGUgPSB7fSkpO1xudmFyIFRyYWNrVHlwZTtcbihmdW5jdGlvbiAoVHJhY2tUeXBlKSB7XG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcInZpZGVvXCJdID0gMV0gPSBcInZpZGVvXCI7XG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcImF1ZGlvXCJdID0gMl0gPSBcImF1ZGlvXCI7XG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcImNvbXBsZXhcIl0gPSAzXSA9IFwiY29tcGxleFwiO1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJsb2dvXCJdID0gNF0gPSBcImxvZ29cIjtcbiAgICBUcmFja1R5cGVbVHJhY2tUeXBlW1wic3VidGl0bGVcIl0gPSAxN10gPSBcInN1YnRpdGxlXCI7XG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcImJ1dHRvblwiXSA9IDE4XSA9IFwiYnV0dG9uXCI7XG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcImNvbnRyb2xcIl0gPSAzMl0gPSBcImNvbnRyb2xcIjtcbn0pKFRyYWNrVHlwZSA9IGV4cG9ydHMuVHJhY2tUeXBlIHx8IChleHBvcnRzLlRyYWNrVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/matroska/types.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/Atom.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/Atom.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Atom = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst AtomToken = __webpack_require__(/*! ./AtomToken */ \"./node_modules/music-metadata/lib/mp4/AtomToken.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:MP4:Atom');\nclass Atom {\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\n        // Parse atom header\n        const offset = tokenizer.position;\n        // debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\n        const header = await tokenizer.readToken(AtomToken.Header);\n        const extended = header.length === BigInt(1);\n        if (extended) {\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\n        }\n        const atomBean = new Atom(header, header.length === BigInt(1), parent);\n        const payloadLength = atomBean.getPayloadLength(remaining);\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\n        return atomBean;\n    }\n    constructor(header, extended, parent) {\n        this.header = header;\n        this.extended = extended;\n        this.parent = parent;\n        this.children = [];\n        this.atomPath = (this.parent ? this.parent.atomPath + '.' : '') + this.header.name;\n    }\n    getHeaderLength() {\n        return this.extended ? 16 : 8;\n    }\n    getPayloadLength(remaining) {\n        return (this.header.length === BigInt(0) ? remaining : Number(this.header.length)) - this.getHeaderLength();\n    }\n    async readAtoms(tokenizer, dataHandler, size) {\n        while (size > 0) {\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\n            this.children.push(atomBean);\n            size -= atomBean.header.length === BigInt(0) ? size : Number(atomBean.header.length);\n        }\n    }\n    async readData(tokenizer, dataHandler, remaining) {\n        switch (this.header.name) {\n            // \"Container\" atoms, contains nested atoms\n            case 'moov': // The Movie Atom: contains other atoms\n            case 'udta': // User defined atom\n            case 'trak':\n            case 'mdia': // Media atom\n            case 'minf': // Media Information Atom\n            case 'stbl': // The Sample Table Atom\n            case '<id>':\n            case 'ilst':\n            case 'tref':\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\n            case 'meta': // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n                // meta has 4 bytes of padding, ignore\n                const peekHeader = await tokenizer.peekToken(AtomToken.Header);\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\n                await tokenizer.ignore(paddingLength);\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\n            case 'mdhd': // Media header atom\n            case 'mvhd': // 'movie' => 'mvhd': movie header atom; child of Movie Atom\n            case 'tkhd':\n            case 'stsz':\n            case 'mdat':\n            default:\n                return dataHandler(this, remaining);\n        }\n    }\n}\nexports.Atom = Atom;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wNC9BdG9tLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWixnQkFBZ0IsbUJBQU8sQ0FBQyxrREFBTztBQUMvQixrQkFBa0IsbUJBQU8sQ0FBQyx1RUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELE9BQU8sT0FBTztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxrQkFBa0IsYUFBYSxrQkFBa0IsV0FBVyxPQUFPLFFBQVEsdUJBQXVCLElBQUk7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcDQvQXRvbS5qcz82MTAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdG9tID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IEF0b21Ub2tlbiA9IHJlcXVpcmUoXCIuL0F0b21Ub2tlblwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpNUDQ6QXRvbScpO1xuY2xhc3MgQXRvbSB7XG4gICAgc3RhdGljIGFzeW5jIHJlYWRBdG9tKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHBhcmVudCwgcmVtYWluaW5nKSB7XG4gICAgICAgIC8vIFBhcnNlIGF0b20gaGVhZGVyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRva2VuaXplci5wb3NpdGlvbjtcbiAgICAgICAgLy8gZGVidWcoYFJlYWRpbmcgbmV4dCB0b2tlbiBvbiBvZmZzZXQ9JHtvZmZzZXR9Li4uYCk7IC8vICBidWYudG9TdHJpbmcoJ2FzY2lpJylcbiAgICAgICAgY29uc3QgaGVhZGVyID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihBdG9tVG9rZW4uSGVhZGVyKTtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWQgPSBoZWFkZXIubGVuZ3RoID09PSBCaWdJbnQoMSk7XG4gICAgICAgIGlmIChleHRlbmRlZCkge1xuICAgICAgICAgICAgaGVhZGVyLmxlbmd0aCA9IGF3YWl0IHRva2VuaXplci5yZWFkVG9rZW4oQXRvbVRva2VuLkV4dGVuZGVkU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXRvbUJlYW4gPSBuZXcgQXRvbShoZWFkZXIsIGhlYWRlci5sZW5ndGggPT09IEJpZ0ludCgxKSwgcGFyZW50KTtcbiAgICAgICAgY29uc3QgcGF5bG9hZExlbmd0aCA9IGF0b21CZWFuLmdldFBheWxvYWRMZW5ndGgocmVtYWluaW5nKTtcbiAgICAgICAgZGVidWcoYHBhcnNlIGF0b20gbmFtZT0ke2F0b21CZWFuLmF0b21QYXRofSwgZXh0ZW5kZWQ9JHthdG9tQmVhbi5leHRlbmRlZH0sIG9mZnNldD0ke29mZnNldH0sIGxlbj0ke2F0b21CZWFuLmhlYWRlci5sZW5ndGh9YCk7IC8vICBidWYudG9TdHJpbmcoJ2FzY2lpJylcbiAgICAgICAgYXdhaXQgYXRvbUJlYW4ucmVhZERhdGEodG9rZW5pemVyLCBkYXRhSGFuZGxlciwgcGF5bG9hZExlbmd0aCk7XG4gICAgICAgIHJldHVybiBhdG9tQmVhbjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaGVhZGVyLCBleHRlbmRlZCwgcGFyZW50KSB7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgICAgICB0aGlzLmV4dGVuZGVkID0gZXh0ZW5kZWQ7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMuYXRvbVBhdGggPSAodGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5hdG9tUGF0aCArICcuJyA6ICcnKSArIHRoaXMuaGVhZGVyLm5hbWU7XG4gICAgfVxuICAgIGdldEhlYWRlckxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kZWQgPyAxNiA6IDg7XG4gICAgfVxuICAgIGdldFBheWxvYWRMZW5ndGgocmVtYWluaW5nKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5oZWFkZXIubGVuZ3RoID09PSBCaWdJbnQoMCkgPyByZW1haW5pbmcgOiBOdW1iZXIodGhpcy5oZWFkZXIubGVuZ3RoKSkgLSB0aGlzLmdldEhlYWRlckxlbmd0aCgpO1xuICAgIH1cbiAgICBhc3luYyByZWFkQXRvbXModG9rZW5pemVyLCBkYXRhSGFuZGxlciwgc2l6ZSkge1xuICAgICAgICB3aGlsZSAoc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGF0b21CZWFuID0gYXdhaXQgQXRvbS5yZWFkQXRvbSh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCB0aGlzLCBzaXplKTtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhdG9tQmVhbik7XG4gICAgICAgICAgICBzaXplIC09IGF0b21CZWFuLmhlYWRlci5sZW5ndGggPT09IEJpZ0ludCgwKSA/IHNpemUgOiBOdW1iZXIoYXRvbUJlYW4uaGVhZGVyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcmVhZERhdGEodG9rZW5pemVyLCBkYXRhSGFuZGxlciwgcmVtYWluaW5nKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5oZWFkZXIubmFtZSkge1xuICAgICAgICAgICAgLy8gXCJDb250YWluZXJcIiBhdG9tcywgY29udGFpbnMgbmVzdGVkIGF0b21zXG4gICAgICAgICAgICBjYXNlICdtb292JzogLy8gVGhlIE1vdmllIEF0b206IGNvbnRhaW5zIG90aGVyIGF0b21zXG4gICAgICAgICAgICBjYXNlICd1ZHRhJzogLy8gVXNlciBkZWZpbmVkIGF0b21cbiAgICAgICAgICAgIGNhc2UgJ3RyYWsnOlxuICAgICAgICAgICAgY2FzZSAnbWRpYSc6IC8vIE1lZGlhIGF0b21cbiAgICAgICAgICAgIGNhc2UgJ21pbmYnOiAvLyBNZWRpYSBJbmZvcm1hdGlvbiBBdG9tXG4gICAgICAgICAgICBjYXNlICdzdGJsJzogLy8gVGhlIFNhbXBsZSBUYWJsZSBBdG9tXG4gICAgICAgICAgICBjYXNlICc8aWQ+JzpcbiAgICAgICAgICAgIGNhc2UgJ2lsc3QnOlxuICAgICAgICAgICAgY2FzZSAndHJlZic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZEF0b21zKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHRoaXMuZ2V0UGF5bG9hZExlbmd0aChyZW1haW5pbmcpKTtcbiAgICAgICAgICAgIGNhc2UgJ21ldGEnOiAvLyBNZXRhZGF0YSBBdG9tLCByZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2NvbnRlbnQvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9NZXRhZGF0YS9NZXRhZGF0YS5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDEtU1c4XG4gICAgICAgICAgICAgICAgLy8gbWV0YSBoYXMgNCBieXRlcyBvZiBwYWRkaW5nLCBpZ25vcmVcbiAgICAgICAgICAgICAgICBjb25zdCBwZWVrSGVhZGVyID0gYXdhaXQgdG9rZW5pemVyLnBlZWtUb2tlbihBdG9tVG9rZW4uSGVhZGVyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nTGVuZ3RoID0gcGVla0hlYWRlci5uYW1lID09PSAnaGRscicgPyAwIDogNDtcbiAgICAgICAgICAgICAgICBhd2FpdCB0b2tlbml6ZXIuaWdub3JlKHBhZGRpbmdMZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRBdG9tcyh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCB0aGlzLmdldFBheWxvYWRMZW5ndGgocmVtYWluaW5nKSAtIHBhZGRpbmdMZW5ndGgpO1xuICAgICAgICAgICAgY2FzZSAnbWRoZCc6IC8vIE1lZGlhIGhlYWRlciBhdG9tXG4gICAgICAgICAgICBjYXNlICdtdmhkJzogLy8gJ21vdmllJyA9PiAnbXZoZCc6IG1vdmllIGhlYWRlciBhdG9tOyBjaGlsZCBvZiBNb3ZpZSBBdG9tXG4gICAgICAgICAgICBjYXNlICd0a2hkJzpcbiAgICAgICAgICAgIGNhc2UgJ3N0c3onOlxuICAgICAgICAgICAgY2FzZSAnbWRhdCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhSGFuZGxlcih0aGlzLCByZW1haW5pbmcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdG9tID0gQXRvbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mp4/Atom.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/AtomToken.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/AtomToken.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChapterText = exports.StcoAtom = exports.StszAtom = exports.StscAtom = exports.SampleToChunkToken = exports.SttsAtom = exports.TimeToSampleToken = exports.SoundSampleDescriptionV0 = exports.SoundSampleDescriptionVersion = exports.StsdAtom = exports.TrackHeaderAtom = exports.NameAtom = exports.DataAtom = exports.MvhdAtom = exports.MdhdAtom = exports.FixedLengthAtom = exports.mhdr = exports.tkhd = exports.ftyp = exports.ExtendedSize = exports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:MP4:atom');\nexports.Header = {\n    len: 8,\n    get: (buf, off) => {\n        const length = Token.UINT32_BE.get(buf, off);\n        if (length < 0)\n            throw new Error('Invalid atom header length');\n        return {\n            length: BigInt(length),\n            name: new Token.StringType(4, 'binary').get(buf, off + 4)\n        };\n    },\n    put: (buf, off, hdr) => {\n        Token.UINT32_BE.put(buf, off, Number(hdr.length));\n        return FourCC_1.FourCcToken.put(buf, off + 4, hdr.name);\n    }\n};\n/**\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\n */\nexports.ExtendedSize = Token.UINT64_BE;\nexports.ftyp = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\nexports.tkhd = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\n/**\n * Token: Movie Header Atom\n */\nexports.mhdr = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Base class for 'fixed' length atoms.\n * In some cases these atoms are longer then the sum of the described fields.\n * Issue: https://github.com/Borewit/music-metadata/issues/120\n */\nclass FixedLengthAtom {\n    /**\n     *\n     * @param {number} len Length as specified in the size field\n     * @param {number} expLen Total length of sum of specified fields in the standard\n     */\n    constructor(len, expLen, atomId) {\n        this.len = len;\n        if (len < expLen) {\n            throw new Error(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\n        }\n        else if (len > expLen) {\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\n        }\n    }\n}\nexports.FixedLengthAtom = FixedLengthAtom;\n/**\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\n */\nconst SecondsSinceMacEpoch = {\n    len: 4,\n    get: (buf, off) => {\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\n        return new Date(secondsSinceUnixEpoch * 1000);\n    }\n};\n/**\n * Token: Media Header Atom\n * Ref:\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\n */\nclass MdhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 24, 'mdhd');\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off + 0),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            language: Token.UINT16_BE.get(buf, off + 20),\n            quality: Token.UINT16_BE.get(buf, off + 22)\n        };\n    }\n}\nexports.MdhdAtom = MdhdAtom;\n/**\n * Token: Movie Header Atom\n */\nclass MvhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 100, 'mvhd');\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\n            // ignore reserver: 10 bytes\n            // ignore matrix structure: 36 bytes\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\n        };\n    }\n}\nexports.MvhdAtom = MvhdAtom;\n/**\n * Data Atom Structure\n */\nclass DataAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            type: {\n                set: Token.UINT8.get(buf, off + 0),\n                type: Token.UINT24_BE.get(buf, off + 1)\n            },\n            locale: Token.UINT24_BE.get(buf, off + 4),\n            value: Buffer.from(new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8))\n        };\n    }\n}\nexports.DataAtom = DataAtom;\n/**\n * Data Atom Structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\n */\nclass NameAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\n        };\n    }\n}\nexports.NameAtom = NameAtom;\n/**\n * Track Header Atoms structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\n */\nclass TrackHeaderAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            trackId: Token.UINT32_BE.get(buf, off + 12),\n            // reserved 4 bytes\n            duration: Token.UINT32_BE.get(buf, off + 20),\n            layer: Token.UINT16_BE.get(buf, off + 24),\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\n            // ToDo: add remaining fields\n        };\n    }\n}\nexports.TrackHeaderAtom = TrackHeaderAtom;\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nconst stsdHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nclass SampleDescriptionTable {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            dataFormat: FourCC_1.FourCcToken.get(buf, off),\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\n            description: new Token.Uint8ArrayType(this.len - 12).get(buf, off + 12)\n        };\n    }\n}\n/**\n * Atom: Sample-description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nclass StsdAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const header = stsdHeader.get(buf, off);\n        off += stsdHeader.len;\n        const table = [];\n        for (let n = 0; n < header.numberOfEntries; ++n) {\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\n            off += Token.UINT32_BE.len;\n            table.push(new SampleDescriptionTable(size).get(buf, off));\n            off += size;\n        }\n        return {\n            header,\n            table\n        };\n    }\n}\nexports.StsdAtom = StsdAtom;\n/**\n * Common Sound Sample Description (version & revision)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\n */\nexports.SoundSampleDescriptionVersion = {\n    len: 8,\n    get(buf, off) {\n        return {\n            version: Token.INT16_BE.get(buf, off),\n            revision: Token.INT16_BE.get(buf, off + 2),\n            vendor: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Sound Sample Description (Version 0)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\n */\nexports.SoundSampleDescriptionV0 = {\n    len: 12,\n    get(buf, off) {\n        return {\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\n            compressionId: Token.INT16_BE.get(buf, off + 4),\n            packetSize: Token.INT16_BE.get(buf, off + 6),\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\n        };\n    }\n};\nclass SimpleTableAtom {\n    constructor(len, token) {\n        this.len = len;\n        this.token = token;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\n        return {\n            version: Token.INT8.get(buf, off + 0),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\n        };\n    }\n}\nexports.TimeToSampleToken = {\n    len: 8,\n    get(buf, off) {\n        return {\n            count: Token.INT32_BE.get(buf, off + 0),\n            duration: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Time-to-sample('stts') atom.\n * Store duration information for a media’s samples.\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\n */\nclass SttsAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, exports.TimeToSampleToken);\n        this.len = len;\n    }\n}\nexports.SttsAtom = SttsAtom;\nexports.SampleToChunkToken = {\n    len: 12,\n    get(buf, off) {\n        return {\n            firstChunk: Token.INT32_BE.get(buf, off),\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\n        };\n    }\n};\n/**\n * Sample-to-Chunk ('stsc') atom interface\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\n */\nclass StscAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, exports.SampleToChunkToken);\n        this.len = len;\n    }\n}\nexports.StscAtom = StscAtom;\n/**\n * Sample-size ('stsz') atom\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\n */\nclass StszAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\n        return {\n            version: Token.INT8.get(buf, off),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\n        };\n    }\n}\nexports.StszAtom = StszAtom;\n/**\n * Chunk offset atom, 'stco'\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\n */\nclass StcoAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, Token.INT32_BE);\n        this.len = len;\n    }\n}\nexports.StcoAtom = StcoAtom;\n/**\n * Token used to decode text-track from 'mdat' atom (raw data stream)\n */\nclass ChapterText {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\n        const str = new Token.StringType(titleLen, 'utf-8');\n        return str.get(buf, off + 2);\n    }\n}\nexports.ChapterText = ChapterText;\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\n    if (remainingLen === 0)\n        return [];\n    if (remainingLen !== numberOfEntries * token.len)\n        throw new Error('mismatch number-of-entries with remaining atom-length');\n    const entries = [];\n    // parse offset-table\n    for (let n = 0; n < numberOfEntries; ++n) {\n        entries.push(token.get(buf, off));\n        off += token.len;\n    }\n    return entries;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mp4/AtomToken.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/MP4Parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/MP4Parser.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MP4Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst type_1 = __webpack_require__(/*! ../type */ \"./node_modules/music-metadata/lib/type.js\");\nconst Atom_1 = __webpack_require__(/*! ./Atom */ \"./node_modules/music-metadata/lib/mp4/Atom.js\");\nconst AtomToken = __webpack_require__(/*! ./AtomToken */ \"./node_modules/music-metadata/lib/mp4/AtomToken.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:MP4');\nconst tagFormat = 'iTunes';\nconst encoderDict = {\n    raw: {\n        lossy: false,\n        format: 'raw'\n    },\n    MAC3: {\n        lossy: true,\n        format: 'MACE 3:1'\n    },\n    MAC6: {\n        lossy: true,\n        format: 'MACE 6:1'\n    },\n    ima4: {\n        lossy: true,\n        format: 'IMA 4:1'\n    },\n    ulaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    alaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    Qclp: {\n        lossy: true,\n        format: 'QUALCOMM PureVoice'\n    },\n    '.mp3': {\n        lossy: true,\n        format: 'MPEG-1 layer 3'\n    },\n    alac: {\n        lossy: false,\n        format: 'ALAC'\n    },\n    'ac-3': {\n        lossy: true,\n        format: 'AC-3'\n    },\n    mp4a: {\n        lossy: true,\n        format: 'MPEG-4/AAC'\n    },\n    mp4s: {\n        lossy: true,\n        format: 'MP4S'\n    },\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\n    c608: {\n        lossy: true,\n        format: 'CEA-608'\n    },\n    c708: {\n        lossy: true,\n        format: 'CEA-708'\n    }\n};\nfunction distinct(value, index, self) {\n    return self.indexOf(value) === index;\n}\n/*\n * Parser for the MP4 (MPEG-4 Part 14) container format\n * Standard: ISO/IEC 14496-14\n * supporting:\n * - QuickTime container\n * - MP4 File Format\n * - 3GPP file format\n * - 3GPP2 file format\n *\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\n * Support for Apple iTunes tags as found in a M4A/M4V files.\n * Ref:\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\n */\nclass MP4Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.atomParsers = {\n            /**\n             * Parse movie header (mvhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\n             */\n            mvhd: async (len) => {\n                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\n            },\n            /**\n             * Parse media header (mdhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\n             */\n            mdhd: async (len) => {\n                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\n                const td = this.getTrackDescription();\n                td.creationTime = mdhd_data.creationTime;\n                td.modificationTime = mdhd_data.modificationTime;\n                td.timeScale = mdhd_data.timeScale;\n                td.duration = mdhd_data.duration;\n            },\n            chap: async (len) => {\n                const td = this.getTrackDescription();\n                const trackIds = [];\n                while (len >= Token.UINT32_BE.len) {\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\n                    len -= Token.UINT32_BE.len;\n                }\n                td.chapterList = trackIds;\n            },\n            tkhd: async (len) => {\n                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));\n                this.tracks.push(track);\n            },\n            /**\n             * Parse mdat atom.\n             * Will scan for chapters\n             */\n            mdat: async (len) => {\n                this.audioLengthInBytes = len;\n                this.calculateBitRate();\n                if (this.options.includeChapters) {\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\n                    if (trackWithChapters.length === 1) {\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\n                        if (chapterTracks.length === 1) {\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\n                        }\n                    }\n                }\n                await this.tokenizer.ignore(len);\n            },\n            ftyp: async (len) => {\n                const types = [];\n                while (len > 0) {\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\n                    len -= AtomToken.ftyp.len;\n                    const value = ftype.type.replace(/\\W/g, '');\n                    if (value.length > 0) {\n                        types.push(value); // unshift for backward compatibility\n                    }\n                }\n                debug(`ftyp: ${types.join('/')}`);\n                const x = types.filter(distinct).join('/');\n                this.metadata.setFormat('container', x);\n            },\n            /**\n             * Parse sample description atom\n             */\n            stsd: async (len) => {\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\n                const trackDescription = this.getTrackDescription();\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n            },\n            /**\n             * sample-to-Chunk Atoms\n             */\n            stsc: async (len) => {\n                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\n            },\n            /**\n             * time to sample\n             */\n            stts: async (len) => {\n                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));\n                this.getTrackDescription().timeToSampleTable = stts.entries;\n            },\n            /**\n             * Parse sample-sizes atom ('stsz')\n             */\n            stsz: async (len) => {\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\n                const td = this.getTrackDescription();\n                td.sampleSize = stsz.sampleSize;\n                td.sampleSizeTable = stsz.entries;\n            },\n            /**\n             * Parse chunk-offset atom ('stco')\n             */\n            stco: async (len) => {\n                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\n            },\n            date: async (len) => {\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\n                this.addTag('date', date);\n            }\n        };\n    }\n    static read_BE_Integer(array, signed) {\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\n        const token = Token[integerType];\n        if (!token) {\n            throw new Error('Token for integer type not found: \"' + integerType + '\"');\n        }\n        return Number(token.get(array, 0));\n    }\n    async parse() {\n        this.tracks = [];\n        let remainingFileSize = this.tokenizer.fileInfo.size;\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\n            try {\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\n                if (token.name === '\\0\\0\\0\\0') {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                    break;\n                }\n            }\n            catch (error) {\n                const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\n                debug(errMsg);\n                this.addWarning(errMsg);\n                break;\n            }\n            const rootAtom = await Atom_1.Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\n        }\n        // Post process metadata\n        const formatList = [];\n        this.tracks.forEach(track => {\n            const trackFormats = [];\n            track.soundSampleDescription.forEach(ssd => {\n                const streamInfo = {};\n                const encoderInfo = encoderDict[ssd.dataFormat];\n                if (encoderInfo) {\n                    trackFormats.push(encoderInfo.format);\n                    streamInfo.codecName = encoderInfo.format;\n                }\n                else {\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\n                }\n                if (ssd.description) {\n                    const { description } = ssd;\n                    if (description.sampleRate > 0) {\n                        streamInfo.type = type_1.TrackType.audio;\n                        streamInfo.audio = {\n                            samplingFrequency: description.sampleRate,\n                            bitDepth: description.sampleSize,\n                            channels: description.numAudioChannels\n                        };\n                    }\n                }\n                this.metadata.addStreamInfo(streamInfo);\n            });\n            if (trackFormats.length >= 1) {\n                formatList.push(trackFormats.join('/'));\n            }\n        });\n        if (formatList.length > 0) {\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\n        }\n        const audioTracks = this.tracks.filter(track => {\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\n        });\n        if (audioTracks.length >= 1) {\n            const audioTrack = audioTracks[0];\n            const duration = audioTrack.duration / audioTrack.timeScale;\n            this.metadata.setFormat('duration', duration); // calculate duration in seconds\n            const ssd = audioTrack.soundSampleDescription[0];\n            if (ssd.description) {\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\n            }\n            const encoderInfo = encoderDict[ssd.dataFormat];\n            if (encoderInfo) {\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\n            }\n            this.calculateBitRate();\n        }\n    }\n    async handleAtom(atom, remaining) {\n        if (atom.parent) {\n            switch (atom.parent.header.name) {\n                case 'ilst':\n                case '<id>':\n                    return this.parseMetadataItemData(atom);\n            }\n        }\n        // const payloadLength = atom.getPayloadLength(remaining);\n        if (this.atomParsers[atom.header.name]) {\n            return this.atomParsers[atom.header.name](remaining);\n        }\n        else {\n            debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\n            await this.tokenizer.ignore(remaining);\n        }\n    }\n    getTrackDescription() {\n        return this.tracks[this.tracks.length - 1];\n    }\n    calculateBitRate() {\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag(tagFormat, id, value);\n    }\n    addWarning(message) {\n        debug('Warning: ' + message);\n        this.metadata.addWarning(message);\n    }\n    /**\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\n     * @param metaAtom\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n     */\n    parseMetadataItemData(metaAtom) {\n        let tagKey = metaAtom.header.name;\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'data': // value atom\n                    return this.parseValueAtom(tagKey, child);\n                case 'name': // name atom (optional)\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\n                    tagKey += ':' + name.name;\n                    break;\n                case 'mean': // name atom (optional)\n                    const mean = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\n                    // console.log(\"  %s[%s] = %s\", tagKey, header.name, mean.name);\n                    tagKey += ':' + mean.name;\n                    break;\n                default:\n                    const dataAtom = await this.tokenizer.readToken(new Token.BufferType(payLoadLength));\n                    this.addWarning('Unsupported meta-item: ' + tagKey + '[' + child.header.name + '] => value=' + dataAtom.toString('hex') + ' ascii=' + dataAtom.toString('ascii'));\n            }\n        }, metaAtom.getPayloadLength(0));\n    }\n    async parseValueAtom(tagKey, metaAtom) {\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));\n        if (dataAtom.type.set !== 0) {\n            throw new Error('Unsupported type-set != 0: ' + dataAtom.type.set);\n        }\n        // Use well-known-type table\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\n        switch (dataAtom.type.type) {\n            case 0: // reserved: Reserved for use where no type needs to be indicated\n                switch (tagKey) {\n                    case 'trkn':\n                    case 'disk':\n                        const num = Token.UINT8.get(dataAtom.value, 3);\n                        const of = Token.UINT8.get(dataAtom.value, 5);\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\n                        this.addTag(tagKey, num + '/' + of);\n                        break;\n                    case 'gnre':\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\n                        const genreStr = ID3v1Parser_1.Genres[genreInt - 1];\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\n                        this.addTag(tagKey, genreStr);\n                        break;\n                    default:\n                    // console.log(\"  reserved-data: name=%s, len=%s, set=%s, type=%s, locale=%s, value{ hex=%s, ascii=%s }\",\n                    // header.name, header.length, dataAtom.type.set, dataAtom.type.type, dataAtom.locale, dataAtom.value.toString('hex'), dataAtom.value.toString('ascii'));\n                }\n                break;\n            case 1: // UTF-8: Without any count or NULL terminator\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\n                this.addTag(tagKey, dataAtom.value.toString('utf-8'));\n                break;\n            case 13: // JPEG\n                if (this.options.skipCovers)\n                    break;\n                this.addTag(tagKey, {\n                    format: 'image/jpeg',\n                    data: Buffer.from(dataAtom.value)\n                });\n                break;\n            case 14: // PNG\n                if (this.options.skipCovers)\n                    break;\n                this.addTag(tagKey, {\n                    format: 'image/png',\n                    data: Buffer.from(dataAtom.value)\n                });\n                break;\n            case 21: // BE Signed Integer\n                this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\n                break;\n            case 22: // BE Unsigned Integer\n                this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\n                break;\n            case 65: // An 8-bit signed integer\n                this.addTag(tagKey, dataAtom.value.readInt8(0));\n                break;\n            case 66: // A big-endian 16-bit signed integer\n                this.addTag(tagKey, dataAtom.value.readInt16BE(0));\n                break;\n            case 67: // A big-endian 32-bit signed integer\n                this.addTag(tagKey, dataAtom.value.readInt32BE(0));\n                break;\n            default:\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\n        }\n    }\n    /**\n     * @param sampleDescription\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\n     */\n    parseSoundSampleDescription(sampleDescription) {\n        const ssd = {\n            dataFormat: sampleDescription.dataFormat,\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\n        };\n        let offset = 0;\n        const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\n        offset += AtomToken.SoundSampleDescriptionVersion.len;\n        if (version.version === 0 || version.version === 1) {\n            // Sound Sample Description (Version 0)\n            ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\n        }\n        else {\n            debug(`Warning: sound-sample-description ${version} not implemented`);\n        }\n        return ssd;\n    }\n    async parseChapterTrack(chapterTrack, track, len) {\n        if (!chapterTrack.sampleSize) {\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\n        }\n        const chapters = [];\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\n            len -= nextChunkLen + sampleSize;\n            if (len < 0)\n                throw new Error('Chapter chunk exceeding token length');\n            await this.tokenizer.ignore(nextChunkLen);\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\n            debug(`Chapter ${i + 1}: ${title}`);\n            const chapter = {\n                title,\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\n            };\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\n            chapters.push(chapter);\n        }\n        this.metadata.setFormat('chapters', chapters);\n        await this.tokenizer.ignore(len);\n    }\n    findSampleOffset(track, chapterOffset) {\n        let totalDuration = 0;\n        track.timeToSampleTable.forEach(e => {\n            totalDuration += e.count * e.duration;\n        });\n        debug(`Total duration=${totalDuration}`);\n        let chunkIndex = 0;\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\n            ++chunkIndex;\n        }\n        return this.getChunkDuration(chunkIndex + 1, track);\n    }\n    getChunkDuration(chunkId, track) {\n        let ttsi = 0;\n        let ttsc = track.timeToSampleTable[ttsi].count;\n        let ttsd = track.timeToSampleTable[ttsi].duration;\n        let curChunkId = 1;\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n        let totalDuration = 0;\n        while (curChunkId < chunkId) {\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\n            totalDuration += nrOfSamples * ttsd;\n            ttsc -= nrOfSamples;\n            samplesPerChunk -= nrOfSamples;\n            if (samplesPerChunk === 0) {\n                ++curChunkId;\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n            }\n            else {\n                ++ttsi;\n                ttsc = track.timeToSampleTable[ttsi].count;\n                ttsd = track.timeToSampleTable[ttsi].duration;\n            }\n        }\n        return totalDuration;\n    }\n    getSamplesPerChunk(chunkId, stcTable) {\n        for (let i = 0; i < stcTable.length - 1; ++i) {\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\n                return stcTable[i].samplesPerChunk;\n            }\n        }\n        return stcTable[stcTable.length - 1].samplesPerChunk;\n    }\n}\nexports.MP4Parser = MP4Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wNC9NUDRQYXJzZXIuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixnQkFBZ0IsbUJBQU8sQ0FBQyxrREFBTztBQUMvQixjQUFjLG1CQUFPLENBQUMsNERBQWE7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ3JELHNCQUFzQixtQkFBTyxDQUFDLG9GQUFzQjtBQUNwRCxlQUFlLG1CQUFPLENBQUMsMERBQVM7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLDZEQUFRO0FBQy9CLGtCQUFrQixtQkFBTyxDQUFDLHVFQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0EsK0JBQStCLGdCQUFnQjtBQUMvQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Qsd0JBQXdCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCx3QkFBd0IsSUFBSSxjQUFjO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGVBQWU7QUFDOUQ7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGNBQWMsZ0JBQWdCLFVBQVU7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsa0JBQWtCO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixNQUFNO0FBQ2hDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsTUFBTTtBQUNoQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxPQUFPLDZDQUE2QyxtQkFBbUI7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsU0FBUztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscURBQXFEO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsTUFBTSxJQUFJLE1BQU07QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsY0FBYyxXQUFXLHFCQUFxQixHQUFHLHdCQUF3QjtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsZ0NBQWdDLGNBQWM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXA0L01QNFBhcnNlci5qcz9kZjUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NUDRQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBCYXNpY1BhcnNlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9CYXNpY1BhcnNlclwiKTtcbmNvbnN0IElEM3YxUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vaWQzdjEvSUQzdjFQYXJzZXJcIik7XG5jb25zdCB0eXBlXzEgPSByZXF1aXJlKFwiLi4vdHlwZVwiKTtcbmNvbnN0IEF0b21fMSA9IHJlcXVpcmUoXCIuL0F0b21cIik7XG5jb25zdCBBdG9tVG9rZW4gPSByZXF1aXJlKFwiLi9BdG9tVG9rZW5cIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6TVA0Jyk7XG5jb25zdCB0YWdGb3JtYXQgPSAnaVR1bmVzJztcbmNvbnN0IGVuY29kZXJEaWN0ID0ge1xuICAgIHJhdzoge1xuICAgICAgICBsb3NzeTogZmFsc2UsXG4gICAgICAgIGZvcm1hdDogJ3JhdydcbiAgICB9LFxuICAgIE1BQzM6IHtcbiAgICAgICAgbG9zc3k6IHRydWUsXG4gICAgICAgIGZvcm1hdDogJ01BQ0UgMzoxJ1xuICAgIH0sXG4gICAgTUFDNjoge1xuICAgICAgICBsb3NzeTogdHJ1ZSxcbiAgICAgICAgZm9ybWF0OiAnTUFDRSA2OjEnXG4gICAgfSxcbiAgICBpbWE0OiB7XG4gICAgICAgIGxvc3N5OiB0cnVlLFxuICAgICAgICBmb3JtYXQ6ICdJTUEgNDoxJ1xuICAgIH0sXG4gICAgdWxhdzoge1xuICAgICAgICBsb3NzeTogdHJ1ZSxcbiAgICAgICAgZm9ybWF0OiAndUxhdyAyOjEnXG4gICAgfSxcbiAgICBhbGF3OiB7XG4gICAgICAgIGxvc3N5OiB0cnVlLFxuICAgICAgICBmb3JtYXQ6ICd1TGF3IDI6MSdcbiAgICB9LFxuICAgIFFjbHA6IHtcbiAgICAgICAgbG9zc3k6IHRydWUsXG4gICAgICAgIGZvcm1hdDogJ1FVQUxDT01NIFB1cmVWb2ljZSdcbiAgICB9LFxuICAgICcubXAzJzoge1xuICAgICAgICBsb3NzeTogdHJ1ZSxcbiAgICAgICAgZm9ybWF0OiAnTVBFRy0xIGxheWVyIDMnXG4gICAgfSxcbiAgICBhbGFjOiB7XG4gICAgICAgIGxvc3N5OiBmYWxzZSxcbiAgICAgICAgZm9ybWF0OiAnQUxBQydcbiAgICB9LFxuICAgICdhYy0zJzoge1xuICAgICAgICBsb3NzeTogdHJ1ZSxcbiAgICAgICAgZm9ybWF0OiAnQUMtMydcbiAgICB9LFxuICAgIG1wNGE6IHtcbiAgICAgICAgbG9zc3k6IHRydWUsXG4gICAgICAgIGZvcm1hdDogJ01QRUctNC9BQUMnXG4gICAgfSxcbiAgICBtcDRzOiB7XG4gICAgICAgIGxvc3N5OiB0cnVlLFxuICAgICAgICBmb3JtYXQ6ICdNUDRTJ1xuICAgIH0sXG4gICAgLy8gQ2xvc2VkIENhcHRpb25pbmcgTWVkaWEsIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2FyY2hpdmUvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9RVEZGQ2hhcDMvcXRmZjMuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDA5MzktQ0gyMDUtU1c4N1xuICAgIGM2MDg6IHtcbiAgICAgICAgbG9zc3k6IHRydWUsXG4gICAgICAgIGZvcm1hdDogJ0NFQS02MDgnXG4gICAgfSxcbiAgICBjNzA4OiB7XG4gICAgICAgIGxvc3N5OiB0cnVlLFxuICAgICAgICBmb3JtYXQ6ICdDRUEtNzA4J1xuICAgIH1cbn07XG5mdW5jdGlvbiBkaXN0aW5jdCh2YWx1ZSwgaW5kZXgsIHNlbGYpIHtcbiAgICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG59XG4vKlxuICogUGFyc2VyIGZvciB0aGUgTVA0IChNUEVHLTQgUGFydCAxNCkgY29udGFpbmVyIGZvcm1hdFxuICogU3RhbmRhcmQ6IElTTy9JRUMgMTQ0OTYtMTRcbiAqIHN1cHBvcnRpbmc6XG4gKiAtIFF1aWNrVGltZSBjb250YWluZXJcbiAqIC0gTVA0IEZpbGUgRm9ybWF0XG4gKiAtIDNHUFAgZmlsZSBmb3JtYXRcbiAqIC0gM0dQUDIgZmlsZSBmb3JtYXRcbiAqXG4gKiBNUEVHLTQgQXVkaW8gLyBQYXJ0IDMgKC5tNGEpJiBNUEVHIDQgVmlkZW8gKG00diwgbXA0KSBleHRlbnNpb24uXG4gKiBTdXBwb3J0IGZvciBBcHBsZSBpVHVuZXMgdGFncyBhcyBmb3VuZCBpbiBhIE00QS9NNFYgZmlsZXMuXG4gKiBSZWY6XG4gKiAgIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT19iYXNlX21lZGlhX2ZpbGVfZm9ybWF0XG4gKiAgIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2FyY2hpdmUvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9NZXRhZGF0YS9NZXRhZGF0YS5odG1sXG4gKiAgIGh0dHA6Ly9hdG9taWNwYXJzbGV5LnNvdXJjZWZvcmdlLm5ldC9tcGVnLTRmaWxlcy5odG1sXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9zZXJnaW9tYjIvbGlibXA0djIvd2lraS9pVHVuZXNNZXRhZGF0YVxuICogICBodHRwczovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHAvUXVpY2tUaW1lX2NvbnRhaW5lclxuICovXG5jbGFzcyBNUDRQYXJzZXIgZXh0ZW5kcyBCYXNpY1BhcnNlcl8xLkJhc2ljUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5hdG9tUGFyc2VycyA9IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFyc2UgbW92aWUgaGVhZGVyIChtdmhkKSBhdG9tXG4gICAgICAgICAgICAgKiBSZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2FyY2hpdmUvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9RVEZGQ2hhcDIvcXRmZjIuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDA5MzktQ0gyMDQtNTYzMTNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbXZoZDogYXN5bmMgKGxlbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG12aGQgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEF0b21Ub2tlbi5NdmhkQXRvbShsZW4pKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY3JlYXRpb25UaW1lJywgbXZoZC5jcmVhdGlvblRpbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdtb2RpZmljYXRpb25UaW1lJywgbXZoZC5tb2RpZmljYXRpb25UaW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBhcnNlIG1lZGlhIGhlYWRlciAobWRoZCkgYXRvbVxuICAgICAgICAgICAgICogUmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9hcmNoaXZlL2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvUVRGRkNoYXAyL3F0ZmYyLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMjA0LTI1NjE1XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1kaGQ6IGFzeW5jIChsZW4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZGhkX2RhdGEgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEF0b21Ub2tlbi5NZGhkQXRvbShsZW4pKTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnBhcnNlX214aGQobWRoZF9kYXRhLCB0aGlzLmN1cnJlbnRUcmFjayk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGQgPSB0aGlzLmdldFRyYWNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICB0ZC5jcmVhdGlvblRpbWUgPSBtZGhkX2RhdGEuY3JlYXRpb25UaW1lO1xuICAgICAgICAgICAgICAgIHRkLm1vZGlmaWNhdGlvblRpbWUgPSBtZGhkX2RhdGEubW9kaWZpY2F0aW9uVGltZTtcbiAgICAgICAgICAgICAgICB0ZC50aW1lU2NhbGUgPSBtZGhkX2RhdGEudGltZVNjYWxlO1xuICAgICAgICAgICAgICAgIHRkLmR1cmF0aW9uID0gbWRoZF9kYXRhLmR1cmF0aW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYXA6IGFzeW5jIChsZW4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZCA9IHRoaXMuZ2V0VHJhY2tEZXNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrSWRzID0gW107XG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+PSBUb2tlbi5VSU5UMzJfQkUubGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrSWRzLnB1c2goYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZE51bWJlcihUb2tlbi5VSU5UMzJfQkUpKTtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IFRva2VuLlVJTlQzMl9CRS5sZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRkLmNoYXB0ZXJMaXN0ID0gdHJhY2tJZHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGtoZDogYXN5bmMgKGxlbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gKGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXRvbVRva2VuLlRyYWNrSGVhZGVyQXRvbShsZW4pKSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYXJzZSBtZGF0IGF0b20uXG4gICAgICAgICAgICAgKiBXaWxsIHNjYW4gZm9yIGNoYXB0ZXJzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1kYXQ6IGFzeW5jIChsZW4pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvTGVuZ3RoSW5CeXRlcyA9IGxlbjtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUJpdFJhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmluY2x1ZGVDaGFwdGVycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFja1dpdGhDaGFwdGVycyA9IHRoaXMudHJhY2tzLmZpbHRlcih0cmFjayA9PiB0cmFjay5jaGFwdGVyTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFja1dpdGhDaGFwdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXB0ZXJUcmFja0lkcyA9IHRyYWNrV2l0aENoYXB0ZXJzWzBdLmNoYXB0ZXJMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcHRlclRyYWNrcyA9IHRoaXMudHJhY2tzLmZpbHRlcih0cmFjayA9PiBjaGFwdGVyVHJhY2tJZHMuaW5kZXhPZih0cmFjay50cmFja0lkKSAhPT0gLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXB0ZXJUcmFja3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDaGFwdGVyVHJhY2soY2hhcHRlclRyYWNrc1swXSwgdHJhY2tXaXRoQ2hhcHRlcnNbMF0sIGxlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlbml6ZXIuaWdub3JlKGxlbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnR5cDogYXN5bmMgKGxlbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVzID0gW107XG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnR5cGUgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oQXRvbVRva2VuLmZ0eXApO1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gQXRvbVRva2VuLmZ0eXAubGVuO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZ0eXBlLnR5cGUucmVwbGFjZSgvXFxXL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVzLnB1c2godmFsdWUpOyAvLyB1bnNoaWZ0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVidWcoYGZ0eXA6ICR7dHlwZXMuam9pbignLycpfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSB0eXBlcy5maWx0ZXIoZGlzdGluY3QpLmpvaW4oJy8nKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29udGFpbmVyJywgeCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYXJzZSBzYW1wbGUgZGVzY3JpcHRpb24gYXRvbVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdHNkOiBhc3luYyAobGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RzZCA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXRvbVRva2VuLlN0c2RBdG9tKGxlbikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrRGVzY3JpcHRpb24gPSB0aGlzLmdldFRyYWNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICB0cmFja0Rlc2NyaXB0aW9uLnNvdW5kU2FtcGxlRGVzY3JpcHRpb24gPSBzdHNkLnRhYmxlLm1hcChkZkVudHJ5ID0+IHRoaXMucGFyc2VTb3VuZFNhbXBsZURlc2NyaXB0aW9uKGRmRW50cnkpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHNhbXBsZS10by1DaHVuayBBdG9tc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdHNjOiBhc3luYyAobGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RzYyA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXRvbVRva2VuLlN0c2NBdG9tKGxlbikpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0VHJhY2tEZXNjcmlwdGlvbigpLnNhbXBsZVRvQ2h1bmtUYWJsZSA9IHN0c2MuZW50cmllcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHRpbWUgdG8gc2FtcGxlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN0dHM6IGFzeW5jIChsZW4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHRzID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBBdG9tVG9rZW4uU3R0c0F0b20obGVuKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRUcmFja0Rlc2NyaXB0aW9uKCkudGltZVRvU2FtcGxlVGFibGUgPSBzdHRzLmVudHJpZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYXJzZSBzYW1wbGUtc2l6ZXMgYXRvbSAoJ3N0c3onKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdHN6OiBhc3luYyAobGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RzeiA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXRvbVRva2VuLlN0c3pBdG9tKGxlbikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRkID0gdGhpcy5nZXRUcmFja0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGQuc2FtcGxlU2l6ZSA9IHN0c3ouc2FtcGxlU2l6ZTtcbiAgICAgICAgICAgICAgICB0ZC5zYW1wbGVTaXplVGFibGUgPSBzdHN6LmVudHJpZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYXJzZSBjaHVuay1vZmZzZXQgYXRvbSAoJ3N0Y28nKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdGNvOiBhc3luYyAobGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RjbyA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXRvbVRva2VuLlN0Y29BdG9tKGxlbikpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0VHJhY2tEZXNjcmlwdGlvbigpLmNodW5rT2Zmc2V0VGFibGUgPSBzdGNvLmVudHJpZXM7IC8vIHJlbWVtYmVyIGNodW5rIG9mZnNldHNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiBhc3luYyAobGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgVG9rZW4uU3RyaW5nVHlwZShsZW4sICd1dGYtOCcpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRhZygnZGF0ZScsIGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgcmVhZF9CRV9JbnRlZ2VyKGFycmF5LCBzaWduZWQpIHtcbiAgICAgICAgY29uc3QgaW50ZWdlclR5cGUgPSAoc2lnbmVkID8gJ0lOVCcgOiAnVUlOVCcpICsgYXJyYXkubGVuZ3RoICogOCArIChhcnJheS5sZW5ndGggPiAxID8gJ19CRScgOiAnJyk7XG4gICAgICAgIGNvbnN0IHRva2VuID0gVG9rZW5baW50ZWdlclR5cGVdO1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VuIGZvciBpbnRlZ2VyIHR5cGUgbm90IGZvdW5kOiBcIicgKyBpbnRlZ2VyVHlwZSArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIodG9rZW4uZ2V0KGFycmF5LCAwKSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlKCkge1xuICAgICAgICB0aGlzLnRyYWNrcyA9IFtdO1xuICAgICAgICBsZXQgcmVtYWluaW5nRmlsZVNpemUgPSB0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplO1xuICAgICAgICB3aGlsZSAoIXRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUgfHwgcmVtYWluaW5nRmlsZVNpemUgPiAwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucGVla1Rva2VuKEF0b21Ub2tlbi5IZWFkZXIpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5uYW1lID09PSAnXFwwXFwwXFwwXFwwJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPSBgRXJyb3IgYXQgb2Zmc2V0PSR7dGhpcy50b2tlbml6ZXIucG9zaXRpb259OiBib3guaWQ9MGA7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkV2FybmluZyhlcnJNc2cpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPSBgRXJyb3IgYXQgb2Zmc2V0PSR7dGhpcy50b2tlbml6ZXIucG9zaXRpb259OiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhlcnJNc2cpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkV2FybmluZyhlcnJNc2cpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm9vdEF0b20gPSBhd2FpdCBBdG9tXzEuQXRvbS5yZWFkQXRvbSh0aGlzLnRva2VuaXplciwgKGF0b20sIHJlbWFpbmluZykgPT4gdGhpcy5oYW5kbGVBdG9tKGF0b20sIHJlbWFpbmluZyksIG51bGwsIHJlbWFpbmluZ0ZpbGVTaXplKTtcbiAgICAgICAgICAgIHJlbWFpbmluZ0ZpbGVTaXplIC09IHJvb3RBdG9tLmhlYWRlci5sZW5ndGggPT09IEJpZ0ludCgwKSA/IHJlbWFpbmluZ0ZpbGVTaXplIDogTnVtYmVyKHJvb3RBdG9tLmhlYWRlci5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBvc3QgcHJvY2VzcyBtZXRhZGF0YVxuICAgICAgICBjb25zdCBmb3JtYXRMaXN0ID0gW107XG4gICAgICAgIHRoaXMudHJhY2tzLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHJhY2tGb3JtYXRzID0gW107XG4gICAgICAgICAgICB0cmFjay5zb3VuZFNhbXBsZURlc2NyaXB0aW9uLmZvckVhY2goc3NkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW1JbmZvID0ge307XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlckluZm8gPSBlbmNvZGVyRGljdFtzc2QuZGF0YUZvcm1hdF07XG4gICAgICAgICAgICAgICAgaWYgKGVuY29kZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrRm9ybWF0cy5wdXNoKGVuY29kZXJJbmZvLmZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm8uY29kZWNOYW1lID0gZW5jb2RlckluZm8uZm9ybWF0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtSW5mby5jb2RlY05hbWUgPSBgPCR7c3NkLmRhdGFGb3JtYXR9PmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzc2QuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiB9ID0gc3NkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24uc2FtcGxlUmF0ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm8udHlwZSA9IHR5cGVfMS5UcmFja1R5cGUuYXVkaW87XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JbmZvLmF1ZGlvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsaW5nRnJlcXVlbmN5OiBkZXNjcmlwdGlvbi5zYW1wbGVSYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdERlcHRoOiBkZXNjcmlwdGlvbi5zYW1wbGVTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzOiBkZXNjcmlwdGlvbi5udW1BdWRpb0NoYW5uZWxzXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkU3RyZWFtSW5mbyhzdHJlYW1JbmZvKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRyYWNrRm9ybWF0cy5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdExpc3QucHVzaCh0cmFja0Zvcm1hdHMuam9pbignLycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmb3JtYXRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb2RlYycsIGZvcm1hdExpc3QuZmlsdGVyKGRpc3RpbmN0KS5qb2luKCcrJykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF1ZGlvVHJhY2tzID0gdGhpcy50cmFja3MuZmlsdGVyKHRyYWNrID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjay5zb3VuZFNhbXBsZURlc2NyaXB0aW9uLmxlbmd0aCA+PSAxICYmIHRyYWNrLnNvdW5kU2FtcGxlRGVzY3JpcHRpb25bMF0uZGVzY3JpcHRpb24gJiYgdHJhY2suc291bmRTYW1wbGVEZXNjcmlwdGlvblswXS5kZXNjcmlwdGlvbi5udW1BdWRpb0NoYW5uZWxzID4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhdWRpb1RyYWNrcy5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgY29uc3QgYXVkaW9UcmFjayA9IGF1ZGlvVHJhY2tzWzBdO1xuICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBhdWRpb1RyYWNrLmR1cmF0aW9uIC8gYXVkaW9UcmFjay50aW1lU2NhbGU7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBkdXJhdGlvbik7IC8vIGNhbGN1bGF0ZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICAgICAgICBjb25zdCBzc2QgPSBhdWRpb1RyYWNrLnNvdW5kU2FtcGxlRGVzY3JpcHRpb25bMF07XG4gICAgICAgICAgICBpZiAoc3NkLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3NhbXBsZVJhdGUnLCBzc2QuZGVzY3JpcHRpb24uc2FtcGxlUmF0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHNQZXJTYW1wbGUnLCBzc2QuZGVzY3JpcHRpb24uc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mQ2hhbm5lbHMnLCBzc2QuZGVzY3JpcHRpb24ubnVtQXVkaW9DaGFubmVscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVySW5mbyA9IGVuY29kZXJEaWN0W3NzZC5kYXRhRm9ybWF0XTtcbiAgICAgICAgICAgIGlmIChlbmNvZGVySW5mbykge1xuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdsb3NzbGVzcycsICFlbmNvZGVySW5mby5sb3NzeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUJpdFJhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBoYW5kbGVBdG9tKGF0b20sIHJlbWFpbmluZykge1xuICAgICAgICBpZiAoYXRvbS5wYXJlbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYXRvbS5wYXJlbnQuaGVhZGVyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdpbHN0JzpcbiAgICAgICAgICAgICAgICBjYXNlICc8aWQ+JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VNZXRhZGF0YUl0ZW1EYXRhKGF0b20pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnN0IHBheWxvYWRMZW5ndGggPSBhdG9tLmdldFBheWxvYWRMZW5ndGgocmVtYWluaW5nKTtcbiAgICAgICAgaWYgKHRoaXMuYXRvbVBhcnNlcnNbYXRvbS5oZWFkZXIubmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0b21QYXJzZXJzW2F0b20uaGVhZGVyLm5hbWVdKHJlbWFpbmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWJ1ZyhgTm8gcGFyc2VyIGZvciBhdG9tIHBhdGg9JHthdG9tLmF0b21QYXRofSwgcGF5bG9hZC1sZW49JHtyZW1haW5pbmd9LCBpZ25vcmluZyBhdG9tYCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUocmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUcmFja0Rlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3NbdGhpcy50cmFja3MubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGNhbGN1bGF0ZUJpdFJhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmF1ZGlvTGVuZ3RoSW5CeXRlcyAmJiB0aGlzLm1ldGFkYXRhLmZvcm1hdC5kdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCA4ICogdGhpcy5hdWRpb0xlbmd0aEluQnl0ZXMgLyB0aGlzLm1ldGFkYXRhLmZvcm1hdC5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkVGFnKGlkLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFRhZyh0YWdGb3JtYXQsIGlkLCB2YWx1ZSk7XG4gICAgfVxuICAgIGFkZFdhcm5pbmcobWVzc2FnZSkge1xuICAgICAgICBkZWJ1ZygnV2FybmluZzogJyArIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFdhcm5pbmcobWVzc2FnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIGRhdGEgb2YgTWV0YS1pdGVtLWxpc3QtYXRvbSAoaXRlbSBvZiAnaWxzdCcgYXRvbSlcbiAgICAgKiBAcGFyYW0gbWV0YUF0b21cbiAgICAgKiBSZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2NvbnRlbnQvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9NZXRhZGF0YS9NZXRhZGF0YS5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDEtU1c4XG4gICAgICovXG4gICAgcGFyc2VNZXRhZGF0YUl0ZW1EYXRhKG1ldGFBdG9tKSB7XG4gICAgICAgIGxldCB0YWdLZXkgPSBtZXRhQXRvbS5oZWFkZXIubmFtZTtcbiAgICAgICAgcmV0dXJuIG1ldGFBdG9tLnJlYWRBdG9tcyh0aGlzLnRva2VuaXplciwgYXN5bmMgKGNoaWxkLCByZW1haW5pbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheUxvYWRMZW5ndGggPSBjaGlsZC5nZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZyk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoaWxkLmhlYWRlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0YSc6IC8vIHZhbHVlIGF0b21cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VWYWx1ZUF0b20odGFnS2V5LCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmFtZSc6IC8vIG5hbWUgYXRvbSAob3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEF0b21Ub2tlbi5OYW1lQXRvbShwYXlMb2FkTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRhZ0tleSArPSAnOicgKyBuYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21lYW4nOiAvLyBuYW1lIGF0b20gKG9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZWFuID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBBdG9tVG9rZW4uTmFtZUF0b20ocGF5TG9hZExlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiAgJXNbJXNdID0gJXNcIiwgdGFnS2V5LCBoZWFkZXIubmFtZSwgbWVhbi5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGFnS2V5ICs9ICc6JyArIG1lYW4ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YUF0b20gPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IFRva2VuLkJ1ZmZlclR5cGUocGF5TG9hZExlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFdhcm5pbmcoJ1Vuc3VwcG9ydGVkIG1ldGEtaXRlbTogJyArIHRhZ0tleSArICdbJyArIGNoaWxkLmhlYWRlci5uYW1lICsgJ10gPT4gdmFsdWU9JyArIGRhdGFBdG9tLnRvU3RyaW5nKCdoZXgnKSArICcgYXNjaWk9JyArIGRhdGFBdG9tLnRvU3RyaW5nKCdhc2NpaScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgbWV0YUF0b20uZ2V0UGF5bG9hZExlbmd0aCgwKSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlVmFsdWVBdG9tKHRhZ0tleSwgbWV0YUF0b20pIHtcbiAgICAgICAgY29uc3QgZGF0YUF0b20gPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEF0b21Ub2tlbi5EYXRhQXRvbShOdW1iZXIobWV0YUF0b20uaGVhZGVyLmxlbmd0aCkgLSBBdG9tVG9rZW4uSGVhZGVyLmxlbikpO1xuICAgICAgICBpZiAoZGF0YUF0b20udHlwZS5zZXQgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdHlwZS1zZXQgIT0gMDogJyArIGRhdGFBdG9tLnR5cGUuc2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2Ugd2VsbC1rbm93bi10eXBlIHRhYmxlXG4gICAgICAgIC8vIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvY29udGVudC9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL01ldGFkYXRhL01ldGFkYXRhLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMS1TVzM1XG4gICAgICAgIHN3aXRjaCAoZGF0YUF0b20udHlwZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDA6IC8vIHJlc2VydmVkOiBSZXNlcnZlZCBmb3IgdXNlIHdoZXJlIG5vIHR5cGUgbmVlZHMgdG8gYmUgaW5kaWNhdGVkXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0YWdLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJrbic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2snOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtID0gVG9rZW4uVUlOVDguZ2V0KGRhdGFBdG9tLnZhbHVlLCAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mID0gVG9rZW4uVUlOVDguZ2V0KGRhdGFBdG9tLnZhbHVlLCA1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiICAlc1tkYXRhXSA9ICVzLyVzXCIsIHRhZ0tleSwgbnVtLCBvZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhZyh0YWdLZXksIG51bSArICcvJyArIG9mKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdnbnJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdlbnJlSW50ID0gVG9rZW4uVUlOVDguZ2V0KGRhdGFBdG9tLnZhbHVlLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdlbnJlU3RyID0gSUQzdjFQYXJzZXJfMS5HZW5yZXNbZ2VucmVJbnQgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiICAlc1tkYXRhXSA9ICVzXCIsIHRhZ0tleSwgZ2VucmVTdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYWcodGFnS2V5LCBnZW5yZVN0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgIHJlc2VydmVkLWRhdGE6IG5hbWU9JXMsIGxlbj0lcywgc2V0PSVzLCB0eXBlPSVzLCBsb2NhbGU9JXMsIHZhbHVleyBoZXg9JXMsIGFzY2lpPSVzIH1cIixcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVhZGVyLm5hbWUsIGhlYWRlci5sZW5ndGgsIGRhdGFBdG9tLnR5cGUuc2V0LCBkYXRhQXRvbS50eXBlLnR5cGUsIGRhdGFBdG9tLmxvY2FsZSwgZGF0YUF0b20udmFsdWUudG9TdHJpbmcoJ2hleCcpLCBkYXRhQXRvbS52YWx1ZS50b1N0cmluZygnYXNjaWknKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOiAvLyBVVEYtODogV2l0aG91dCBhbnkgY291bnQgb3IgTlVMTCB0ZXJtaW5hdG9yXG4gICAgICAgICAgICBjYXNlIDE4OiAvLyBVbmtub3duOiBGb3VuZCBpbiBtNGIgaW4gY29tYmluYXRpb24gd2l0aCBhICfCqWdlbicgdGFnXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUYWcodGFnS2V5LCBkYXRhQXRvbS52YWx1ZS50b1N0cmluZygndXRmLTgnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEzOiAvLyBKUEVHXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5za2lwQ292ZXJzKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRhZyh0YWdLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAnaW1hZ2UvanBlZycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEJ1ZmZlci5mcm9tKGRhdGFBdG9tLnZhbHVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNDogLy8gUE5HXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5za2lwQ292ZXJzKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRhZyh0YWdLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogQnVmZmVyLmZyb20oZGF0YUF0b20udmFsdWUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIxOiAvLyBCRSBTaWduZWQgSW50ZWdlclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFnKHRhZ0tleSwgTVA0UGFyc2VyLnJlYWRfQkVfSW50ZWdlcihkYXRhQXRvbS52YWx1ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMjogLy8gQkUgVW5zaWduZWQgSW50ZWdlclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFnKHRhZ0tleSwgTVA0UGFyc2VyLnJlYWRfQkVfSW50ZWdlcihkYXRhQXRvbS52YWx1ZSwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjU6IC8vIEFuIDgtYml0IHNpZ25lZCBpbnRlZ2VyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUYWcodGFnS2V5LCBkYXRhQXRvbS52YWx1ZS5yZWFkSW50OCgwKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY2OiAvLyBBIGJpZy1lbmRpYW4gMTYtYml0IHNpZ25lZCBpbnRlZ2VyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUYWcodGFnS2V5LCBkYXRhQXRvbS52YWx1ZS5yZWFkSW50MTZCRSgwKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY3OiAvLyBBIGJpZy1lbmRpYW4gMzItYml0IHNpZ25lZCBpbnRlZ2VyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUYWcodGFnS2V5LCBkYXRhQXRvbS52YWx1ZS5yZWFkSW50MzJCRSgwKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuYWRkV2FybmluZyhgYXRvbSBrZXk9JHt0YWdLZXl9LCBoYXMgdW5rbm93biB3ZWxsLWtub3duLXR5cGUgKGRhdGEtdHlwZSk6ICR7ZGF0YUF0b20udHlwZS50eXBlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzYW1wbGVEZXNjcmlwdGlvblxuICAgICAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMy9xdGZmMy5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNS0xMjg5MTZcbiAgICAgKi9cbiAgICBwYXJzZVNvdW5kU2FtcGxlRGVzY3JpcHRpb24oc2FtcGxlRGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3Qgc3NkID0ge1xuICAgICAgICAgICAgZGF0YUZvcm1hdDogc2FtcGxlRGVzY3JpcHRpb24uZGF0YUZvcm1hdCxcbiAgICAgICAgICAgIGRhdGFSZWZlcmVuY2VJbmRleDogc2FtcGxlRGVzY3JpcHRpb24uZGF0YVJlZmVyZW5jZUluZGV4XG4gICAgICAgIH07XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gQXRvbVRva2VuLlNvdW5kU2FtcGxlRGVzY3JpcHRpb25WZXJzaW9uLmdldChzYW1wbGVEZXNjcmlwdGlvbi5kZXNjcmlwdGlvbiwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IEF0b21Ub2tlbi5Tb3VuZFNhbXBsZURlc2NyaXB0aW9uVmVyc2lvbi5sZW47XG4gICAgICAgIGlmICh2ZXJzaW9uLnZlcnNpb24gPT09IDAgfHwgdmVyc2lvbi52ZXJzaW9uID09PSAxKSB7XG4gICAgICAgICAgICAvLyBTb3VuZCBTYW1wbGUgRGVzY3JpcHRpb24gKFZlcnNpb24gMClcbiAgICAgICAgICAgIHNzZC5kZXNjcmlwdGlvbiA9IEF0b21Ub2tlbi5Tb3VuZFNhbXBsZURlc2NyaXB0aW9uVjAuZ2V0KHNhbXBsZURlc2NyaXB0aW9uLmRlc2NyaXB0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVidWcoYFdhcm5pbmc6IHNvdW5kLXNhbXBsZS1kZXNjcmlwdGlvbiAke3ZlcnNpb259IG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzc2Q7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlQ2hhcHRlclRyYWNrKGNoYXB0ZXJUcmFjaywgdHJhY2ssIGxlbikge1xuICAgICAgICBpZiAoIWNoYXB0ZXJUcmFjay5zYW1wbGVTaXplKSB7XG4gICAgICAgICAgICBpZiAoY2hhcHRlclRyYWNrLmNodW5rT2Zmc2V0VGFibGUubGVuZ3RoICE9PSBjaGFwdGVyVHJhY2suc2FtcGxlU2l6ZVRhYmxlLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVxdWFsIGNodW5rLW9mZnNldC10YWJsZSAmIHNhbXBsZS1zaXplLXRhYmxlIGxlbmd0aC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFwdGVycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXB0ZXJUcmFjay5jaHVua09mZnNldFRhYmxlLmxlbmd0aCAmJiBsZW4gPiAwOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rT2Zmc2V0ID0gY2hhcHRlclRyYWNrLmNodW5rT2Zmc2V0VGFibGVbaV07XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2h1bmtMZW4gPSBjaHVua09mZnNldCAtIHRoaXMudG9rZW5pemVyLnBvc2l0aW9uO1xuICAgICAgICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IGNoYXB0ZXJUcmFjay5zYW1wbGVTaXplID4gMCA/IGNoYXB0ZXJUcmFjay5zYW1wbGVTaXplIDogY2hhcHRlclRyYWNrLnNhbXBsZVNpemVUYWJsZVtpXTtcbiAgICAgICAgICAgIGxlbiAtPSBuZXh0Q2h1bmtMZW4gKyBzYW1wbGVTaXplO1xuICAgICAgICAgICAgaWYgKGxlbiA8IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaGFwdGVyIGNodW5rIGV4Y2VlZGluZyB0b2tlbiBsZW5ndGgnKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShuZXh0Q2h1bmtMZW4pO1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEF0b21Ub2tlbi5DaGFwdGVyVGV4dChzYW1wbGVTaXplKSk7XG4gICAgICAgICAgICBkZWJ1ZyhgQ2hhcHRlciAke2kgKyAxfTogJHt0aXRsZX1gKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYXB0ZXIgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgICAgc2FtcGxlT2Zmc2V0OiB0aGlzLmZpbmRTYW1wbGVPZmZzZXQodHJhY2ssIHRoaXMudG9rZW5pemVyLnBvc2l0aW9uKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlYnVnKGBDaGFwdGVyIHRpdGxlPSR7Y2hhcHRlci50aXRsZX0sIG9mZnNldD0ke2NoYXB0ZXIuc2FtcGxlT2Zmc2V0fS8ke3RoaXMudHJhY2tzWzBdLmR1cmF0aW9ufWApO1xuICAgICAgICAgICAgY2hhcHRlcnMucHVzaChjaGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY2hhcHRlcnMnLCBjaGFwdGVycyk7XG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShsZW4pO1xuICAgIH1cbiAgICBmaW5kU2FtcGxlT2Zmc2V0KHRyYWNrLCBjaGFwdGVyT2Zmc2V0KSB7XG4gICAgICAgIGxldCB0b3RhbER1cmF0aW9uID0gMDtcbiAgICAgICAgdHJhY2sudGltZVRvU2FtcGxlVGFibGUuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICAgIHRvdGFsRHVyYXRpb24gKz0gZS5jb3VudCAqIGUuZHVyYXRpb247XG4gICAgICAgIH0pO1xuICAgICAgICBkZWJ1ZyhgVG90YWwgZHVyYXRpb249JHt0b3RhbER1cmF0aW9ufWApO1xuICAgICAgICBsZXQgY2h1bmtJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChjaHVua0luZGV4IDwgdHJhY2suY2h1bmtPZmZzZXRUYWJsZS5sZW5ndGggJiYgdHJhY2suY2h1bmtPZmZzZXRUYWJsZVtjaHVua0luZGV4XSA8IGNoYXB0ZXJPZmZzZXQpIHtcbiAgICAgICAgICAgICsrY2h1bmtJbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaHVua0R1cmF0aW9uKGNodW5rSW5kZXggKyAxLCB0cmFjayk7XG4gICAgfVxuICAgIGdldENodW5rRHVyYXRpb24oY2h1bmtJZCwgdHJhY2spIHtcbiAgICAgICAgbGV0IHR0c2kgPSAwO1xuICAgICAgICBsZXQgdHRzYyA9IHRyYWNrLnRpbWVUb1NhbXBsZVRhYmxlW3R0c2ldLmNvdW50O1xuICAgICAgICBsZXQgdHRzZCA9IHRyYWNrLnRpbWVUb1NhbXBsZVRhYmxlW3R0c2ldLmR1cmF0aW9uO1xuICAgICAgICBsZXQgY3VyQ2h1bmtJZCA9IDE7XG4gICAgICAgIGxldCBzYW1wbGVzUGVyQ2h1bmsgPSB0aGlzLmdldFNhbXBsZXNQZXJDaHVuayhjdXJDaHVua0lkLCB0cmFjay5zYW1wbGVUb0NodW5rVGFibGUpO1xuICAgICAgICBsZXQgdG90YWxEdXJhdGlvbiA9IDA7XG4gICAgICAgIHdoaWxlIChjdXJDaHVua0lkIDwgY2h1bmtJZCkge1xuICAgICAgICAgICAgY29uc3QgbnJPZlNhbXBsZXMgPSBNYXRoLm1pbih0dHNjLCBzYW1wbGVzUGVyQ2h1bmspO1xuICAgICAgICAgICAgdG90YWxEdXJhdGlvbiArPSBuck9mU2FtcGxlcyAqIHR0c2Q7XG4gICAgICAgICAgICB0dHNjIC09IG5yT2ZTYW1wbGVzO1xuICAgICAgICAgICAgc2FtcGxlc1BlckNodW5rIC09IG5yT2ZTYW1wbGVzO1xuICAgICAgICAgICAgaWYgKHNhbXBsZXNQZXJDaHVuayA9PT0gMCkge1xuICAgICAgICAgICAgICAgICsrY3VyQ2h1bmtJZDtcbiAgICAgICAgICAgICAgICBzYW1wbGVzUGVyQ2h1bmsgPSB0aGlzLmdldFNhbXBsZXNQZXJDaHVuayhjdXJDaHVua0lkLCB0cmFjay5zYW1wbGVUb0NodW5rVGFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKyt0dHNpO1xuICAgICAgICAgICAgICAgIHR0c2MgPSB0cmFjay50aW1lVG9TYW1wbGVUYWJsZVt0dHNpXS5jb3VudDtcbiAgICAgICAgICAgICAgICB0dHNkID0gdHJhY2sudGltZVRvU2FtcGxlVGFibGVbdHRzaV0uZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsRHVyYXRpb247XG4gICAgfVxuICAgIGdldFNhbXBsZXNQZXJDaHVuayhjaHVua0lkLCBzdGNUYWJsZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0Y1RhYmxlLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICAgICAgaWYgKGNodW5rSWQgPj0gc3RjVGFibGVbaV0uZmlyc3RDaHVuayAmJiBjaHVua0lkIDwgc3RjVGFibGVbaSArIDFdLmZpcnN0Q2h1bmspIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RjVGFibGVbaV0uc2FtcGxlc1BlckNodW5rO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGNUYWJsZVtzdGNUYWJsZS5sZW5ndGggLSAxXS5zYW1wbGVzUGVyQ2h1bms7XG4gICAgfVxufVxuZXhwb3J0cy5NUDRQYXJzZXIgPSBNUDRQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mp4/MP4Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mp4/MP4TagMapper.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/MP4TagMapper.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MP4TagMapper = exports.tagType = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n */\nconst mp4TagMap = {\n    '©nam': 'title',\n    '©ART': 'artist',\n    aART: 'albumartist',\n    /**\n     * ToDo: Album artist seems to be stored here while Picard documentation says: aART\n     */\n    '----:com.apple.iTunes:Band': 'albumartist',\n    '©alb': 'album',\n    '©day': 'date',\n    '©cmt': 'comment',\n    '©com': 'comment',\n    trkn: 'track',\n    disk: 'disk',\n    '©gen': 'genre',\n    covr: 'picture',\n    '©wrt': 'composer',\n    '©lyr': 'lyrics',\n    soal: 'albumsort',\n    sonm: 'titlesort',\n    soar: 'artistsort',\n    soaa: 'albumartistsort',\n    soco: 'composersort',\n    '----:com.apple.iTunes:LYRICIST': 'lyricist',\n    '----:com.apple.iTunes:CONDUCTOR': 'conductor',\n    '----:com.apple.iTunes:REMIXER': 'remixer',\n    '----:com.apple.iTunes:ENGINEER': 'engineer',\n    '----:com.apple.iTunes:PRODUCER': 'producer',\n    '----:com.apple.iTunes:DJMIXER': 'djmixer',\n    '----:com.apple.iTunes:MIXER': 'mixer',\n    '----:com.apple.iTunes:LABEL': 'label',\n    '©grp': 'grouping',\n    '----:com.apple.iTunes:SUBTITLE': 'subtitle',\n    '----:com.apple.iTunes:DISCSUBTITLE': 'discsubtitle',\n    cpil: 'compilation',\n    tmpo: 'bpm',\n    '----:com.apple.iTunes:MOOD': 'mood',\n    '----:com.apple.iTunes:MEDIA': 'media',\n    '----:com.apple.iTunes:CATALOGNUMBER': 'catalognumber',\n    tvsh: 'tvShow',\n    tvsn: 'tvSeason',\n    tves: 'tvEpisode',\n    sosn: 'tvShowSort',\n    tven: 'tvEpisodeId',\n    tvnn: 'tvNetwork',\n    pcst: 'podcast',\n    purl: 'podcasturl',\n    '----:com.apple.iTunes:MusicBrainz Album Status': 'releasestatus',\n    '----:com.apple.iTunes:MusicBrainz Album Type': 'releasetype',\n    '----:com.apple.iTunes:MusicBrainz Album Release Country': 'releasecountry',\n    '----:com.apple.iTunes:SCRIPT': 'script',\n    '----:com.apple.iTunes:LANGUAGE': 'language',\n    cprt: 'copyright',\n    '©cpy': 'copyright',\n    '----:com.apple.iTunes:LICENSE': 'license',\n    '©too': 'encodedby',\n    pgap: 'gapless',\n    '----:com.apple.iTunes:BARCODE': 'barcode',\n    '----:com.apple.iTunes:ISRC': 'isrc',\n    '----:com.apple.iTunes:ASIN': 'asin',\n    '----:com.apple.iTunes:NOTES': 'comment',\n    '----:com.apple.iTunes:MusicBrainz Track Id': 'musicbrainz_recordingid',\n    '----:com.apple.iTunes:MusicBrainz Release Track Id': 'musicbrainz_trackid',\n    '----:com.apple.iTunes:MusicBrainz Album Id': 'musicbrainz_albumid',\n    '----:com.apple.iTunes:MusicBrainz Artist Id': 'musicbrainz_artistid',\n    '----:com.apple.iTunes:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\n    '----:com.apple.iTunes:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\n    '----:com.apple.iTunes:MusicBrainz Work Id': 'musicbrainz_workid',\n    '----:com.apple.iTunes:MusicBrainz TRM Id': 'musicbrainz_trmid',\n    '----:com.apple.iTunes:MusicBrainz Disc Id': 'musicbrainz_discid',\n    '----:com.apple.iTunes:Acoustid Id': 'acoustid_id',\n    '----:com.apple.iTunes:Acoustid Fingerprint': 'acoustid_fingerprint',\n    '----:com.apple.iTunes:MusicIP PUID': 'musicip_puid',\n    '----:com.apple.iTunes:fingerprint': 'musicip_fingerprint',\n    '----:com.apple.iTunes:replaygain_track_gain': 'replaygain_track_gain',\n    '----:com.apple.iTunes:replaygain_track_peak': 'replaygain_track_peak',\n    '----:com.apple.iTunes:replaygain_album_gain': 'replaygain_album_gain',\n    '----:com.apple.iTunes:replaygain_album_peak': 'replaygain_album_peak',\n    '----:com.apple.iTunes:replaygain_track_minmax': 'replaygain_track_minmax',\n    '----:com.apple.iTunes:replaygain_album_minmax': 'replaygain_album_minmax',\n    '----:com.apple.iTunes:replaygain_undo': 'replaygain_undo',\n    // Additional mappings:\n    gnre: 'genre',\n    '----:com.apple.iTunes:ALBUMARTISTSORT': 'albumartistsort',\n    '----:com.apple.iTunes:ARTISTS': 'artists',\n    '----:com.apple.iTunes:ORIGINALDATE': 'originaldate',\n    '----:com.apple.iTunes:ORIGINALYEAR': 'originalyear',\n    // '----:com.apple.iTunes:PERFORMER': 'performer'\n    desc: 'description',\n    ldes: 'longDescription',\n    '©mvn': 'movement',\n    '©mvi': 'movementIndex',\n    '©mvc': 'movementTotal',\n    '©wrk': 'work',\n    catg: 'category',\n    egid: 'podcastId',\n    hdvd: 'hdVideo',\n    keyw: 'keywords',\n    shwm: 'showMovement',\n    stik: 'stik'\n};\nexports.tagType = 'iTunes';\nclass MP4TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super([exports.tagType], mp4TagMap);\n    }\n}\nexports.MP4TagMapper = MP4TagMapper;\n//# sourceMappingURL=MP4TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wNC9NUDRUYWdNYXBwZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsZUFBZTtBQUN0QyxnQ0FBZ0MsbUJBQU8sQ0FBQywwR0FBaUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXA0L01QNFRhZ01hcHBlci5qcz8xMjIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NUDRUYWdNYXBwZXIgPSBleHBvcnRzLnRhZ1R5cGUgPSB2b2lkIDA7XG5jb25zdCBDYXNlSW5zZW5zaXRpdmVUYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXCIpO1xuLyoqXG4gKiBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZXJnaW9tYjIvbGlibXA0djIvd2lraS9pVHVuZXNNZXRhZGF0YVxuICovXG5jb25zdCBtcDRUYWdNYXAgPSB7XG4gICAgJ8KpbmFtJzogJ3RpdGxlJyxcbiAgICAnwqlBUlQnOiAnYXJ0aXN0JyxcbiAgICBhQVJUOiAnYWxidW1hcnRpc3QnLFxuICAgIC8qKlxuICAgICAqIFRvRG86IEFsYnVtIGFydGlzdCBzZWVtcyB0byBiZSBzdG9yZWQgaGVyZSB3aGlsZSBQaWNhcmQgZG9jdW1lbnRhdGlvbiBzYXlzOiBhQVJUXG4gICAgICovXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpCYW5kJzogJ2FsYnVtYXJ0aXN0JyxcbiAgICAnwqlhbGInOiAnYWxidW0nLFxuICAgICfCqWRheSc6ICdkYXRlJyxcbiAgICAnwqljbXQnOiAnY29tbWVudCcsXG4gICAgJ8KpY29tJzogJ2NvbW1lbnQnLFxuICAgIHRya246ICd0cmFjaycsXG4gICAgZGlzazogJ2Rpc2snLFxuICAgICfCqWdlbic6ICdnZW5yZScsXG4gICAgY292cjogJ3BpY3R1cmUnLFxuICAgICfCqXdydCc6ICdjb21wb3NlcicsXG4gICAgJ8KpbHlyJzogJ2x5cmljcycsXG4gICAgc29hbDogJ2FsYnVtc29ydCcsXG4gICAgc29ubTogJ3RpdGxlc29ydCcsXG4gICAgc29hcjogJ2FydGlzdHNvcnQnLFxuICAgIHNvYWE6ICdhbGJ1bWFydGlzdHNvcnQnLFxuICAgIHNvY286ICdjb21wb3NlcnNvcnQnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6TFlSSUNJU1QnOiAnbHlyaWNpc3QnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6Q09ORFVDVE9SJzogJ2NvbmR1Y3RvcicsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpSRU1JWEVSJzogJ3JlbWl4ZXInLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6RU5HSU5FRVInOiAnZW5naW5lZXInLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6UFJPRFVDRVInOiAncHJvZHVjZXInLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6REpNSVhFUic6ICdkam1peGVyJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk1JWEVSJzogJ21peGVyJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOkxBQkVMJzogJ2xhYmVsJyxcbiAgICAnwqlncnAnOiAnZ3JvdXBpbmcnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6U1VCVElUTEUnOiAnc3VidGl0bGUnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6RElTQ1NVQlRJVExFJzogJ2Rpc2NzdWJ0aXRsZScsXG4gICAgY3BpbDogJ2NvbXBpbGF0aW9uJyxcbiAgICB0bXBvOiAnYnBtJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk1PT0QnOiAnbW9vZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpNRURJQSc6ICdtZWRpYScsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpDQVRBTE9HTlVNQkVSJzogJ2NhdGFsb2dudW1iZXInLFxuICAgIHR2c2g6ICd0dlNob3cnLFxuICAgIHR2c246ICd0dlNlYXNvbicsXG4gICAgdHZlczogJ3R2RXBpc29kZScsXG4gICAgc29zbjogJ3R2U2hvd1NvcnQnLFxuICAgIHR2ZW46ICd0dkVwaXNvZGVJZCcsXG4gICAgdHZubjogJ3R2TmV0d29yaycsXG4gICAgcGNzdDogJ3BvZGNhc3QnLFxuICAgIHB1cmw6ICdwb2RjYXN0dXJsJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IEFsYnVtIFN0YXR1cyc6ICdyZWxlYXNlc3RhdHVzJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IEFsYnVtIFR5cGUnOiAncmVsZWFzZXR5cGUnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6TXVzaWNCcmFpbnogQWxidW0gUmVsZWFzZSBDb3VudHJ5JzogJ3JlbGVhc2Vjb3VudHJ5JyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOlNDUklQVCc6ICdzY3JpcHQnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6TEFOR1VBR0UnOiAnbGFuZ3VhZ2UnLFxuICAgIGNwcnQ6ICdjb3B5cmlnaHQnLFxuICAgICfCqWNweSc6ICdjb3B5cmlnaHQnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6TElDRU5TRSc6ICdsaWNlbnNlJyxcbiAgICAnwql0b28nOiAnZW5jb2RlZGJ5JyxcbiAgICBwZ2FwOiAnZ2FwbGVzcycsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpCQVJDT0RFJzogJ2JhcmNvZGUnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6SVNSQyc6ICdpc3JjJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOkFTSU4nOiAnYXNpbicsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpOT1RFUyc6ICdjb21tZW50JyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IFRyYWNrIElkJzogJ211c2ljYnJhaW56X3JlY29yZGluZ2lkJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IFJlbGVhc2UgVHJhY2sgSWQnOiAnbXVzaWNicmFpbnpfdHJhY2tpZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpNdXNpY0JyYWlueiBBbGJ1bSBJZCc6ICdtdXNpY2JyYWluel9hbGJ1bWlkJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IEFydGlzdCBJZCc6ICdtdXNpY2JyYWluel9hcnRpc3RpZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpNdXNpY0JyYWlueiBBbGJ1bSBBcnRpc3QgSWQnOiAnbXVzaWNicmFpbnpfYWxidW1hcnRpc3RpZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpNdXNpY0JyYWlueiBSZWxlYXNlIEdyb3VwIElkJzogJ211c2ljYnJhaW56X3JlbGVhc2Vncm91cGlkJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IFdvcmsgSWQnOiAnbXVzaWNicmFpbnpfd29ya2lkJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk11c2ljQnJhaW56IFRSTSBJZCc6ICdtdXNpY2JyYWluel90cm1pZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpNdXNpY0JyYWlueiBEaXNjIElkJzogJ211c2ljYnJhaW56X2Rpc2NpZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpBY291c3RpZCBJZCc6ICdhY291c3RpZF9pZCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpBY291c3RpZCBGaW5nZXJwcmludCc6ICdhY291c3RpZF9maW5nZXJwcmludCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpNdXNpY0lQIFBVSUQnOiAnbXVzaWNpcF9wdWlkJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOmZpbmdlcnByaW50JzogJ211c2ljaXBfZmluZ2VycHJpbnQnLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6cmVwbGF5Z2Fpbl90cmFja19nYWluJzogJ3JlcGxheWdhaW5fdHJhY2tfZ2FpbicsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpyZXBsYXlnYWluX3RyYWNrX3BlYWsnOiAncmVwbGF5Z2Fpbl90cmFja19wZWFrJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOnJlcGxheWdhaW5fYWxidW1fZ2Fpbic6ICdyZXBsYXlnYWluX2FsYnVtX2dhaW4nLFxuICAgICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6cmVwbGF5Z2Fpbl9hbGJ1bV9wZWFrJzogJ3JlcGxheWdhaW5fYWxidW1fcGVhaycsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpyZXBsYXlnYWluX3RyYWNrX21pbm1heCc6ICdyZXBsYXlnYWluX3RyYWNrX21pbm1heCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpyZXBsYXlnYWluX2FsYnVtX21pbm1heCc6ICdyZXBsYXlnYWluX2FsYnVtX21pbm1heCcsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpyZXBsYXlnYWluX3VuZG8nOiAncmVwbGF5Z2Fpbl91bmRvJyxcbiAgICAvLyBBZGRpdGlvbmFsIG1hcHBpbmdzOlxuICAgIGducmU6ICdnZW5yZScsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpBTEJVTUFSVElTVFNPUlQnOiAnYWxidW1hcnRpc3Rzb3J0JyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOkFSVElTVFMnOiAnYXJ0aXN0cycsXG4gICAgJy0tLS06Y29tLmFwcGxlLmlUdW5lczpPUklHSU5BTERBVEUnOiAnb3JpZ2luYWxkYXRlJyxcbiAgICAnLS0tLTpjb20uYXBwbGUuaVR1bmVzOk9SSUdJTkFMWUVBUic6ICdvcmlnaW5hbHllYXInLFxuICAgIC8vICctLS0tOmNvbS5hcHBsZS5pVHVuZXM6UEVSRk9STUVSJzogJ3BlcmZvcm1lcidcbiAgICBkZXNjOiAnZGVzY3JpcHRpb24nLFxuICAgIGxkZXM6ICdsb25nRGVzY3JpcHRpb24nLFxuICAgICfCqW12bic6ICdtb3ZlbWVudCcsXG4gICAgJ8KpbXZpJzogJ21vdmVtZW50SW5kZXgnLFxuICAgICfCqW12Yyc6ICdtb3ZlbWVudFRvdGFsJyxcbiAgICAnwql3cmsnOiAnd29yaycsXG4gICAgY2F0ZzogJ2NhdGVnb3J5JyxcbiAgICBlZ2lkOiAncG9kY2FzdElkJyxcbiAgICBoZHZkOiAnaGRWaWRlbycsXG4gICAga2V5dzogJ2tleXdvcmRzJyxcbiAgICBzaHdtOiAnc2hvd01vdmVtZW50JyxcbiAgICBzdGlrOiAnc3Rpaydcbn07XG5leHBvcnRzLnRhZ1R5cGUgPSAnaVR1bmVzJztcbmNsYXNzIE1QNFRhZ01hcHBlciBleHRlbmRzIENhc2VJbnNlbnNpdGl2ZVRhZ01hcF8xLkNhc2VJbnNlbnNpdGl2ZVRhZ01hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFtleHBvcnRzLnRhZ1R5cGVdLCBtcDRUYWdNYXApO1xuICAgIH1cbn1cbmV4cG9ydHMuTVA0VGFnTWFwcGVyID0gTVA0VGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TVA0VGFnTWFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mp4/MP4TagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/**\n * Extended Lame Header\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExtendedLameHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst common = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst ReplayGainDataFormat_1 = __webpack_require__(/*! ./ReplayGainDataFormat */ \"./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\");\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nexports.ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: common.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: common.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? undefined : track_peak / Math.pow(2, 23),\n            track_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 6),\n            album_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 8),\n            music_length: Token.UINT32_BE.get(buf, off + 20),\n            music_crc: Token.UINT8.get(buf, off + 24),\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvRXh0ZW5kZWRMYW1lSGVhZGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixjQUFjLG1CQUFPLENBQUMsNERBQWE7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLHdFQUFnQjtBQUN2QywrQkFBK0IsbUJBQU8sQ0FBQyw4RkFBd0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvRXh0ZW5kZWRMYW1lSGVhZGVyLmpzPzZhNWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEV4dGVuZGVkIExhbWUgSGVhZGVyXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXh0ZW5kZWRMYW1lSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKFwiLi4vY29tbW9uL1V0aWxcIik7XG5jb25zdCBSZXBsYXlHYWluRGF0YUZvcm1hdF8xID0gcmVxdWlyZShcIi4vUmVwbGF5R2FpbkRhdGFGb3JtYXRcIik7XG4vKipcbiAqIEluZm8gVGFnXG4gKiBAbGluayBodHRwOi8vZ2FicmllbC5tcDMtdGVjaC5vcmcvbXAzaW5mb3RhZy5odG1sXG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vcXVvZGxpYmV0L211dGFnZW4vYmxvYi9hYmQ1OGVlNTg3NzIyMjQzMzRhMTg4MTdjM2ZiMzExMDM1NzJmNzBlL211dGFnZW4vbXAzL191dGlsLnB5I0wxMTJcbiAqL1xuZXhwb3J0cy5FeHRlbmRlZExhbWVIZWFkZXIgPSB7XG4gICAgbGVuOiAyNyxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICBjb25zdCB0cmFja19wZWFrID0gVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmV2aXNpb246IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgMCwgNCksXG4gICAgICAgICAgICB2YnJfbWV0aG9kOiBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDQsIDQpLFxuICAgICAgICAgICAgbG93cGFzc19maWx0ZXI6IDEwMCAqIFRva2VuLlVJTlQ4LmdldChidWYsIG9mZiArIDEpLFxuICAgICAgICAgICAgdHJhY2tfcGVhazogdHJhY2tfcGVhayA9PT0gMCA/IHVuZGVmaW5lZCA6IHRyYWNrX3BlYWsgLyBNYXRoLnBvdygyLCAyMyksXG4gICAgICAgICAgICB0cmFja19nYWluOiBSZXBsYXlHYWluRGF0YUZvcm1hdF8xLlJlcGxheUdhaW4uZ2V0KGJ1ZiwgNiksXG4gICAgICAgICAgICBhbGJ1bV9nYWluOiBSZXBsYXlHYWluRGF0YUZvcm1hdF8xLlJlcGxheUdhaW4uZ2V0KGJ1ZiwgOCksXG4gICAgICAgICAgICBtdXNpY19sZW5ndGg6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAyMCksXG4gICAgICAgICAgICBtdXNpY19jcmM6IFRva2VuLlVJTlQ4LmdldChidWYsIG9mZiArIDI0KSxcbiAgICAgICAgICAgIGhlYWRlcl9jcmM6IFRva2VuLlVJTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyNClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/MpegParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/MpegParser.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MpegParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst common = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst XingTag_1 = __webpack_require__(/*! ./XingTag */ \"./node_modules/music-metadata/lib/mpeg/XingTag.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:mpeg');\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC',\n        'AAC SSR',\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, undefined, undefined, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return numFrames * this.calcSamplesPerFrame() / this.samplingRate;\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            else if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            else if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = common.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = common.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new Error('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new Error('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(`layer=0 => ADTS`);\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = 'ADTS/MPEG-' + this.version;\n        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig.join('+')}`);\n        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return;\n        }\n        const codecIndex = `${Math.floor(this.version)}${this.layer}`;\n        return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    0x01: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    0x02: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    0x03: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    0x04: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    0x05: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    0x06: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    0x07: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    0x08: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    0x09: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    0x0A: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    0x0B: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    0x0C: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    0x0D: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    0x0E: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0x00: 44100, 0x01: 48000, 0x02: 32000 },\n    2: { 0x00: 22050, 0x01: 24000, 0x02: 16000 },\n    2.5: { 0x00: 11025, 0x01: 12000, 0x02: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152],\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return 'V' + Math.floor((100 - vbrScale) / 10);\n}\nclass MpegParser extends AbstractID3Parser_1.AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.calculateEofDuration = false;\n        this.buf_frame_header = Buffer.alloc(4);\n        this.syncPeek = {\n            buf: Buffer.alloc(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                debug(`End-of-stream`);\n                if (this.calculateEofDuration) {\n                    const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    const duration = numberOfSamples / this.metadata.format.sampleRate;\n                    debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = this.metadata.native.hasOwnProperty('ID3v1');\n        if (format.duration && this.tokenizer.fileInfo.size) {\n            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n            if (format.codecProfile && format.codecProfile[0] === 'V') {\n                this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n            }\n        }\n        else if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n            const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n            this.metadata.setFormat('numberOfSamples', numberOfSamples);\n            const duration = numberOfSamples / format.sampleRate;\n            debug(\"Calculate CBR duration based on file size: %s\", duration);\n            this.metadata.setFormat('duration', duration);\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new core_1.EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                else {\n                    gotFirstSync = false;\n                    bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                    if (bo === -1) {\n                        if (this.syncPeek.len < this.syncPeek.buf.length) {\n                            throw new core_1.EndOfStreamError();\n                        }\n                        await this.tokenizer.ignore(this.syncPeek.len);\n                        break; // continue with next buffer\n                    }\n                    else {\n                        ++bo;\n                        gotFirstSync = true;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header, { offset: 1, length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            this.metadata.addWarning('Parse error: ' + err.message);\n            return false; // sync\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new Error('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        const fsize = (bps * header.bitrate / header.samplingRate) +\n            ((header.padding) ? slot_size : 0);\n        this.frame_size = Math.floor(fsize);\n        this.audioFrameHeader = header;\n        this.bitrates.push(header.bitrate);\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 3) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        else {\n            await this.skipSideInformation();\n            return false;\n        }\n    }\n    async parseAdts(header) {\n        const buf = Buffer.alloc(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        const framesPerSec = header.samplingRate / this.samplesPerFrame;\n        const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n        const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n        this.metadata.setFormat('bitrate', bitrate);\n        debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n        // side information\n        await this.tokenizer.readToken(new Token.Uint8ArrayType(sideinfo_length));\n        this.offset += sideinfo_length;\n        await this.readXtraInfoHeader();\n        return;\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(XingTag_1.InfoTagHeaderTag);\n        this.offset += XingTag_1.InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing':\n                const infoTag = await this.readXingInfoHeader();\n                const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                this.metadata.setFormat('codecProfile', codecProfile);\n                return null;\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME':\n                const version = await this.tokenizer.readToken(XingTag_1.LameEncoderVersion);\n                if (this.frame_size >= this.offset + XingTag_1.LameEncoderVersion.len) {\n                    this.offset += XingTag_1.LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', 'LAME ' + version);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                else {\n                    this.metadata.addWarning('Corrupt LAME header');\n                    break;\n                }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning('Frame ' + this.frameCount + 'corrupt: negative frameDataLeft');\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await (0, XingTag_1.readXingHeader)(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', 'LAME ' + common.stripNulls(infoTag.lame.version));\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new Error('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\nexports.MpegParser = MpegParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mpeg/MpegParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReplayGain = void 0;\nconst common = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nvar NameCode;\n(function (NameCode) {\n    /**\n     * not set\n     */\n    NameCode[NameCode[\"not_set\"] = 0] = \"not_set\";\n    /**\n     * Radio Gain Adjustment\n     */\n    NameCode[NameCode[\"radio\"] = 1] = \"radio\";\n    /**\n     * Audiophile Gain Adjustment\n     */\n    NameCode[NameCode[\"audiophile\"] = 2] = \"audiophile\";\n})(NameCode || (NameCode = {}));\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nvar ReplayGainOriginator;\n(function (ReplayGainOriginator) {\n    /**\n     * Replay Gain unspecified\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"unspecified\"] = 0] = \"unspecified\";\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"engineer\"] = 1] = \"engineer\";\n    /**\n     * Replay Gain set by user\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"user\"] = 2] = \"user\";\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"automatic\"] = 3] = \"automatic\";\n    /**\n     * Set by simple RMS average\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"rms_average\"] = 4] = \"rms_average\";\n})(ReplayGainOriginator || (ReplayGainOriginator = {}));\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nexports.ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = common.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = common.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = common.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: common.getBitAllignedNumber(buf, off, 0, 3),\n                origin: common.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvUmVwbGF5R2FpbkRhdGFGb3JtYXQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGVBQWUsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL1JlcGxheUdhaW5EYXRhRm9ybWF0LmpzPzgzMmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcGxheUdhaW4gPSB2b2lkIDA7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKFwiLi4vY29tbW9uL1V0aWxcIik7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L211c2ljLW1ldGFkYXRhL3dpa2kvUmVwbGF5LUdhaW4tRGF0YS1Gb3JtYXQjbmFtZS1jb2RlXG4gKi9cbnZhciBOYW1lQ29kZTtcbihmdW5jdGlvbiAoTmFtZUNvZGUpIHtcbiAgICAvKipcbiAgICAgKiBub3Qgc2V0XG4gICAgICovXG4gICAgTmFtZUNvZGVbTmFtZUNvZGVbXCJub3Rfc2V0XCJdID0gMF0gPSBcIm5vdF9zZXRcIjtcbiAgICAvKipcbiAgICAgKiBSYWRpbyBHYWluIEFkanVzdG1lbnRcbiAgICAgKi9cbiAgICBOYW1lQ29kZVtOYW1lQ29kZVtcInJhZGlvXCJdID0gMV0gPSBcInJhZGlvXCI7XG4gICAgLyoqXG4gICAgICogQXVkaW9waGlsZSBHYWluIEFkanVzdG1lbnRcbiAgICAgKi9cbiAgICBOYW1lQ29kZVtOYW1lQ29kZVtcImF1ZGlvcGhpbGVcIl0gPSAyXSA9IFwiYXVkaW9waGlsZVwiO1xufSkoTmFtZUNvZGUgfHwgKE5hbWVDb2RlID0ge30pKTtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0JvcmV3aXQvbXVzaWMtbWV0YWRhdGEvd2lraS9SZXBsYXktR2Fpbi1EYXRhLUZvcm1hdCNvcmlnaW5hdG9yLWNvZGVcbiAqL1xudmFyIFJlcGxheUdhaW5PcmlnaW5hdG9yO1xuKGZ1bmN0aW9uIChSZXBsYXlHYWluT3JpZ2luYXRvcikge1xuICAgIC8qKlxuICAgICAqIFJlcGxheSBHYWluIHVuc3BlY2lmaWVkXG4gICAgICovXG4gICAgUmVwbGF5R2Fpbk9yaWdpbmF0b3JbUmVwbGF5R2Fpbk9yaWdpbmF0b3JbXCJ1bnNwZWNpZmllZFwiXSA9IDBdID0gXCJ1bnNwZWNpZmllZFwiO1xuICAgIC8qKlxuICAgICAqIFJlcGxheSBHYWluIHByZS1zZXQgYnkgYXJ0aXN0L3Byb2R1Y2VyL21hc3RlcmluZyBlbmdpbmVlclxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1wiZW5naW5lZXJcIl0gPSAxXSA9IFwiZW5naW5lZXJcIjtcbiAgICAvKipcbiAgICAgKiBSZXBsYXkgR2FpbiBzZXQgYnkgdXNlclxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1widXNlclwiXSA9IDJdID0gXCJ1c2VyXCI7XG4gICAgLyoqXG4gICAgICogUmVwbGF5IEdhaW4gZGV0ZXJtaW5lZCBhdXRvbWF0aWNhbGx5LCBhcyBkZXNjcmliZWQgb24gdGhpcyBzaXRlXG4gICAgICovXG4gICAgUmVwbGF5R2Fpbk9yaWdpbmF0b3JbUmVwbGF5R2Fpbk9yaWdpbmF0b3JbXCJhdXRvbWF0aWNcIl0gPSAzXSA9IFwiYXV0b21hdGljXCI7XG4gICAgLyoqXG4gICAgICogU2V0IGJ5IHNpbXBsZSBSTVMgYXZlcmFnZVxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1wicm1zX2F2ZXJhZ2VcIl0gPSA0XSA9IFwicm1zX2F2ZXJhZ2VcIjtcbn0pKFJlcGxheUdhaW5PcmlnaW5hdG9yIHx8IChSZXBsYXlHYWluT3JpZ2luYXRvciA9IHt9KSk7XG4vKipcbiAqIFJlcGxheSBHYWluIERhdGEgRm9ybWF0XG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0JvcmV3aXQvbXVzaWMtbWV0YWRhdGEvd2lraS9SZXBsYXktR2Fpbi1EYXRhLUZvcm1hdFxuICovXG5leHBvcnRzLlJlcGxheUdhaW4gPSB7XG4gICAgbGVuOiAyLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhaW5fdHlwZSA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgMCwgMyk7XG4gICAgICAgIGNvbnN0IHNpZ24gPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDYsIDEpO1xuICAgICAgICBjb25zdCBnYWluX2FkaiA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgNywgOSkgLyAxMC4wO1xuICAgICAgICBpZiAoZ2Fpbl90eXBlID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDAsIDMpLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCAzLCAzKSxcbiAgICAgICAgICAgICAgICBhZGp1c3RtZW50OiAoc2lnbiA/IC1nYWluX2FkaiA6IGdhaW5fYWRqKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/mpeg/XingTag.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/XingTag.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readXingHeader = exports.XingHeaderFlags = exports.LameEncoderVersion = exports.InfoTagHeaderTag = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst ExtendedLameHeader_1 = __webpack_require__(/*! ./ExtendedLameHeader */ \"./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\");\n/**\n * Info Tag: Xing, LAME\n */\nexports.InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nexports.LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nexports.XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: util.isBitSet(buf, off, 31),\n            bytes: util.isBitSet(buf, off, 30),\n            toc: util.isBitSet(buf, off, 29),\n            vbrScale: util.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nasync function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(exports.XingHeaderFlags);\n    const xingInfoTag = {};\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = Buffer.alloc(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match) {\n            const majorMinorVersion = xingInfoTag.lame.version.match(/\\d+.\\d+/g)[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader_1.ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\nexports.readXingHeader = readXingHeader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvWGluZ1RhZy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsdUJBQXVCLEdBQUcsMEJBQTBCLEdBQUcsd0JBQXdCO0FBQ3hHLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQyxhQUFhLG1CQUFPLENBQUMsd0VBQWdCO0FBQ3JDLDZCQUE2QixtQkFBTyxDQUFDLDBGQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsTUFBTTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXBlZy9YaW5nVGFnLmpzP2M2ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlYWRYaW5nSGVhZGVyID0gZXhwb3J0cy5YaW5nSGVhZGVyRmxhZ3MgPSBleHBvcnRzLkxhbWVFbmNvZGVyVmVyc2lvbiA9IGV4cG9ydHMuSW5mb1RhZ0hlYWRlclRhZyA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi9jb21tb24vVXRpbFwiKTtcbmNvbnN0IEV4dGVuZGVkTGFtZUhlYWRlcl8xID0gcmVxdWlyZShcIi4vRXh0ZW5kZWRMYW1lSGVhZGVyXCIpO1xuLyoqXG4gKiBJbmZvIFRhZzogWGluZywgTEFNRVxuICovXG5leHBvcnRzLkluZm9UYWdIZWFkZXJUYWcgPSBuZXcgVG9rZW4uU3RyaW5nVHlwZSg0LCAnYXNjaWknKTtcbi8qKlxuICogTEFNRSBUQUcgdmFsdWVcbiAqIERpZCBub3QgZmluZCBhbnkgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbiBmb3IgdGhpc1xuICogVmFsdWUgZS5nLjogXCIzLjk4LjRcIlxuICovXG5leHBvcnRzLkxhbWVFbmNvZGVyVmVyc2lvbiA9IG5ldyBUb2tlbi5TdHJpbmdUeXBlKDYsICdhc2NpaScpO1xuLyoqXG4gKiBJbmZvIFRhZ1xuICogUmVmOiBodHRwOi8vZ2FicmllbC5tcDMtdGVjaC5vcmcvbXAzaW5mb3RhZy5odG1sXG4gKi9cbmV4cG9ydHMuWGluZ0hlYWRlckZsYWdzID0ge1xuICAgIGxlbjogNCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJhbWVzOiB1dGlsLmlzQml0U2V0KGJ1Ziwgb2ZmLCAzMSksXG4gICAgICAgICAgICBieXRlczogdXRpbC5pc0JpdFNldChidWYsIG9mZiwgMzApLFxuICAgICAgICAgICAgdG9jOiB1dGlsLmlzQml0U2V0KGJ1Ziwgb2ZmLCAyOSksXG4gICAgICAgICAgICB2YnJTY2FsZTogdXRpbC5pc0JpdFNldChidWYsIG9mZiwgMjgpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8vIC8qKlxuLy8gICogWElORyBIZWFkZXIgVGFnXG4vLyAgKiBSZWY6IGh0dHA6Ly9nYWJyaWVsLm1wMy10ZWNoLm9yZy9tcDNpbmZvdGFnLmh0bWxcbi8vICAqL1xuYXN5bmMgZnVuY3Rpb24gcmVhZFhpbmdIZWFkZXIodG9rZW5pemVyKSB7XG4gICAgY29uc3QgZmxhZ3MgPSBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKGV4cG9ydHMuWGluZ0hlYWRlckZsYWdzKTtcbiAgICBjb25zdCB4aW5nSW5mb1RhZyA9IHt9O1xuICAgIGlmIChmbGFncy5mcmFtZXMpIHtcbiAgICAgICAgeGluZ0luZm9UYWcubnVtRnJhbWVzID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihUb2tlbi5VSU5UMzJfQkUpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MuYnl0ZXMpIHtcbiAgICAgICAgeGluZ0luZm9UYWcuc3RyZWFtU2l6ZSA9IGF3YWl0IHRva2VuaXplci5yZWFkVG9rZW4oVG9rZW4uVUlOVDMyX0JFKTtcbiAgICB9XG4gICAgaWYgKGZsYWdzLnRvYykge1xuICAgICAgICB4aW5nSW5mb1RhZy50b2MgPSBCdWZmZXIuYWxsb2MoMTAwKTtcbiAgICAgICAgYXdhaXQgdG9rZW5pemVyLnJlYWRCdWZmZXIoeGluZ0luZm9UYWcudG9jKTtcbiAgICB9XG4gICAgaWYgKGZsYWdzLnZiclNjYWxlKSB7XG4gICAgICAgIHhpbmdJbmZvVGFnLnZiclNjYWxlID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihUb2tlbi5VSU5UMzJfQkUpO1xuICAgIH1cbiAgICBjb25zdCBsYW1lVGFnID0gYXdhaXQgdG9rZW5pemVyLnBlZWtUb2tlbihuZXcgVG9rZW4uU3RyaW5nVHlwZSg0LCAnYXNjaWknKSk7XG4gICAgaWYgKGxhbWVUYWcgPT09ICdMQU1FJykge1xuICAgICAgICBhd2FpdCB0b2tlbml6ZXIuaWdub3JlKDQpO1xuICAgICAgICB4aW5nSW5mb1RhZy5sYW1lID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihuZXcgVG9rZW4uU3RyaW5nVHlwZSg1LCAnYXNjaWknKSlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB4aW5nSW5mb1RhZy5sYW1lLnZlcnNpb24ubWF0Y2goL1xcZCsuXFxkKy9nKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBtYWpvck1pbm9yVmVyc2lvbiA9IHhpbmdJbmZvVGFnLmxhbWUudmVyc2lvbi5tYXRjaCgvXFxkKy5cXGQrL2cpWzBdOyAvLyBlLmcuIDMuOTdcbiAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSBtYWpvck1pbm9yVmVyc2lvbi5zcGxpdCgnLicpLm1hcChuID0+IHBhcnNlSW50KG4sIDEwKSk7XG4gICAgICAgICAgICBpZiAodmVyc2lvblswXSA+PSAzICYmIHZlcnNpb25bMV0gPj0gOTApIHtcbiAgICAgICAgICAgICAgICB4aW5nSW5mb1RhZy5sYW1lLmV4dGVuZGVkID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihFeHRlbmRlZExhbWVIZWFkZXJfMS5FeHRlbmRlZExhbWVIZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4aW5nSW5mb1RhZztcbn1cbmV4cG9ydHMucmVhZFhpbmdIZWFkZXIgPSByZWFkWGluZ0hlYWRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/mpeg/XingTag.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst MpcSv8Parser_1 = __webpack_require__(/*! ./sv8/MpcSv8Parser */ \"./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js\");\nconst MpcSv7Parser_1 = __webpack_require__(/*! ./sv7/MpcSv7Parser */ \"./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MusepackParser extends AbstractID3Parser_1.AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'binary'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Musepack stream-version 7');\n                mpcParser = new MpcSv7Parser_1.MpcSv7Parser();\n                break;\n            }\n            case 'MPC': {\n                debug('Musepack stream-version 8');\n                mpcParser = new MpcSv8Parser_1.MpcSv8Parser();\n                break;\n            }\n            default: {\n                throw new Error('Invalid Musepack signature prefix');\n            }\n        }\n        mpcParser.init(this.metadata, this.tokenizer, this.options);\n        return mpcParser.parse();\n    }\n}\nexports[\"default\"] = MusepackParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQyw0QkFBNEIsbUJBQU8sQ0FBQyxnR0FBNEI7QUFDaEUsdUJBQXVCLG1CQUFPLENBQUMsMEZBQW9CO0FBQ25ELHVCQUF1QixtQkFBTyxDQUFDLDBGQUFvQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL2luZGV4LmpzPzljMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBBYnN0cmFjdElEM1BhcnNlcl8xID0gcmVxdWlyZShcIi4uL2lkM3YyL0Fic3RyYWN0SUQzUGFyc2VyXCIpO1xuY29uc3QgTXBjU3Y4UGFyc2VyXzEgPSByZXF1aXJlKFwiLi9zdjgvTXBjU3Y4UGFyc2VyXCIpO1xuY29uc3QgTXBjU3Y3UGFyc2VyXzEgPSByZXF1aXJlKFwiLi9zdjcvTXBjU3Y3UGFyc2VyXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOm11c2VwYWNrJyk7XG5jbGFzcyBNdXNlcGFja1BhcnNlciBleHRlbmRzIEFic3RyYWN0SUQzUGFyc2VyXzEuQWJzdHJhY3RJRDNQYXJzZXIge1xuICAgIGFzeW5jIHBvc3RJZDN2MlBhcnNlKCkge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnRva2VuaXplci5wZWVrVG9rZW4obmV3IFRva2VuLlN0cmluZ1R5cGUoMywgJ2JpbmFyeScpKTtcbiAgICAgICAgbGV0IG1wY1BhcnNlcjtcbiAgICAgICAgc3dpdGNoIChzaWduYXR1cmUpIHtcbiAgICAgICAgICAgIGNhc2UgJ01QKyc6IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygnTXVzZXBhY2sgc3RyZWFtLXZlcnNpb24gNycpO1xuICAgICAgICAgICAgICAgIG1wY1BhcnNlciA9IG5ldyBNcGNTdjdQYXJzZXJfMS5NcGNTdjdQYXJzZXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ01QQyc6IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygnTXVzZXBhY2sgc3RyZWFtLXZlcnNpb24gOCcpO1xuICAgICAgICAgICAgICAgIG1wY1BhcnNlciA9IG5ldyBNcGNTdjhQYXJzZXJfMS5NcGNTdjhQYXJzZXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTXVzZXBhY2sgc2lnbmF0dXJlIHByZWZpeCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1wY1BhcnNlci5pbml0KHRoaXMubWV0YWRhdGEsIHRoaXMudG9rZW5pemVyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbXBjUGFyc2VyLnBhcnNlKCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTXVzZXBhY2tQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/musepack/index.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv7/BitReader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/BitReader.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BitReader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nclass BitReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n        this.pos = 0;\n        this.dword = undefined;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === undefined) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        else {\n            this.pos -= 32;\n            if (this.pos === 0) {\n                this.dword = undefined;\n                return out & ((1 << bits) - 1);\n            }\n            else {\n                this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n                if (this.pos) {\n                    out <<= this.pos;\n                    out |= this.dword >>> (32 - this.pos);\n                }\n                return out & ((1 << bits) - 1);\n            }\n        }\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = undefined;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\nexports.BitReader = BitReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9CaXRSZWFkZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9CaXRSZWFkZXIuanM/N2UzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQml0UmVhZGVyID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jbGFzcyBCaXRSZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuaXplcikge1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmR3b3JkID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBiaXRzIDEuLjMwIGJpdHNcbiAgICAgKi9cbiAgICBhc3luYyByZWFkKGJpdHMpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuZHdvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kd29yZCA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihUb2tlbi5VSU5UMzJfTEUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvdXQgPSB0aGlzLmR3b3JkO1xuICAgICAgICB0aGlzLnBvcyArPSBiaXRzO1xuICAgICAgICBpZiAodGhpcy5wb3MgPCAzMikge1xuICAgICAgICAgICAgb3V0ID4+Pj0gKDMyIC0gdGhpcy5wb3MpO1xuICAgICAgICAgICAgcmV0dXJuIG91dCAmICgoMSA8PCBiaXRzKSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wb3MgLT0gMzI7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmR3b3JkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXQgJiAoKDEgPDwgYml0cykgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZHdvcmQgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oVG9rZW4uVUlOVDMyX0xFKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0IDw8PSB0aGlzLnBvcztcbiAgICAgICAgICAgICAgICAgICAgb3V0IHw9IHRoaXMuZHdvcmQgPj4+ICgzMiAtIHRoaXMucG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dCAmICgoMSA8PCBiaXRzKSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGlnbm9yZShiaXRzKSB7XG4gICAgICAgIGlmICh0aGlzLnBvcyA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IDMyIC0gdGhpcy5wb3M7XG4gICAgICAgICAgICB0aGlzLmR3b3JkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgYml0cyAtPSByZW1haW5pbmc7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gYml0cyAlIDMyO1xuICAgICAgICBjb25zdCBudW1PZldvcmRzID0gKGJpdHMgLSByZW1haW5kZXIpIC8gMzI7XG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShudW1PZldvcmRzICogNCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWQocmVtYWluZGVyKTtcbiAgICB9XG59XG5leHBvcnRzLkJpdFJlYWRlciA9IEJpdFJlYWRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/musepack/sv7/BitReader.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MpcSv7Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst BitReader_1 = __webpack_require__(/*! ./BitReader */ \"./node_modules/music-metadata/lib/musepack/sv7/BitReader.js\");\nconst SV7 = __webpack_require__(/*! ./StreamVersion7 */ \"./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new Error('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader_1.BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n    }\n}\nexports.MpcSv7Parser = MpcSv7Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9NcGNTdjdQYXJzZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLHNCQUFzQixtQkFBTyxDQUFDLHlGQUEwQjtBQUN4RCxzQkFBc0IsbUJBQU8sQ0FBQyx1RkFBeUI7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWE7QUFDekMsWUFBWSxtQkFBTyxDQUFDLDBGQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEIsR0FBRywwQkFBMEI7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSx3QkFBd0I7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9NcGNTdjdQYXJzZXIuanM/OWVkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXBjU3Y3UGFyc2VyID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IEJhc2ljUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL0Jhc2ljUGFyc2VyXCIpO1xuY29uc3QgQVBFdjJQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9hcGV2Mi9BUEV2MlBhcnNlclwiKTtcbmNvbnN0IEJpdFJlYWRlcl8xID0gcmVxdWlyZShcIi4vQml0UmVhZGVyXCIpO1xuY29uc3QgU1Y3ID0gcmVxdWlyZShcIi4vU3RyZWFtVmVyc2lvbjdcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6bXVzZXBhY2snKTtcbmNsYXNzIE1wY1N2N1BhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyXzEuQmFzaWNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmF1ZGlvTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UoKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihTVjcuSGVhZGVyKTtcbiAgICAgICAgaWYgKGhlYWRlci5zaWduYXR1cmUgIT09ICdNUCsnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIG1hZ2ljIG51bWJlcicpO1xuICAgICAgICBkZWJ1Zyhgc3RyZWFtLXZlcnNpb249JHtoZWFkZXIuc3RyZWFtTWFqb3JWZXJzaW9ufS4ke2hlYWRlci5zdHJlYW1NaW5vclZlcnNpb259YCk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb250YWluZXInLCAnTXVzZXBhY2ssIFNWNycpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnc2FtcGxlUmF0ZScsIGhlYWRlci5zYW1wbGVGcmVxdWVuY3kpO1xuICAgICAgICBjb25zdCBudW1iZXJPZlNhbXBsZXMgPSAxMTUyICogKGhlYWRlci5mcmFtZUNvdW50IC0gMSkgKyBoZWFkZXIubGFzdEZyYW1lTGVuZ3RoO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZTYW1wbGVzJywgbnVtYmVyT2ZTYW1wbGVzKTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IG51bWJlck9mU2FtcGxlcyAvIGhlYWRlci5zYW1wbGVGcmVxdWVuY3k7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdkdXJhdGlvbicsIHRoaXMuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLmJpdHJlYWRlciA9IG5ldyBCaXRSZWFkZXJfMS5CaXRSZWFkZXIodGhpcy50b2tlbml6ZXIpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZDaGFubmVscycsIGhlYWRlci5taWRTaWRlU3RlcmVvIHx8IGhlYWRlci5pbnRlbnNpdHlTdGVyZW8gPyAyIDogMSk7XG4gICAgICAgIGNvbnN0IHZlcnNpb24gPSBhd2FpdCB0aGlzLmJpdHJlYWRlci5yZWFkKDgpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29kZWMnLCAodmVyc2lvbiAvIDEwMCkudG9GaXhlZCgyKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2tpcEF1ZGlvRGF0YShoZWFkZXIuZnJhbWVDb3VudCk7XG4gICAgICAgIGRlYnVnKGBFbmQgb2YgYXVkaW8gc3RyZWFtLCBzd2l0Y2hpbmcgdG8gQVBFdjIsIG9mZnNldD0ke3RoaXMudG9rZW5pemVyLnBvc2l0aW9ufWApO1xuICAgICAgICByZXR1cm4gQVBFdjJQYXJzZXJfMS5BUEV2MlBhcnNlci50cnlQYXJzZUFwZUhlYWRlcih0aGlzLm1ldGFkYXRhLCB0aGlzLnRva2VuaXplciwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgc2tpcEF1ZGlvRGF0YShmcmFtZUNvdW50KSB7XG4gICAgICAgIHdoaWxlIChmcmFtZUNvdW50LS0gPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmcmFtZUxlbmd0aCA9IGF3YWl0IHRoaXMuYml0cmVhZGVyLnJlYWQoMjApO1xuICAgICAgICAgICAgdGhpcy5hdWRpb0xlbmd0aCArPSAyMCArIGZyYW1lTGVuZ3RoO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5iaXRyZWFkZXIuaWdub3JlKGZyYW1lTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsYXN0IGZyYW1lXG4gICAgICAgIGNvbnN0IGxhc3RGcmFtZUxlbmd0aCA9IGF3YWl0IHRoaXMuYml0cmVhZGVyLnJlYWQoMTEpO1xuICAgICAgICB0aGlzLmF1ZGlvTGVuZ3RoICs9IGxhc3RGcmFtZUxlbmd0aDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCB0aGlzLmF1ZGlvTGVuZ3RoIC8gdGhpcy5kdXJhdGlvbik7XG4gICAgfVxufVxuZXhwb3J0cy5NcGNTdjdQYXJzZXIgPSBNcGNTdjdQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js":
/*!************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * BASIC STRUCTURE\n */\nexports.Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: Buffer.from(buf).toString('latin1', off, off + 3),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9TdHJlYW1WZXJzaW9uNy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQyxhQUFhLG1CQUFPLENBQUMsMkVBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixNQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9TdHJlYW1WZXJzaW9uNy5qcz82YmI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL1V0aWxcIik7XG4vKipcbiAqIEJBU0lDIFNUUlVDVFVSRVxuICovXG5leHBvcnRzLkhlYWRlciA9IHtcbiAgICBsZW46IDYgKiA0LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHtcbiAgICAgICAgICAgIC8vIHdvcmQgMFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBCdWZmZXIuZnJvbShidWYpLnRvU3RyaW5nKCdsYXRpbjEnLCBvZmYsIG9mZiArIDMpLFxuICAgICAgICAgICAgLy8gdmVyc2lvbkluZGV4IG51bWJlciAqIDEwMDAgKDMuODEgPSAzODEwKSAocmVtZW1iZXIgdGhhdCA0LWJ5dGUgYWxpZ25tZW50IGNhdXNlcyB0aGlzIHRvIHRha2UgNC1ieXRlcylcbiAgICAgICAgICAgIHN0cmVhbU1pbm9yVmVyc2lvbjogdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDMsIDAsIDQpLFxuICAgICAgICAgICAgc3RyZWFtTWFqb3JWZXJzaW9uOiB1dGlsLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmICsgMywgNCwgNCksXG4gICAgICAgICAgICAvLyB3b3JkIDFcbiAgICAgICAgICAgIGZyYW1lQ291bnQ6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIC8vIHdvcmQgMlxuICAgICAgICAgICAgbWF4TGV2ZWw6IFRva2VuLlVJTlQxNl9MRS5nZXQoYnVmLCBvZmYgKyA4KSxcbiAgICAgICAgICAgIHNhbXBsZUZyZXF1ZW5jeTogWzQ0MTAwLCA0ODAwMCwgMzc4MDAsIDMyMDAwXVt1dGlsLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmICsgMTAsIDAsIDIpXSxcbiAgICAgICAgICAgIGxpbms6IHV0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxMCwgMiwgMiksXG4gICAgICAgICAgICBwcm9maWxlOiB1dGlsLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmICsgMTAsIDQsIDQpLFxuICAgICAgICAgICAgbWF4QmFuZDogdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDExLCAwLCA2KSxcbiAgICAgICAgICAgIGludGVuc2l0eVN0ZXJlbzogdXRpbC5pc0JpdFNldChidWYsIG9mZiArIDExLCA2KSxcbiAgICAgICAgICAgIG1pZFNpZGVTdGVyZW86IHV0aWwuaXNCaXRTZXQoYnVmLCBvZmYgKyAxMSwgNyksXG4gICAgICAgICAgICAvLyB3b3JkIDNcbiAgICAgICAgICAgIHRpdGxlUGVhazogVG9rZW4uVUlOVDE2X0xFLmdldChidWYsIG9mZiArIDEyKSxcbiAgICAgICAgICAgIHRpdGxlR2FpbjogVG9rZW4uVUlOVDE2X0xFLmdldChidWYsIG9mZiArIDE0KSxcbiAgICAgICAgICAgIC8vIHdvcmQgNFxuICAgICAgICAgICAgYWxidW1QZWFrOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTYpLFxuICAgICAgICAgICAgYWxidW1HYWluOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTgpLFxuICAgICAgICAgICAgLy8gd29yZFxuICAgICAgICAgICAgbGFzdEZyYW1lTGVuZ3RoOiAoVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDIwKSA+Pj4gMjApICYgMHg3RkYsXG4gICAgICAgICAgICB0cnVlR2FwbGVzczogdXRpbC5pc0JpdFNldChidWYsIG9mZiArIDIzLCAwKVxuICAgICAgICB9O1xuICAgICAgICBoZWFkZXIubGFzdEZyYW1lTGVuZ3RoID0gaGVhZGVyLnRydWVHYXBsZXNzID8gKFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCAyMCkgPj4+IDIwKSAmIDB4N0ZGIDogMDtcbiAgICAgICAgcmV0dXJuIGhlYWRlcjtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MpcSv8Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst SV8 = __webpack_require__(/*! ./StreamVersion8 */ \"./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MpcSv8Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        if (signature !== 'MPCK')\n            throw new Error('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new Error(`Unexpected header: ${header.key}`);\n            }\n        } while (true);\n    }\n}\nexports.MpcSv8Parser = MpcSv8Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2OC9NcGNTdjhQYXJzZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLHNCQUFzQixtQkFBTyxDQUFDLHlGQUEwQjtBQUN4RCxzQkFBc0IsbUJBQU8sQ0FBQyx1RkFBeUI7QUFDdkQsaUJBQWlCLG1CQUFPLENBQUMsK0VBQXFCO0FBQzlDLFlBQVksbUJBQU8sQ0FBQywwRkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxXQUFXLGtCQUFrQixxQkFBcUI7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxXQUFXO0FBQ3JFO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tdXNlcGFjay9zdjgvTXBjU3Y4UGFyc2VyLmpzP2MzNmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1wY1N2OFBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBCYXNpY1BhcnNlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9CYXNpY1BhcnNlclwiKTtcbmNvbnN0IEFQRXYyUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vYXBldjIvQVBFdjJQYXJzZXJcIik7XG5jb25zdCBGb3VyQ0NfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vRm91ckNDXCIpO1xuY29uc3QgU1Y4ID0gcmVxdWlyZShcIi4vU3RyZWFtVmVyc2lvbjhcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6bXVzZXBhY2snKTtcbmNsYXNzIE1wY1N2OFBhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyXzEuQmFzaWNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmF1ZGlvTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UoKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihGb3VyQ0NfMS5Gb3VyQ2NUb2tlbik7XG4gICAgICAgIGlmIChzaWduYXR1cmUgIT09ICdNUENLJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBNYWdpYyBudW1iZXInKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvbnRhaW5lcicsICdNdXNlcGFjaywgU1Y4Jyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlUGFja2V0KCk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlUGFja2V0KCkge1xuICAgICAgICBjb25zdCBzdjhyZWFkZXIgPSBuZXcgU1Y4LlN0cmVhbVJlYWRlcih0aGlzLnRva2VuaXplcik7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGF3YWl0IHN2OHJlYWRlci5yZWFkUGFja2V0SGVhZGVyKCk7XG4gICAgICAgICAgICBkZWJ1ZyhgcGFja2V0LWhlYWRlciBrZXk9JHtoZWFkZXIua2V5fSwgcGF5bG9hZExlbmd0aD0ke2hlYWRlci5wYXlsb2FkTGVuZ3RofWApO1xuICAgICAgICAgICAgc3dpdGNoIChoZWFkZXIua2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnU0gnOiAvLyBTdHJlYW0gSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoID0gYXdhaXQgc3Y4cmVhZGVyLnJlYWRTdHJlYW1IZWFkZXIoaGVhZGVyLnBheWxvYWRMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZTYW1wbGVzJywgc2guc2FtcGxlQ291bnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnc2FtcGxlUmF0ZScsIHNoLnNhbXBsZUZyZXF1ZW5jeSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdkdXJhdGlvbicsIHNoLnNhbXBsZUNvdW50IC8gc2guc2FtcGxlRnJlcXVlbmN5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mQ2hhbm5lbHMnLCBzaC5jaGFubmVsQ291bnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdBUCc6IC8vIEF1ZGlvIFBhY2tldFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvTGVuZ3RoICs9IGhlYWRlci5wYXlsb2FkTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoaGVhZGVyLnBheWxvYWRMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdSRyc6IC8vIFJlcGxheWdhaW5cbiAgICAgICAgICAgICAgICBjYXNlICdFSSc6IC8vIEVuY29kZXIgSW5mb1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NPJzogLy8gU2VlayBUYWJsZSBPZmZzZXRcbiAgICAgICAgICAgICAgICBjYXNlICdTVCc6IC8vIFNlZWsgVGFibGVcbiAgICAgICAgICAgICAgICBjYXNlICdDVCc6IC8vIENoYXB0ZXItVGFnXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShoZWFkZXIucGF5bG9hZExlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NFJzogLy8gU3RyZWFtIEVuZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnYml0cmF0ZScsIHRoaXMuYXVkaW9MZW5ndGggKiA4IC8gdGhpcy5tZXRhZGF0YS5mb3JtYXQuZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQVBFdjJQYXJzZXJfMS5BUEV2MlBhcnNlci50cnlQYXJzZUFwZUhlYWRlcih0aGlzLm1ldGFkYXRhLCB0aGlzLnRva2VuaXplciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaGVhZGVyOiAke2hlYWRlci5rZXl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuTXBjU3Y4UGFyc2VyID0gTXBjU3Y4UGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js":
/*!************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamReader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst util = __webpack_require__(/*! ../../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'binary');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nclass StreamReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\nexports.StreamReader = StreamReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2OC9TdHJlYW1WZXJzaW9uOC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQywyRUFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHdCQUF3QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2OC9TdHJlYW1WZXJzaW9uOC5qcz8yYmZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1SZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9VdGlsXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOm11c2VwYWNrOnN2OCcpO1xuY29uc3QgUGFja2V0S2V5ID0gbmV3IFRva2VuLlN0cmluZ1R5cGUoMiwgJ2JpbmFyeScpO1xuLyoqXG4gKiBTdHJlYW0gSGVhZGVyIFBhY2tldCBwYXJ0IDFcbiAqIFJlZjogaHR0cDovL3RyYWMubXVzZXBhY2submV0L211c2VwYWNrL3dpa2kvU1Y4U3BlY2lmaWNhdGlvbiNTdHJlYW1IZWFkZXJQYWNrZXRcbiAqL1xuY29uc3QgU0hfcGFydDEgPSB7XG4gICAgbGVuOiA1LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmM6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgc3RyZWFtVmVyc2lvbjogVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgNClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBTdHJlYW0gSGVhZGVyIFBhY2tldCBwYXJ0IDNcbiAqIFJlZjogaHR0cDovL3RyYWMubXVzZXBhY2submV0L211c2VwYWNrL3dpa2kvU1Y4U3BlY2lmaWNhdGlvbiNTdHJlYW1IZWFkZXJQYWNrZXRcbiAqL1xuY29uc3QgU0hfcGFydDMgPSB7XG4gICAgbGVuOiAyLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzYW1wbGVGcmVxdWVuY3k6IFs0NDEwMCwgNDgwMDAsIDM3ODAwLCAzMjAwMF1bdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgMCwgMyldLFxuICAgICAgICAgICAgbWF4VXNlZEJhbmRzOiB1dGlsLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCAzLCA1KSxcbiAgICAgICAgICAgIGNoYW5uZWxDb3VudDogdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDEsIDAsIDQpICsgMSxcbiAgICAgICAgICAgIG1zVXNlZDogdXRpbC5pc0JpdFNldChidWYsIG9mZiArIDEsIDQpLFxuICAgICAgICAgICAgYXVkaW9CbG9ja0ZyYW1lczogdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDEsIDUsIDMpXG4gICAgICAgIH07XG4gICAgfVxufTtcbmNsYXNzIFN0cmVhbVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IodG9rZW5pemVyKSB7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuICAgIH1cbiAgICBhc3luYyByZWFkUGFja2V0SGVhZGVyKCkge1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oUGFja2V0S2V5KTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGF3YWl0IHRoaXMucmVhZFZhcmlhYmxlU2l6ZUZpZWxkKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBwYXlsb2FkTGVuZ3RoOiBzaXplLnZhbHVlIC0gMiAtIHNpemUubGVuXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHJlYWRTdHJlYW1IZWFkZXIoc2l6ZSkge1xuICAgICAgICBjb25zdCBzdHJlYW1IZWFkZXIgPSB7fTtcbiAgICAgICAgZGVidWcoYFJlYWRpbmcgU0ggYXQgb2Zmc2V0PSR7dGhpcy50b2tlbml6ZXIucG9zaXRpb259YCk7XG4gICAgICAgIGNvbnN0IHBhcnQxID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKFNIX3BhcnQxKTtcbiAgICAgICAgc2l6ZSAtPSBTSF9wYXJ0MS5sZW47XG4gICAgICAgIE9iamVjdC5hc3NpZ24oc3RyZWFtSGVhZGVyLCBwYXJ0MSk7XG4gICAgICAgIGRlYnVnKGBTSC5zdHJlYW1WZXJzaW9uID0gJHtwYXJ0MS5zdHJlYW1WZXJzaW9ufWApO1xuICAgICAgICBjb25zdCBzYW1wbGVDb3VudCA9IGF3YWl0IHRoaXMucmVhZFZhcmlhYmxlU2l6ZUZpZWxkKCk7XG4gICAgICAgIHNpemUgLT0gc2FtcGxlQ291bnQubGVuO1xuICAgICAgICBzdHJlYW1IZWFkZXIuc2FtcGxlQ291bnQgPSBzYW1wbGVDb3VudC52YWx1ZTtcbiAgICAgICAgY29uc3QgYnMgPSBhd2FpdCB0aGlzLnJlYWRWYXJpYWJsZVNpemVGaWVsZCgpO1xuICAgICAgICBzaXplIC09IGJzLmxlbjtcbiAgICAgICAgc3RyZWFtSGVhZGVyLmJlZ2lubmluZ09mU2lsZW5jZSA9IGJzLnZhbHVlO1xuICAgICAgICBjb25zdCBwYXJ0MyA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihTSF9wYXJ0Myk7XG4gICAgICAgIHNpemUgLT0gU0hfcGFydDMubGVuO1xuICAgICAgICBPYmplY3QuYXNzaWduKHN0cmVhbUhlYWRlciwgcGFydDMpO1xuICAgICAgICAvLyBhc3NlcnQuZXF1YWwoc2l6ZSwgMCk7XG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShzaXplKTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbUhlYWRlcjtcbiAgICB9XG4gICAgYXN5bmMgcmVhZFZhcmlhYmxlU2l6ZUZpZWxkKGxlbiA9IDEsIGhiID0gMCkge1xuICAgICAgICBsZXQgbiA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWROdW1iZXIoVG9rZW4uVUlOVDgpO1xuICAgICAgICBpZiAoKG4gJiAweDgwKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbGVuLCB2YWx1ZTogaGIgKyBuIH07XG4gICAgICAgIH1cbiAgICAgICAgbiAmPSAweDdGO1xuICAgICAgICBuICs9IGhiO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkVmFyaWFibGVTaXplRmllbGQobGVuICsgMSwgbiA8PCA3KTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmVhbVJlYWRlciA9IFN0cmVhbVJlYWRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/OggParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/OggParser.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OggParser = exports.SegmentTable = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ./vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst OpusParser_1 = __webpack_require__(/*! ./opus/OpusParser */ \"./node_modules/music-metadata/lib/ogg/opus/OpusParser.js\");\nconst SpeexParser_1 = __webpack_require__(/*! ./speex/SpeexParser */ \"./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js\");\nconst TheoraParser_1 = __webpack_require__(/*! ./theora/TheoraParser */ \"./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg');\nclass SegmentTable {\n    static sum(buf, off, len) {\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += buf[i];\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\nexports.SegmentTable = SegmentTable;\n/**\n * Parser for Ogg logical bitstream framing\n */\nclass OggParser extends BasicParser_1.BasicParser {\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        debug('pos=%s, parsePage()', this.tokenizer.position);\n        try {\n            let header;\n            do {\n                header = await this.tokenizer.readToken(OggParser.Header);\n                if (header.capturePattern !== 'OggS')\n                    throw new Error('Invalid Ogg capture pattern');\n                this.metadata.setFormat('container', 'Ogg');\n                this.header = header;\n                this.pageNumber = header.pageSequenceNo;\n                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\n                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\n                debug('totalPageSize=%s', segmentTable.totalPageSize);\n                const pageData = await this.tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n                if (header.headerType.firstPage) {\n                    const id = new Token.StringType(7, 'ascii').get(Buffer.from(pageData), 0);\n                    switch (id) {\n                        case '\\x01vorbis': // Ogg/Vorbis\n                            debug('Set page consumer to Ogg/Vorbis');\n                            this.pageConsumer = new VorbisParser_1.VorbisParser(this.metadata, this.options);\n                            break;\n                        case 'OpusHea': // Ogg/Opus\n                            debug('Set page consumer to Ogg/Opus');\n                            this.pageConsumer = new OpusParser_1.OpusParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'Speex  ': // Ogg/Speex\n                            debug('Set page consumer to Ogg/Speex');\n                            this.pageConsumer = new SpeexParser_1.SpeexParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'fishead':\n                        case '\\x00theora': // Ogg/Theora\n                            debug('Set page consumer to Ogg/Theora');\n                            this.pageConsumer = new TheoraParser_1.TheoraParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        default:\n                            throw new Error('gg audio-codec not recognized (id=' + id + ')');\n                    }\n                }\n                this.pageConsumer.parsePage(header, pageData);\n            } while (!header.headerType.lastPage);\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                debug(`End-of-stream`);\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                if (this.header) {\n                    this.pageConsumer.calculateDuration(this.header);\n                }\n            }\n            else if (err.message.startsWith('FourCC')) {\n                if (this.pageNumber > 0) {\n                    // ignore this error: work-around if last OGG-page is not marked with last-page flag\n                    this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\n                    this.pageConsumer.flush();\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n}\nexports.OggParser = OggParser;\nOggParser.Header = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: FourCC_1.FourCcToken.get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: buf.readUInt8(off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/OggParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/opus/Opus.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/Opus.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nclass IdHeader {\n    constructor(len) {\n        this.len = len;\n        if (len < 19) {\n            throw new Error(\"ID-header-page 0 should be at least 19 bytes long\");\n        }\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: buf.readUInt8(off + 8),\n            channelCount: buf.readUInt8(off + 9),\n            preSkip: buf.readInt16LE(off + 10),\n            inputSampleRate: buf.readInt32LE(off + 12),\n            outputGain: buf.readInt16LE(off + 16),\n            channelMapping: buf.readUInt8(off + 18)\n        };\n    }\n}\nexports.IdHeader = IdHeader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9vcHVzL09wdXMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL29wdXMvT3B1cy5qcz9jNWViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JZEhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuLyoqXG4gKiBPcHVzIElEIEhlYWRlciBwYXJzZXJcbiAqIFJlZjogaHR0cHM6Ly93aWtpLnhpcGgub3JnL09nZ09wdXMjSURfSGVhZGVyXG4gKi9cbmNsYXNzIElkSGVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgICAgIGlmIChsZW4gPCAxOSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSUQtaGVhZGVyLXBhZ2UgMCBzaG91bGQgYmUgYXQgbGVhc3QgMTkgYnl0ZXMgbG9uZ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hZ2ljU2lnbmF0dXJlOiBuZXcgVG9rZW4uU3RyaW5nVHlwZSg4LCAnYXNjaWknKS5nZXQoYnVmLCBvZmYgKyAwKSxcbiAgICAgICAgICAgIHZlcnNpb246IGJ1Zi5yZWFkVUludDgob2ZmICsgOCksXG4gICAgICAgICAgICBjaGFubmVsQ291bnQ6IGJ1Zi5yZWFkVUludDgob2ZmICsgOSksXG4gICAgICAgICAgICBwcmVTa2lwOiBidWYucmVhZEludDE2TEUob2ZmICsgMTApLFxuICAgICAgICAgICAgaW5wdXRTYW1wbGVSYXRlOiBidWYucmVhZEludDMyTEUob2ZmICsgMTIpLFxuICAgICAgICAgICAgb3V0cHV0R2FpbjogYnVmLnJlYWRJbnQxNkxFKG9mZiArIDE2KSxcbiAgICAgICAgICAgIGNoYW5uZWxNYXBwaW5nOiBidWYucmVhZFVJbnQ4KG9mZiArIDE4KVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuSWRIZWFkZXIgPSBJZEhlYWRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/opus/Opus.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/opus/OpusParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/OpusParser.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpusParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ../vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst Opus = __webpack_require__(/*! ./Opus */ \"./node_modules/music-metadata/lib/ogg/opus/Opus.js\");\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggParser\n */\nclass OpusParser extends VorbisParser_1.VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n        this.lastPos = -1;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new Error(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n    }\n    parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\nexports.OpusParser = OpusParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9vcHVzL09wdXNQYXJzZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQyx1QkFBdUIsbUJBQU8sQ0FBQyw0RkFBd0I7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLGtFQUFRO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9vcHVzL09wdXNQYXJzZXIuanM/Y2UyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3B1c1BhcnNlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgVm9yYmlzUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vdm9yYmlzL1ZvcmJpc1BhcnNlclwiKTtcbmNvbnN0IE9wdXMgPSByZXF1aXJlKFwiLi9PcHVzXCIpO1xuLyoqXG4gKiBPcHVzIHBhcnNlclxuICogSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZSAoSUVURikgLSBSRkMgNjcxNlxuICogVXNlZCBieSBPZ2dQYXJzZXJcbiAqL1xuY2xhc3MgT3B1c1BhcnNlciBleHRlbmRzIFZvcmJpc1BhcnNlcl8xLlZvcmJpc1BhcnNlciB7XG4gICAgY29uc3RydWN0b3IobWV0YWRhdGEsIG9wdGlvbnMsIHRva2VuaXplcikge1xuICAgICAgICBzdXBlcihtZXRhZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuICAgICAgICB0aGlzLmxhc3RQb3MgPSAtMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgZmlyc3QgT3B1cyBPZ2cgcGFnZVxuICAgICAqIEBwYXJhbSB7SVBhZ2VIZWFkZXJ9IGhlYWRlclxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBwYWdlRGF0YVxuICAgICAqL1xuICAgIHBhcnNlRmlyc3RQYWdlKGhlYWRlciwgcGFnZURhdGEpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvZGVjJywgJ09wdXMnKTtcbiAgICAgICAgLy8gUGFyc2UgT3B1cyBJRCBIZWFkZXJcbiAgICAgICAgdGhpcy5pZEhlYWRlciA9IG5ldyBPcHVzLklkSGVhZGVyKHBhZ2VEYXRhLmxlbmd0aCkuZ2V0KHBhZ2VEYXRhLCAwKTtcbiAgICAgICAgaWYgKHRoaXMuaWRIZWFkZXIubWFnaWNTaWduYXR1cmUgIT09IFwiT3B1c0hlYWRcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgb2dnL09wdXMgbWFnaWMtc2lnbmF0dXJlXCIpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnc2FtcGxlUmF0ZScsIHRoaXMuaWRIZWFkZXIuaW5wdXRTYW1wbGVSYXRlKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mQ2hhbm5lbHMnLCB0aGlzLmlkSGVhZGVyLmNoYW5uZWxDb3VudCk7XG4gICAgfVxuICAgIHBhcnNlRnVsbFBhZ2UocGFnZURhdGEpIHtcbiAgICAgICAgY29uc3QgbWFnaWNTaWduYXR1cmUgPSBuZXcgVG9rZW4uU3RyaW5nVHlwZSg4LCAnYXNjaWknKS5nZXQocGFnZURhdGEsIDApO1xuICAgICAgICBzd2l0Y2ggKG1hZ2ljU2lnbmF0dXJlKSB7XG4gICAgICAgICAgICBjYXNlICdPcHVzVGFncyc6XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZVVzZXJDb21tZW50TGlzdChwYWdlRGF0YSwgOCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0UG9zID0gdGhpcy50b2tlbml6ZXIucG9zaXRpb24gLSBwYWdlRGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhbGN1bGF0ZUR1cmF0aW9uKGhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5tZXRhZGF0YS5mb3JtYXQuc2FtcGxlUmF0ZSAmJiBoZWFkZXIuYWJzb2x1dGVHcmFudWxlUG9zaXRpb24gPj0gMCkge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGR1cmF0aW9uXG4gICAgICAgICAgICBjb25zdCBwb3NfNDhiaXQgPSBoZWFkZXIuYWJzb2x1dGVHcmFudWxlUG9zaXRpb24gLSB0aGlzLmlkSGVhZGVyLnByZVNraXA7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZTYW1wbGVzJywgcG9zXzQ4Yml0KTtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdkdXJhdGlvbicsIHBvc180OGJpdCAvIDQ4MDAwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3RQb3MgIT09IC0xICYmIHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUgJiYgdGhpcy5tZXRhZGF0YS5mb3JtYXQuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhU2l6ZSA9IHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUgLSB0aGlzLmxhc3RQb3M7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCA4ICogZGF0YVNpemUgLyB0aGlzLm1ldGFkYXRhLmZvcm1hdC5kdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk9wdXNQYXJzZXIgPSBPcHVzUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/opus/OpusParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/speex/Speex.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/Speex.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexports.Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: buf.readInt32LE(off + 28),\n            header_size: buf.readInt32LE(off + 32),\n            rate: buf.readInt32LE(off + 36),\n            mode: buf.readInt32LE(off + 40),\n            mode_bitstream_version: buf.readInt32LE(off + 44),\n            nb_channels: buf.readInt32LE(off + 48),\n            bitrate: buf.readInt32LE(off + 52),\n            frame_size: buf.readInt32LE(off + 56),\n            vbr: buf.readInt32LE(off + 60),\n            frames_per_packet: buf.readInt32LE(off + 64),\n            extra_headers: buf.readInt32LE(off + 68),\n            reserved1: buf.readInt32LE(off + 72),\n            reserved2: buf.readInt32LE(off + 76)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9zcGVleC9TcGVleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQywyRUFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL3NwZWV4L1NwZWV4LmpzPzQ2NGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vVXRpbFwiKTtcbi8qKlxuICogU3BlZXggSGVhZGVyIFBhY2tldFxuICogUmVmOiBodHRwczovL3d3dy5zcGVleC5vcmcvZG9jcy9tYW51YWwvc3BlZXgtbWFudWFsL25vZGU4Lmh0bWwjU0VDVElPTjAwODMwMDAwMDAwMDAwMDAwMDAwXG4gKi9cbmV4cG9ydHMuSGVhZGVyID0ge1xuICAgIGxlbjogODAsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNwZWV4OiBuZXcgVG9rZW4uU3RyaW5nVHlwZSg4LCAnYXNjaWknKS5nZXQoYnVmLCBvZmYgKyAwKSxcbiAgICAgICAgICAgIHZlcnNpb246IHV0aWwudHJpbVJpZ2h0TnVsbChuZXcgVG9rZW4uU3RyaW5nVHlwZSgyMCwgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmICsgOCkpLFxuICAgICAgICAgICAgdmVyc2lvbl9pZDogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDI4KSxcbiAgICAgICAgICAgIGhlYWRlcl9zaXplOiBidWYucmVhZEludDMyTEUob2ZmICsgMzIpLFxuICAgICAgICAgICAgcmF0ZTogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDM2KSxcbiAgICAgICAgICAgIG1vZGU6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA0MCksXG4gICAgICAgICAgICBtb2RlX2JpdHN0cmVhbV92ZXJzaW9uOiBidWYucmVhZEludDMyTEUob2ZmICsgNDQpLFxuICAgICAgICAgICAgbmJfY2hhbm5lbHM6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA0OCksXG4gICAgICAgICAgICBiaXRyYXRlOiBidWYucmVhZEludDMyTEUob2ZmICsgNTIpLFxuICAgICAgICAgICAgZnJhbWVfc2l6ZTogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDU2KSxcbiAgICAgICAgICAgIHZicjogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDYwKSxcbiAgICAgICAgICAgIGZyYW1lc19wZXJfcGFja2V0OiBidWYucmVhZEludDMyTEUob2ZmICsgNjQpLFxuICAgICAgICAgICAgZXh0cmFfaGVhZGVyczogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDY4KSxcbiAgICAgICAgICAgIHJlc2VydmVkMTogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDcyKSxcbiAgICAgICAgICAgIHJlc2VydmVkMjogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDc2KVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/speex/Speex.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpeexParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ../vorbis/VorbisParser */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst Speex = __webpack_require__(/*! ./Speex */ \"./node_modules/music-metadata/lib/ogg/speex/Speex.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nclass SpeexParser extends VorbisParser_1.VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n    }\n}\nexports.SpeexParser = SpeexParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9zcGVleC9TcGVleFBhcnNlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0JBQWdCLG1CQUFPLENBQUMsa0RBQU87QUFDL0IsdUJBQXVCLG1CQUFPLENBQUMsNEZBQXdCO0FBQ3ZELGNBQWMsbUJBQU8sQ0FBQyxxRUFBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9vZ2cvc3BlZXgvU3BlZXhQYXJzZXIuanM/Mjg3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BlZXhQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgVm9yYmlzUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vdm9yYmlzL1ZvcmJpc1BhcnNlclwiKTtcbmNvbnN0IFNwZWV4ID0gcmVxdWlyZShcIi4vU3BlZXhcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6b2dnOnNwZWV4Jyk7XG4vKipcbiAqIFNwZWV4LCBSRkMgNTU3NFxuICogUmVmOlxuICogLSBodHRwczovL3d3dy5zcGVleC5vcmcvZG9jcy9tYW51YWwvc3BlZXgtbWFudWFsL1xuICogLSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTU3NFxuICovXG5jbGFzcyBTcGVleFBhcnNlciBleHRlbmRzIFZvcmJpc1BhcnNlcl8xLlZvcmJpc1BhcnNlciB7XG4gICAgY29uc3RydWN0b3IobWV0YWRhdGEsIG9wdGlvbnMsIHRva2VuaXplcikge1xuICAgICAgICBzdXBlcihtZXRhZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBmaXJzdCBTcGVleCBPZ2cgcGFnZVxuICAgICAqIEBwYXJhbSB7SVBhZ2VIZWFkZXJ9IGhlYWRlclxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBwYWdlRGF0YVxuICAgICAqL1xuICAgIHBhcnNlRmlyc3RQYWdlKGhlYWRlciwgcGFnZURhdGEpIHtcbiAgICAgICAgZGVidWcoJ0ZpcnN0IE9nZy9TcGVleCBwYWdlJyk7XG4gICAgICAgIGNvbnN0IHNwZWV4SGVhZGVyID0gU3BlZXguSGVhZGVyLmdldChwYWdlRGF0YSwgMCk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb2RlYycsIGBTcGVleCAke3NwZWV4SGVhZGVyLnZlcnNpb259YCk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZkNoYW5uZWxzJywgc3BlZXhIZWFkZXIubmJfY2hhbm5lbHMpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnc2FtcGxlUmF0ZScsIHNwZWV4SGVhZGVyLnJhdGUpO1xuICAgICAgICBpZiAoc3BlZXhIZWFkZXIuYml0cmF0ZSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgc3BlZXhIZWFkZXIuYml0cmF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNwZWV4UGFyc2VyID0gU3BlZXhQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/theora/Theora.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/Theora.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdentificationHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexports.IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: buf.readUInt8(off + 7),\n            vmin: buf.readUInt8(off + 8),\n            vrev: buf.readUInt8(off + 9),\n            vmbw: buf.readUInt16BE(off + 10),\n            vmbh: buf.readUInt16BE(off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: buf.readUInt8(off + 40)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy90aGVvcmEvVGhlb3JhLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixjQUFjLG1CQUFPLENBQUMsNERBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy90aGVvcmEvVGhlb3JhLmpzPzEzNzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklkZW50aWZpY2F0aW9uSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG4vKipcbiAqIDYuMiBJZGVudGlmaWNhdGlvbiBIZWFkZXJcbiAqIFJlZjogaHR0cHM6Ly90aGVvcmEub3JnL2RvYy9UaGVvcmEucGRmOiA2LjIgSWRlbnRpZmljYXRpb24gSGVhZGVyIERlY29kZVxuICovXG5leHBvcnRzLklkZW50aWZpY2F0aW9uSGVhZGVyID0ge1xuICAgIGxlbjogNDIsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBuZXcgVG9rZW4uU3RyaW5nVHlwZSg3LCAnYXNjaWknKS5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgdm1hajogYnVmLnJlYWRVSW50OChvZmYgKyA3KSxcbiAgICAgICAgICAgIHZtaW46IGJ1Zi5yZWFkVUludDgob2ZmICsgOCksXG4gICAgICAgICAgICB2cmV2OiBidWYucmVhZFVJbnQ4KG9mZiArIDkpLFxuICAgICAgICAgICAgdm1idzogYnVmLnJlYWRVSW50MTZCRShvZmYgKyAxMCksXG4gICAgICAgICAgICB2bWJoOiBidWYucmVhZFVJbnQxNkJFKG9mZiArIDE3KSxcbiAgICAgICAgICAgIG5vbWJyOiBUb2tlbi5VSU5UMjRfQkUuZ2V0KGJ1Ziwgb2ZmICsgMzcpLFxuICAgICAgICAgICAgbnF1YWw6IGJ1Zi5yZWFkVUludDgob2ZmICsgNDApXG4gICAgICAgIH07XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/theora/Theora.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TheoraParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst Theora_1 = __webpack_require__(/*! ./Theora */ \"./node_modules/music-metadata/lib/ogg/theora/Theora.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nclass TheoraParser {\n    constructor(metadata, options, tokenizer) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n    }\n    flush() {\n        debug('flush');\n    }\n    calculateDuration(header) {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = Theora_1.IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n    }\n}\nexports.TheoraParser = TheoraParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy90aGVvcmEvVGhlb3JhUGFyc2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixnQkFBZ0IsbUJBQU8sQ0FBQyxrREFBTztBQUMvQixpQkFBaUIsbUJBQU8sQ0FBQyx3RUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy90aGVvcmEvVGhlb3JhUGFyc2VyLmpzPzZlNDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRoZW9yYVBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBUaGVvcmFfMSA9IHJlcXVpcmUoXCIuL1RoZW9yYVwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpvZ2c6dGhlb3JhJyk7XG4vKipcbiAqIFJlZjpcbiAqIC0gaHR0cHM6Ly90aGVvcmEub3JnL2RvYy9UaGVvcmEucGRmXG4gKi9cbmNsYXNzIFRoZW9yYVBhcnNlciB7XG4gICAgY29uc3RydWN0b3IobWV0YWRhdGEsIG9wdGlvbnMsIHRva2VuaXplcikge1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWb3JiaXMgMSBwYXJzZXJcbiAgICAgKiBAcGFyYW0gaGVhZGVyIE9nZyBQYWdlIEhlYWRlclxuICAgICAqIEBwYXJhbSBwYWdlRGF0YSBQYWdlIGRhdGFcbiAgICAgKi9cbiAgICBwYXJzZVBhZ2UoaGVhZGVyLCBwYWdlRGF0YSkge1xuICAgICAgICBpZiAoaGVhZGVyLmhlYWRlclR5cGUuZmlyc3RQYWdlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlRmlyc3RQYWdlKGhlYWRlciwgcGFnZURhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZsdXNoKCkge1xuICAgICAgICBkZWJ1ZygnZmx1c2gnKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlRHVyYXRpb24oaGVhZGVyKSB7XG4gICAgICAgIGRlYnVnKCdkdXJhdGlvbiBjYWxjdWxhdGlvbiBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgZmlyc3QgVGhlb3JhIE9nZyBwYWdlLiB0aGUgaW5pdGlhbCBpZGVudGlmaWNhdGlvbiBoZWFkZXIgcGFja2V0XG4gICAgICogQHBhcmFtIHtJUGFnZUhlYWRlcn0gaGVhZGVyXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IHBhZ2VEYXRhXG4gICAgICovXG4gICAgcGFyc2VGaXJzdFBhZ2UoaGVhZGVyLCBwYWdlRGF0YSkge1xuICAgICAgICBkZWJ1ZygnRmlyc3QgT2dnL1RoZW9yYSBwYWdlJyk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb2RlYycsICdUaGVvcmEnKTtcbiAgICAgICAgY29uc3QgaWRIZWFkZXIgPSBUaGVvcmFfMS5JZGVudGlmaWNhdGlvbkhlYWRlci5nZXQocGFnZURhdGEsIDApO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnYml0cmF0ZScsIGlkSGVhZGVyLm5vbWJyKTtcbiAgICB9XG59XG5leHBvcnRzLlRoZW9yYVBhcnNlciA9IFRoZW9yYVBhcnNlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdentificationHeader = exports.CommonHeader = exports.VorbisPictureToken = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ../../id3v2/ID3v2Token */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nclass VorbisPictureToken {\n    static fromBase64(base64str) {\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = ID3v2Token_1.AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        const mimeLen = Token.UINT32_BE.get(buffer, offset += 4);\n        const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\n        const descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);\n        const description = buffer.toString('utf-8', offset += 4, offset + descLen);\n        const width = Token.UINT32_BE.get(buffer, offset += descLen);\n        const height = Token.UINT32_BE.get(buffer, offset += 4);\n        const colour_depth = Token.UINT32_BE.get(buffer, offset += 4);\n        const indexed_color = Token.UINT32_BE.get(buffer, offset += 4);\n        const picDataLen = Token.UINT32_BE.get(buffer, offset += 4);\n        const data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\nexports.VorbisPictureToken = VorbisPictureToken;\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexports.CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: buf.readUInt8(off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexports.IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset);\n        return {\n            version: dataView.getUint32(off + 0, true),\n            channelMode: dataView.getUint8(off + 4),\n            sampleRate: dataView.getUint32(off + 5, true),\n            bitrateMax: dataView.getUint32(off + 9, true),\n            bitrateNominal: dataView.getUint32(off + 13, true),\n            bitrateMin: dataView.getUint32(off + 17, true)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsR0FBRyxvQkFBb0IsR0FBRywwQkFBMEI7QUFDaEYsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLHFCQUFxQixtQkFBTyxDQUFDLHFGQUF3QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE1BQU07QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsTUFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL3ZvcmJpcy9Wb3JiaXMuanM/NTg0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSWRlbnRpZmljYXRpb25IZWFkZXIgPSBleHBvcnRzLkNvbW1vbkhlYWRlciA9IGV4cG9ydHMuVm9yYmlzUGljdHVyZVRva2VuID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBJRDN2MlRva2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vaWQzdjIvSUQzdjJUb2tlblwiKTtcbi8qKlxuICogUGFyc2UgdGhlIE1FVEFEQVRBX0JMT0NLX1BJQ1RVUkVcbiAqIFJlZjogaHR0cHM6Ly93aWtpLnhpcGgub3JnL1ZvcmJpc0NvbW1lbnQjTUVUQURBVEFfQkxPQ0tfUElDVFVSRVxuICogUmVmOiBodHRwczovL3hpcGgub3JnL2ZsYWMvZm9ybWF0Lmh0bWwjbWV0YWRhdGFfYmxvY2tfcGljdHVyZVxuICogLy8gVG9EbzogbW92ZSB0byBJRDMgLyBBUElDP1xuICovXG5jbGFzcyBWb3JiaXNQaWN0dXJlVG9rZW4ge1xuICAgIHN0YXRpYyBmcm9tQmFzZTY0KGJhc2U2NHN0cikge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKEJ1ZmZlci5mcm9tKGJhc2U2NHN0ciwgJ2Jhc2U2NCcpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CdWZmZXIoYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IHBpYyA9IG5ldyBWb3JiaXNQaWN0dXJlVG9rZW4oYnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBwaWMuZ2V0KGJ1ZmZlciwgMCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGxlbikge1xuICAgICAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB9XG4gICAgZ2V0KGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBJRDN2MlRva2VuXzEuQXR0YWNoZWRQaWN0dXJlVHlwZVtUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1ZmZlciwgb2Zmc2V0KV07XG4gICAgICAgIGNvbnN0IG1pbWVMZW4gPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1ZmZlciwgb2Zmc2V0ICs9IDQpO1xuICAgICAgICBjb25zdCBmb3JtYXQgPSBidWZmZXIudG9TdHJpbmcoJ3V0Zi04Jywgb2Zmc2V0ICs9IDQsIG9mZnNldCArIG1pbWVMZW4pO1xuICAgICAgICBjb25zdCBkZXNjTGVuID0gVG9rZW4uVUlOVDMyX0JFLmdldChidWZmZXIsIG9mZnNldCArPSBtaW1lTGVuKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBidWZmZXIudG9TdHJpbmcoJ3V0Zi04Jywgb2Zmc2V0ICs9IDQsIG9mZnNldCArIGRlc2NMZW4pO1xuICAgICAgICBjb25zdCB3aWR0aCA9IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmZmVyLCBvZmZzZXQgKz0gZGVzY0xlbik7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmZmVyLCBvZmZzZXQgKz0gNCk7XG4gICAgICAgIGNvbnN0IGNvbG91cl9kZXB0aCA9IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmZmVyLCBvZmZzZXQgKz0gNCk7XG4gICAgICAgIGNvbnN0IGluZGV4ZWRfY29sb3IgPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1ZmZlciwgb2Zmc2V0ICs9IDQpO1xuICAgICAgICBjb25zdCBwaWNEYXRhTGVuID0gVG9rZW4uVUlOVDMyX0JFLmdldChidWZmZXIsIG9mZnNldCArPSA0KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5mcm9tKGJ1ZmZlci5zbGljZShvZmZzZXQgKz0gNCwgb2Zmc2V0ICsgcGljRGF0YUxlbikpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICBjb2xvdXJfZGVwdGgsXG4gICAgICAgICAgICBpbmRleGVkX2NvbG9yLFxuICAgICAgICAgICAgZGF0YVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuVm9yYmlzUGljdHVyZVRva2VuID0gVm9yYmlzUGljdHVyZVRva2VuO1xuLyoqXG4gKiBDb21tZW50IGhlYWRlciBkZWNvZGVyXG4gKiBSZWY6IGh0dHBzOi8veGlwaC5vcmcvdm9yYmlzL2RvYy9Wb3JiaXNfSV9zcGVjLmh0bWwjeDEtNjIwMDA0LjIuMVxuICovXG5leHBvcnRzLkNvbW1vbkhlYWRlciA9IHtcbiAgICBsZW46IDcsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhY2tldFR5cGU6IGJ1Zi5yZWFkVUludDgob2ZmKSxcbiAgICAgICAgICAgIHZvcmJpczogbmV3IFRva2VuLlN0cmluZ1R5cGUoNiwgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmICsgMSlcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBJZGVudGlmaWNhdGlvbiBoZWFkZXIgZGVjb2RlclxuICogUmVmOiBodHRwczovL3hpcGgub3JnL3ZvcmJpcy9kb2MvVm9yYmlzX0lfc3BlYy5odG1sI3gxLTYzMDAwNC4yLjJcbiAqL1xuZXhwb3J0cy5JZGVudGlmaWNhdGlvbkhlYWRlciA9IHtcbiAgICBsZW46IDIzLFxuICAgIGdldDogKHVpbnQ4QXJyYXksIG9mZikgPT4ge1xuICAgICAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyh1aW50OEFycmF5LmJ1ZmZlciwgdWludDhBcnJheS5ieXRlT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246IGRhdGFWaWV3LmdldFVpbnQzMihvZmYgKyAwLCB0cnVlKSxcbiAgICAgICAgICAgIGNoYW5uZWxNb2RlOiBkYXRhVmlldy5nZXRVaW50OChvZmYgKyA0KSxcbiAgICAgICAgICAgIHNhbXBsZVJhdGU6IGRhdGFWaWV3LmdldFVpbnQzMihvZmYgKyA1LCB0cnVlKSxcbiAgICAgICAgICAgIGJpdHJhdGVNYXg6IGRhdGFWaWV3LmdldFVpbnQzMihvZmYgKyA5LCB0cnVlKSxcbiAgICAgICAgICAgIGJpdHJhdGVOb21pbmFsOiBkYXRhVmlldy5nZXRVaW50MzIob2ZmICsgMTMsIHRydWUpLFxuICAgICAgICAgICAgYml0cmF0ZU1pbjogZGF0YVZpZXcuZ2V0VWludDMyKG9mZiArIDE3LCB0cnVlKVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VorbisDecoder = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nclass VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = Buffer.from(this.data).toString('utf-8', this.offset, this.offset + len);\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.slice(0, idx).toUpperCase(),\n            value: v.slice(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\nexports.VorbisDecoder = VorbisDecoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzRGVjb2Rlci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLGNBQWMsbUJBQU8sQ0FBQyw0REFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL3ZvcmJpcy9Wb3JiaXNEZWNvZGVyLmpzPzk2ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZvcmJpc0RlY29kZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNsYXNzIFZvcmJpc0RlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIG9mZnNldCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gICAgcmVhZEludDMyKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFRva2VuLlVJTlQzMl9MRS5nZXQodGhpcy5kYXRhLCB0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmVhZFN0cmluZ1V0ZjgoKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMucmVhZEludDMyKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gQnVmZmVyLmZyb20odGhpcy5kYXRhKS50b1N0cmluZygndXRmLTgnLCB0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBsZW47XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcGFyc2VVc2VyQ29tbWVudCgpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0MCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBjb25zdCB2ID0gdGhpcy5yZWFkU3RyaW5nVXRmOCgpO1xuICAgICAgICBjb25zdCBpZHggPSB2LmluZGV4T2YoJz0nKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogdi5zbGljZSgwLCBpZHgpLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICB2YWx1ZTogdi5zbGljZShpZHggKyAxKSxcbiAgICAgICAgICAgIGxlbjogdGhpcy5vZmZzZXQgLSBvZmZzZXQwXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Wb3JiaXNEZWNvZGVyID0gVm9yYmlzRGVjb2RlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VorbisParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst VorbisDecoder_1 = __webpack_require__(/*! ./VorbisDecoder */ \"./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\");\nconst Vorbis_1 = __webpack_require__(/*! ./Vorbis */ \"./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg:vorbis1');\n/**\n * Vorbis 1 Parser.\n * Used by OggParser\n */\nclass VorbisParser {\n    constructor(metadata, options) {\n        this.metadata = metadata;\n        this.options = options;\n        this.pageSegments = [];\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new Error(\"Cannot continue on previous page\");\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = Buffer.concat(this.pageSegments);\n                    this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.calculateDuration(header);\n        }\n    }\n    flush() {\n        this.parseFullPage(Buffer.concat(this.pageSegments));\n    }\n    parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder_1.VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(`Ignore picture`);\n                return;\n            }\n            value = Vorbis_1.VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\n            this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        debug(\"Parse first page\");\n        // Parse  Vorbis common header\n        const commonHeader = Vorbis_1.CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new Error('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = Vorbis_1.IdentificationHeader.get(pageData, Vorbis_1.CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug(\"sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s\", idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new Error('First Ogg page should be type 1: the identification header');\n    }\n    parseFullPage(pageData) {\n        // New page\n        const commonHeader = Vorbis_1.CommonHeader.get(pageData, 0);\n        debug(\"Parse full page: type=%s, byteLength=%s\", commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, Vorbis_1.CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += this.parseUserComment(pageData, offset);\n        }\n    }\n}\nexports.VorbisParser = VorbisParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VorbisTagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * Vorbis tag mappings\n *\n * Mapping from native header format to one or possibly more 'common' entries\n * The common entries aim to read the same information from different media files\n * independent of the underlying format\n */\nconst vorbisTagMap = {\n    TITLE: 'title',\n    ARTIST: 'artist',\n    ARTISTS: 'artists',\n    ALBUMARTIST: 'albumartist',\n    'ALBUM ARTIST': 'albumartist',\n    ALBUM: 'album',\n    DATE: 'date',\n    ORIGINALDATE: 'originaldate',\n    ORIGINALYEAR: 'originalyear',\n    COMMENT: 'comment',\n    TRACKNUMBER: 'track',\n    DISCNUMBER: 'disk',\n    GENRE: 'genre',\n    METADATA_BLOCK_PICTURE: 'picture',\n    COMPOSER: 'composer',\n    LYRICS: 'lyrics',\n    ALBUMSORT: 'albumsort',\n    TITLESORT: 'titlesort',\n    WORK: 'work',\n    ARTISTSORT: 'artistsort',\n    ALBUMARTISTSORT: 'albumartistsort',\n    COMPOSERSORT: 'composersort',\n    LYRICIST: 'lyricist',\n    WRITER: 'writer',\n    CONDUCTOR: 'conductor',\n    // 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo\n    REMIXER: 'remixer',\n    ARRANGER: 'arranger',\n    ENGINEER: 'engineer',\n    PRODUCER: 'producer',\n    DJMIXER: 'djmixer',\n    MIXER: 'mixer',\n    LABEL: 'label',\n    GROUPING: 'grouping',\n    SUBTITLE: 'subtitle',\n    DISCSUBTITLE: 'discsubtitle',\n    TRACKTOTAL: 'totaltracks',\n    DISCTOTAL: 'totaldiscs',\n    COMPILATION: 'compilation',\n    RATING: 'rating',\n    BPM: 'bpm',\n    KEY: 'key',\n    MOOD: 'mood',\n    MEDIA: 'media',\n    CATALOGNUMBER: 'catalognumber',\n    RELEASESTATUS: 'releasestatus',\n    RELEASETYPE: 'releasetype',\n    RELEASECOUNTRY: 'releasecountry',\n    SCRIPT: 'script',\n    LANGUAGE: 'language',\n    COPYRIGHT: 'copyright',\n    LICENSE: 'license',\n    ENCODEDBY: 'encodedby',\n    ENCODERSETTINGS: 'encodersettings',\n    BARCODE: 'barcode',\n    ISRC: 'isrc',\n    ASIN: 'asin',\n    MUSICBRAINZ_TRACKID: 'musicbrainz_recordingid',\n    MUSICBRAINZ_RELEASETRACKID: 'musicbrainz_trackid',\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\n    ACOUSTID_ID: 'acoustid_id',\n    ACOUSTID_ID_FINGERPRINT: 'acoustid_fingerprint',\n    MUSICIP_PUID: 'musicip_puid',\n    // 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo\n    WEBSITE: 'website',\n    NOTES: 'notes',\n    TOTALTRACKS: 'totaltracks',\n    TOTALDISCS: 'totaldiscs',\n    // Discogs\n    DISCOGS_ARTIST_ID: 'discogs_artist_id',\n    DISCOGS_ARTISTS: 'artists',\n    DISCOGS_ARTIST_NAME: 'artists',\n    DISCOGS_ALBUM_ARTISTS: 'albumartist',\n    DISCOGS_CATALOG: 'catalognumber',\n    DISCOGS_COUNTRY: 'releasecountry',\n    DISCOGS_DATE: 'originaldate',\n    DISCOGS_LABEL: 'label',\n    DISCOGS_LABEL_ID: 'discogs_label_id',\n    DISCOGS_MASTER_RELEASE_ID: 'discogs_master_release_id',\n    DISCOGS_RATING: 'discogs_rating',\n    DISCOGS_RELEASED: 'date',\n    DISCOGS_RELEASE_ID: 'discogs_release_id',\n    DISCOGS_VOTES: 'discogs_votes',\n    CATALOGID: 'catalognumber',\n    STYLE: 'genre',\n    //\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\n    REPLAYGAIN_ALBUM_GAIN: 'replaygain_album_gain',\n    REPLAYGAIN_ALBUM_PEAK: 'replaygain_album_peak',\n    // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:\n    REPLAYGAIN_MINMAX: 'replaygain_track_minmax',\n    REPLAYGAIN_ALBUM_MINMAX: 'replaygain_album_minmax',\n    REPLAYGAIN_UNDO: 'replaygain_undo'\n};\nclass VorbisTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    static toRating(email, rating) {\n        return {\n            source: email ? email.toLowerCase() : email,\n            rating: parseFloat(rating) * GenericTagMapper_1.CommonTagMapper.maxRatingScore\n        };\n    }\n    constructor() {\n        super(['vorbis'], vorbisTagMap);\n    }\n    postMap(tag) {\n        if (tag.id.indexOf('RATING:') === 0) {\n            const keys = tag.id.split(':');\n            tag.value = VorbisTagMapper.toRating(keys[1], tag.value);\n            tag.id = keys[0];\n        }\n    }\n}\nexports.VorbisTagMapper = VorbisTagMapper;\n//# sourceMappingURL=VorbisTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzVGFnTWFwcGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QiwyQkFBMkIsbUJBQU8sQ0FBQyxtR0FBK0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxZQUFZO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL3ZvcmJpcy9Wb3JiaXNUYWdNYXBwZXIuanM/MDYzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVm9yYmlzVGFnTWFwcGVyID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyXCIpO1xuLyoqXG4gKiBWb3JiaXMgdGFnIG1hcHBpbmdzXG4gKlxuICogTWFwcGluZyBmcm9tIG5hdGl2ZSBoZWFkZXIgZm9ybWF0IHRvIG9uZSBvciBwb3NzaWJseSBtb3JlICdjb21tb24nIGVudHJpZXNcbiAqIFRoZSBjb21tb24gZW50cmllcyBhaW0gdG8gcmVhZCB0aGUgc2FtZSBpbmZvcm1hdGlvbiBmcm9tIGRpZmZlcmVudCBtZWRpYSBmaWxlc1xuICogaW5kZXBlbmRlbnQgb2YgdGhlIHVuZGVybHlpbmcgZm9ybWF0XG4gKi9cbmNvbnN0IHZvcmJpc1RhZ01hcCA9IHtcbiAgICBUSVRMRTogJ3RpdGxlJyxcbiAgICBBUlRJU1Q6ICdhcnRpc3QnLFxuICAgIEFSVElTVFM6ICdhcnRpc3RzJyxcbiAgICBBTEJVTUFSVElTVDogJ2FsYnVtYXJ0aXN0JyxcbiAgICAnQUxCVU0gQVJUSVNUJzogJ2FsYnVtYXJ0aXN0JyxcbiAgICBBTEJVTTogJ2FsYnVtJyxcbiAgICBEQVRFOiAnZGF0ZScsXG4gICAgT1JJR0lOQUxEQVRFOiAnb3JpZ2luYWxkYXRlJyxcbiAgICBPUklHSU5BTFlFQVI6ICdvcmlnaW5hbHllYXInLFxuICAgIENPTU1FTlQ6ICdjb21tZW50JyxcbiAgICBUUkFDS05VTUJFUjogJ3RyYWNrJyxcbiAgICBESVNDTlVNQkVSOiAnZGlzaycsXG4gICAgR0VOUkU6ICdnZW5yZScsXG4gICAgTUVUQURBVEFfQkxPQ0tfUElDVFVSRTogJ3BpY3R1cmUnLFxuICAgIENPTVBPU0VSOiAnY29tcG9zZXInLFxuICAgIExZUklDUzogJ2x5cmljcycsXG4gICAgQUxCVU1TT1JUOiAnYWxidW1zb3J0JyxcbiAgICBUSVRMRVNPUlQ6ICd0aXRsZXNvcnQnLFxuICAgIFdPUks6ICd3b3JrJyxcbiAgICBBUlRJU1RTT1JUOiAnYXJ0aXN0c29ydCcsXG4gICAgQUxCVU1BUlRJU1RTT1JUOiAnYWxidW1hcnRpc3Rzb3J0JyxcbiAgICBDT01QT1NFUlNPUlQ6ICdjb21wb3NlcnNvcnQnLFxuICAgIExZUklDSVNUOiAnbHlyaWNpc3QnLFxuICAgIFdSSVRFUjogJ3dyaXRlcicsXG4gICAgQ09ORFVDVE9SOiAnY29uZHVjdG9yJyxcbiAgICAvLyAnUEVSRk9STUVSPWFydGlzdMKgKGluc3RydW1lbnQpJzogJ3BlcmZvcm1lcjppbnN0cnVtZW50JywgLy8gVG9Eb1xuICAgIFJFTUlYRVI6ICdyZW1peGVyJyxcbiAgICBBUlJBTkdFUjogJ2FycmFuZ2VyJyxcbiAgICBFTkdJTkVFUjogJ2VuZ2luZWVyJyxcbiAgICBQUk9EVUNFUjogJ3Byb2R1Y2VyJyxcbiAgICBESk1JWEVSOiAnZGptaXhlcicsXG4gICAgTUlYRVI6ICdtaXhlcicsXG4gICAgTEFCRUw6ICdsYWJlbCcsXG4gICAgR1JPVVBJTkc6ICdncm91cGluZycsXG4gICAgU1VCVElUTEU6ICdzdWJ0aXRsZScsXG4gICAgRElTQ1NVQlRJVExFOiAnZGlzY3N1YnRpdGxlJyxcbiAgICBUUkFDS1RPVEFMOiAndG90YWx0cmFja3MnLFxuICAgIERJU0NUT1RBTDogJ3RvdGFsZGlzY3MnLFxuICAgIENPTVBJTEFUSU9OOiAnY29tcGlsYXRpb24nLFxuICAgIFJBVElORzogJ3JhdGluZycsXG4gICAgQlBNOiAnYnBtJyxcbiAgICBLRVk6ICdrZXknLFxuICAgIE1PT0Q6ICdtb29kJyxcbiAgICBNRURJQTogJ21lZGlhJyxcbiAgICBDQVRBTE9HTlVNQkVSOiAnY2F0YWxvZ251bWJlcicsXG4gICAgUkVMRUFTRVNUQVRVUzogJ3JlbGVhc2VzdGF0dXMnLFxuICAgIFJFTEVBU0VUWVBFOiAncmVsZWFzZXR5cGUnLFxuICAgIFJFTEVBU0VDT1VOVFJZOiAncmVsZWFzZWNvdW50cnknLFxuICAgIFNDUklQVDogJ3NjcmlwdCcsXG4gICAgTEFOR1VBR0U6ICdsYW5ndWFnZScsXG4gICAgQ09QWVJJR0hUOiAnY29weXJpZ2h0JyxcbiAgICBMSUNFTlNFOiAnbGljZW5zZScsXG4gICAgRU5DT0RFREJZOiAnZW5jb2RlZGJ5JyxcbiAgICBFTkNPREVSU0VUVElOR1M6ICdlbmNvZGVyc2V0dGluZ3MnLFxuICAgIEJBUkNPREU6ICdiYXJjb2RlJyxcbiAgICBJU1JDOiAnaXNyYycsXG4gICAgQVNJTjogJ2FzaW4nLFxuICAgIE1VU0lDQlJBSU5aX1RSQUNLSUQ6ICdtdXNpY2JyYWluel9yZWNvcmRpbmdpZCcsXG4gICAgTVVTSUNCUkFJTlpfUkVMRUFTRVRSQUNLSUQ6ICdtdXNpY2JyYWluel90cmFja2lkJyxcbiAgICBNVVNJQ0JSQUlOWl9BTEJVTUlEOiAnbXVzaWNicmFpbnpfYWxidW1pZCcsXG4gICAgTVVTSUNCUkFJTlpfQVJUSVNUSUQ6ICdtdXNpY2JyYWluel9hcnRpc3RpZCcsXG4gICAgTVVTSUNCUkFJTlpfQUxCVU1BUlRJU1RJRDogJ211c2ljYnJhaW56X2FsYnVtYXJ0aXN0aWQnLFxuICAgIE1VU0lDQlJBSU5aX1JFTEVBU0VHUk9VUElEOiAnbXVzaWNicmFpbnpfcmVsZWFzZWdyb3VwaWQnLFxuICAgIE1VU0lDQlJBSU5aX1dPUktJRDogJ211c2ljYnJhaW56X3dvcmtpZCcsXG4gICAgTVVTSUNCUkFJTlpfVFJNSUQ6ICdtdXNpY2JyYWluel90cm1pZCcsXG4gICAgTVVTSUNCUkFJTlpfRElTQ0lEOiAnbXVzaWNicmFpbnpfZGlzY2lkJyxcbiAgICBBQ09VU1RJRF9JRDogJ2Fjb3VzdGlkX2lkJyxcbiAgICBBQ09VU1RJRF9JRF9GSU5HRVJQUklOVDogJ2Fjb3VzdGlkX2ZpbmdlcnByaW50JyxcbiAgICBNVVNJQ0lQX1BVSUQ6ICdtdXNpY2lwX3B1aWQnLFxuICAgIC8vICdGSU5HRVJQUklOVD1NdXNpY01hZ2ljIEZpbmdlcnByaW50wqB7ZmluZ2VycHJpbnR9JzogJ211c2ljaXBfZmluZ2VycHJpbnQnLCAvLyBUb0RvXG4gICAgV0VCU0lURTogJ3dlYnNpdGUnLFxuICAgIE5PVEVTOiAnbm90ZXMnLFxuICAgIFRPVEFMVFJBQ0tTOiAndG90YWx0cmFja3MnLFxuICAgIFRPVEFMRElTQ1M6ICd0b3RhbGRpc2NzJyxcbiAgICAvLyBEaXNjb2dzXG4gICAgRElTQ09HU19BUlRJU1RfSUQ6ICdkaXNjb2dzX2FydGlzdF9pZCcsXG4gICAgRElTQ09HU19BUlRJU1RTOiAnYXJ0aXN0cycsXG4gICAgRElTQ09HU19BUlRJU1RfTkFNRTogJ2FydGlzdHMnLFxuICAgIERJU0NPR1NfQUxCVU1fQVJUSVNUUzogJ2FsYnVtYXJ0aXN0JyxcbiAgICBESVNDT0dTX0NBVEFMT0c6ICdjYXRhbG9nbnVtYmVyJyxcbiAgICBESVNDT0dTX0NPVU5UUlk6ICdyZWxlYXNlY291bnRyeScsXG4gICAgRElTQ09HU19EQVRFOiAnb3JpZ2luYWxkYXRlJyxcbiAgICBESVNDT0dTX0xBQkVMOiAnbGFiZWwnLFxuICAgIERJU0NPR1NfTEFCRUxfSUQ6ICdkaXNjb2dzX2xhYmVsX2lkJyxcbiAgICBESVNDT0dTX01BU1RFUl9SRUxFQVNFX0lEOiAnZGlzY29nc19tYXN0ZXJfcmVsZWFzZV9pZCcsXG4gICAgRElTQ09HU19SQVRJTkc6ICdkaXNjb2dzX3JhdGluZycsXG4gICAgRElTQ09HU19SRUxFQVNFRDogJ2RhdGUnLFxuICAgIERJU0NPR1NfUkVMRUFTRV9JRDogJ2Rpc2NvZ3NfcmVsZWFzZV9pZCcsXG4gICAgRElTQ09HU19WT1RFUzogJ2Rpc2NvZ3Nfdm90ZXMnLFxuICAgIENBVEFMT0dJRDogJ2NhdGFsb2dudW1iZXInLFxuICAgIFNUWUxFOiAnZ2VucmUnLFxuICAgIC8vXG4gICAgUkVQTEFZR0FJTl9UUkFDS19HQUlOOiAncmVwbGF5Z2Fpbl90cmFja19nYWluJyxcbiAgICBSRVBMQVlHQUlOX1RSQUNLX1BFQUs6ICdyZXBsYXlnYWluX3RyYWNrX3BlYWsnLFxuICAgIFJFUExBWUdBSU5fQUxCVU1fR0FJTjogJ3JlcGxheWdhaW5fYWxidW1fZ2FpbicsXG4gICAgUkVQTEFZR0FJTl9BTEJVTV9QRUFLOiAncmVwbGF5Z2Fpbl9hbGJ1bV9wZWFrJyxcbiAgICAvLyBUbyBTdXJlIGlmIHRoZXNlIChSRVBMQVlHQUlOX01JTk1BWCwgUkVQTEFZR0FJTl9BTEJVTV9NSU5NQVggJiBSRVBMQVlHQUlOX1VORE8pIGFyZSB1c2VkIGZvciBWb3JiaXM6XG4gICAgUkVQTEFZR0FJTl9NSU5NQVg6ICdyZXBsYXlnYWluX3RyYWNrX21pbm1heCcsXG4gICAgUkVQTEFZR0FJTl9BTEJVTV9NSU5NQVg6ICdyZXBsYXlnYWluX2FsYnVtX21pbm1heCcsXG4gICAgUkVQTEFZR0FJTl9VTkRPOiAncmVwbGF5Z2Fpbl91bmRvJ1xufTtcbmNsYXNzIFZvcmJpc1RhZ01hcHBlciBleHRlbmRzIEdlbmVyaWNUYWdNYXBwZXJfMS5Db21tb25UYWdNYXBwZXIge1xuICAgIHN0YXRpYyB0b1JhdGluZyhlbWFpbCwgcmF0aW5nKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3VyY2U6IGVtYWlsID8gZW1haWwudG9Mb3dlckNhc2UoKSA6IGVtYWlsLFxuICAgICAgICAgICAgcmF0aW5nOiBwYXJzZUZsb2F0KHJhdGluZykgKiBHZW5lcmljVGFnTWFwcGVyXzEuQ29tbW9uVGFnTWFwcGVyLm1heFJhdGluZ1Njb3JlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihbJ3ZvcmJpcyddLCB2b3JiaXNUYWdNYXApO1xuICAgIH1cbiAgICBwb3N0TWFwKHRhZykge1xuICAgICAgICBpZiAodGFnLmlkLmluZGV4T2YoJ1JBVElORzonKSA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IHRhZy5pZC5zcGxpdCgnOicpO1xuICAgICAgICAgICAgdGFnLnZhbHVlID0gVm9yYmlzVGFnTWFwcGVyLnRvUmF0aW5nKGtleXNbMV0sIHRhZy52YWx1ZSk7XG4gICAgICAgICAgICB0YWcuaWQgPSBrZXlzWzBdO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Wb3JiaXNUYWdNYXBwZXIgPSBWb3JiaXNUYWdNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Wb3JiaXNUYWdNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/riff/RiffChunk.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/riff/RiffChunk.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListInfoTagValue = exports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/**\n * Common RIFF chunk header\n */\nexports.Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: buf.toString('binary', off, off + 4),\n            // Size\n            chunkSize: Token.UINT32_LE.get(buf, 4)\n        };\n    }\n};\n/**\n * Token to parse RIFF-INFO tag value\n */\nclass ListInfoTagValue {\n    constructor(tagHeader) {\n        this.tagHeader = tagHeader;\n        this.len = tagHeader.chunkSize;\n        this.len += this.len & 1; // if it is an odd length, round up to even\n    }\n    get(buf, off) {\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\n    }\n}\nexports.ListInfoTagValue = ListInfoTagValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3JpZmYvUmlmZkNodW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLGNBQWM7QUFDekMsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9yaWZmL1JpZmZDaHVuay5qcz8yMGQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0SW5mb1RhZ1ZhbHVlID0gZXhwb3J0cy5IZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbi8qKlxuICogQ29tbW9uIFJJRkYgY2h1bmsgaGVhZGVyXG4gKi9cbmV4cG9ydHMuSGVhZGVyID0ge1xuICAgIGxlbjogOCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gR3JvdXAtSURcbiAgICAgICAgICAgIGNodW5rSUQ6IGJ1Zi50b1N0cmluZygnYmluYXJ5Jywgb2ZmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIC8vIFNpemVcbiAgICAgICAgICAgIGNodW5rU2l6ZTogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIDQpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogVG9rZW4gdG8gcGFyc2UgUklGRi1JTkZPIHRhZyB2YWx1ZVxuICovXG5jbGFzcyBMaXN0SW5mb1RhZ1ZhbHVlIHtcbiAgICBjb25zdHJ1Y3Rvcih0YWdIZWFkZXIpIHtcbiAgICAgICAgdGhpcy50YWdIZWFkZXIgPSB0YWdIZWFkZXI7XG4gICAgICAgIHRoaXMubGVuID0gdGFnSGVhZGVyLmNodW5rU2l6ZTtcbiAgICAgICAgdGhpcy5sZW4gKz0gdGhpcy5sZW4gJiAxOyAvLyBpZiBpdCBpcyBhbiBvZGQgbGVuZ3RoLCByb3VuZCB1cCB0byBldmVuXG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4gbmV3IFRva2VuLlN0cmluZ1R5cGUodGhpcy50YWdIZWFkZXIuY2h1bmtTaXplLCAnYXNjaWknKS5nZXQoYnVmLCBvZmYpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdEluZm9UYWdWYWx1ZSA9IExpc3RJbmZvVGFnVmFsdWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/riff/RiffChunk.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RiffInfoTagMapper = exports.riffInfoTagMap = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * RIFF Info Tags; part of the EXIF 2.3\n * Ref: http://owl.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info\n */\nexports.riffInfoTagMap = {\n    IART: 'artist',\n    ICRD: 'date',\n    INAM: 'title',\n    TITL: 'title',\n    IPRD: 'album',\n    ITRK: 'track',\n    COMM: 'comment',\n    ICMT: 'comment',\n    ICNT: 'releasecountry',\n    GNRE: 'genre',\n    IWRI: 'writer',\n    RATE: 'rating',\n    YEAR: 'year',\n    ISFT: 'encodedby',\n    CODE: 'encodedby',\n    TURL: 'website',\n    IGNR: 'genre',\n    IENG: 'engineer',\n    ITCH: 'technician',\n    IMED: 'media',\n    IRPD: 'album' // Product, where the file was intended for\n};\nclass RiffInfoTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    constructor() {\n        super(['exif'], exports.riffInfoTagMap);\n    }\n}\nexports.RiffInfoTagMapper = RiffInfoTagMapper;\n//# sourceMappingURL=RiffInfoTagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3JpZmYvUmlmZkluZm9UYWdNYXAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsc0JBQXNCO0FBQ2xELDJCQUEyQixtQkFBTyxDQUFDLGdHQUE0QjtBQUMvRDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3JpZmYvUmlmZkluZm9UYWdNYXAuanM/NjRmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmlmZkluZm9UYWdNYXBwZXIgPSBleHBvcnRzLnJpZmZJbmZvVGFnTWFwID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyXCIpO1xuLyoqXG4gKiBSSUZGIEluZm8gVGFnczsgcGFydCBvZiB0aGUgRVhJRiAyLjNcbiAqIFJlZjogaHR0cDovL293bC5waHkucXVlZW5zdS5jYS9+cGhpbC9leGlmdG9vbC9UYWdOYW1lcy9SSUZGLmh0bWwjSW5mb1xuICovXG5leHBvcnRzLnJpZmZJbmZvVGFnTWFwID0ge1xuICAgIElBUlQ6ICdhcnRpc3QnLFxuICAgIElDUkQ6ICdkYXRlJyxcbiAgICBJTkFNOiAndGl0bGUnLFxuICAgIFRJVEw6ICd0aXRsZScsXG4gICAgSVBSRDogJ2FsYnVtJyxcbiAgICBJVFJLOiAndHJhY2snLFxuICAgIENPTU06ICdjb21tZW50JyxcbiAgICBJQ01UOiAnY29tbWVudCcsXG4gICAgSUNOVDogJ3JlbGVhc2Vjb3VudHJ5JyxcbiAgICBHTlJFOiAnZ2VucmUnLFxuICAgIElXUkk6ICd3cml0ZXInLFxuICAgIFJBVEU6ICdyYXRpbmcnLFxuICAgIFlFQVI6ICd5ZWFyJyxcbiAgICBJU0ZUOiAnZW5jb2RlZGJ5JyxcbiAgICBDT0RFOiAnZW5jb2RlZGJ5JyxcbiAgICBUVVJMOiAnd2Vic2l0ZScsXG4gICAgSUdOUjogJ2dlbnJlJyxcbiAgICBJRU5HOiAnZW5naW5lZXInLFxuICAgIElUQ0g6ICd0ZWNobmljaWFuJyxcbiAgICBJTUVEOiAnbWVkaWEnLFxuICAgIElSUEQ6ICdhbGJ1bScgLy8gUHJvZHVjdCwgd2hlcmUgdGhlIGZpbGUgd2FzIGludGVuZGVkIGZvclxufTtcbmNsYXNzIFJpZmZJbmZvVGFnTWFwcGVyIGV4dGVuZHMgR2VuZXJpY1RhZ01hcHBlcl8xLkNvbW1vblRhZ01hcHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsnZXhpZiddLCBleHBvcnRzLnJpZmZJbmZvVGFnTWFwKTtcbiAgICB9XG59XG5leHBvcnRzLlJpZmZJbmZvVGFnTWFwcGVyID0gUmlmZkluZm9UYWdNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SaWZmSW5mb1RhZ01hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/type.js":
/*!*************************************************!*\
  !*** ./node_modules/music-metadata/lib/type.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = void 0;\nvar types_1 = __webpack_require__(/*! ./matroska/types */ \"./node_modules/music-metadata/lib/matroska/types.js\");\nObject.defineProperty(exports, \"TrackType\", ({ enumerable: true, get: function () { return types_1.TrackType; } }));\n//# sourceMappingURL=type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3R5cGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGNBQWMsbUJBQU8sQ0FBQyw2RUFBa0I7QUFDeEMsNkNBQTRDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2pIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvdHlwZS5qcz83YzE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFja1R5cGUgPSB2b2lkIDA7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL21hdHJvc2thL3R5cGVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2tUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLlRyYWNrVHlwZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/type.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/wav/BwfChunk.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/BwfChunk.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BroadcastAudioExtensionChunk = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * Broadcast Audio Extension Chunk\n * Ref: https://tech.ebu.ch/docs/tech/tech3285.pdf\n */\nexports.BroadcastAudioExtensionChunk = {\n    len: 420,\n    get: (uint8array, off) => {\n        return {\n            description: (0, Util_1.stripNulls)(new Token.StringType(256, 'ascii').get(uint8array, off)).trim(),\n            originator: (0, Util_1.stripNulls)(new Token.StringType(32, 'ascii').get(uint8array, off + 256)).trim(),\n            originatorReference: (0, Util_1.stripNulls)(new Token.StringType(32, 'ascii').get(uint8array, off + 288)).trim(),\n            originationDate: (0, Util_1.stripNulls)(new Token.StringType(10, 'ascii').get(uint8array, off + 320)).trim(),\n            originationTime: (0, Util_1.stripNulls)(new Token.StringType(8, 'ascii').get(uint8array, off + 330)).trim(),\n            timeReferenceLow: Token.UINT32_LE.get(uint8array, off + 338),\n            timeReferenceHigh: Token.UINT32_LE.get(uint8array, off + 342),\n            version: Token.UINT16_LE.get(uint8array, off + 346),\n            umid: new Token.Uint8ArrayType(64).get(uint8array, off + 348),\n            loudnessValue: Token.UINT16_LE.get(uint8array, off + 412),\n            maxTruePeakLevel: Token.UINT16_LE.get(uint8array, off + 414),\n            maxMomentaryLoudness: Token.UINT16_LE.get(uint8array, off + 416),\n            maxShortTermLoudness: Token.UINT16_LE.get(uint8array, off + 418)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdi9Cd2ZDaHVuay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi93YXYvQndmQ2h1bmsuanM/ZTIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnJvYWRjYXN0QXVkaW9FeHRlbnNpb25DaHVuayA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgVXRpbF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9VdGlsXCIpO1xuLyoqXG4gKiBCcm9hZGNhc3QgQXVkaW8gRXh0ZW5zaW9uIENodW5rXG4gKiBSZWY6IGh0dHBzOi8vdGVjaC5lYnUuY2gvZG9jcy90ZWNoL3RlY2gzMjg1LnBkZlxuICovXG5leHBvcnRzLkJyb2FkY2FzdEF1ZGlvRXh0ZW5zaW9uQ2h1bmsgPSB7XG4gICAgbGVuOiA0MjAsXG4gICAgZ2V0OiAodWludDhhcnJheSwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogKDAsIFV0aWxfMS5zdHJpcE51bGxzKShuZXcgVG9rZW4uU3RyaW5nVHlwZSgyNTYsICdhc2NpaScpLmdldCh1aW50OGFycmF5LCBvZmYpKS50cmltKCksXG4gICAgICAgICAgICBvcmlnaW5hdG9yOiAoMCwgVXRpbF8xLnN0cmlwTnVsbHMpKG5ldyBUb2tlbi5TdHJpbmdUeXBlKDMyLCAnYXNjaWknKS5nZXQodWludDhhcnJheSwgb2ZmICsgMjU2KSkudHJpbSgpLFxuICAgICAgICAgICAgb3JpZ2luYXRvclJlZmVyZW5jZTogKDAsIFV0aWxfMS5zdHJpcE51bGxzKShuZXcgVG9rZW4uU3RyaW5nVHlwZSgzMiwgJ2FzY2lpJykuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDI4OCkpLnRyaW0oKSxcbiAgICAgICAgICAgIG9yaWdpbmF0aW9uRGF0ZTogKDAsIFV0aWxfMS5zdHJpcE51bGxzKShuZXcgVG9rZW4uU3RyaW5nVHlwZSgxMCwgJ2FzY2lpJykuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDMyMCkpLnRyaW0oKSxcbiAgICAgICAgICAgIG9yaWdpbmF0aW9uVGltZTogKDAsIFV0aWxfMS5zdHJpcE51bGxzKShuZXcgVG9rZW4uU3RyaW5nVHlwZSg4LCAnYXNjaWknKS5nZXQodWludDhhcnJheSwgb2ZmICsgMzMwKSkudHJpbSgpLFxuICAgICAgICAgICAgdGltZVJlZmVyZW5jZUxvdzogVG9rZW4uVUlOVDMyX0xFLmdldCh1aW50OGFycmF5LCBvZmYgKyAzMzgpLFxuICAgICAgICAgICAgdGltZVJlZmVyZW5jZUhpZ2g6IFRva2VuLlVJTlQzMl9MRS5nZXQodWludDhhcnJheSwgb2ZmICsgMzQyKSxcbiAgICAgICAgICAgIHZlcnNpb246IFRva2VuLlVJTlQxNl9MRS5nZXQodWludDhhcnJheSwgb2ZmICsgMzQ2KSxcbiAgICAgICAgICAgIHVtaWQ6IG5ldyBUb2tlbi5VaW50OEFycmF5VHlwZSg2NCkuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDM0OCksXG4gICAgICAgICAgICBsb3VkbmVzc1ZhbHVlOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDQxMiksXG4gICAgICAgICAgICBtYXhUcnVlUGVha0xldmVsOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDQxNCksXG4gICAgICAgICAgICBtYXhNb21lbnRhcnlMb3VkbmVzczogVG9rZW4uVUlOVDE2X0xFLmdldCh1aW50OGFycmF5LCBvZmYgKyA0MTYpLFxuICAgICAgICAgICAgbWF4U2hvcnRUZXJtTG91ZG5lc3M6IFRva2VuLlVJTlQxNl9MRS5nZXQodWludDhhcnJheSwgb2ZmICsgNDE4KVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/wav/BwfChunk.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/wav/WaveChunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/WaveChunk.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nvar WaveFormat;\n(function (WaveFormat) {\n    WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\n    // MPEG-4 and AAC Audio Types\n    WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\n    WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\n    WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\n    WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\n    WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\";\n    // Dolby Audio Types\n    WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\n    WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\n    WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\n    WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\n    WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\n    WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\n    WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nclass Format {\n    constructor(header) {\n        if (header.chunkSize < 16)\n            throw new Error('Invalid chunk size');\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            wFormatTag: buf.readUInt16LE(off),\n            nChannels: buf.readUInt16LE(off + 2),\n            nSamplesPerSec: buf.readUInt32LE(off + 4),\n            nAvgBytesPerSec: buf.readUInt32LE(off + 8),\n            nBlockAlign: buf.readUInt16LE(off + 12),\n            wBitsPerSample: buf.readUInt16LE(off + 14)\n        };\n    }\n}\nexports.Format = Format;\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nclass FactChunk {\n    constructor(header) {\n        if (header.chunkSize < 4) {\n            throw new Error('Invalid fact chunk size.');\n        }\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            dwSampleLength: buf.readUInt32LE(off)\n        };\n    }\n}\nexports.FactChunk = FactChunk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdi9XYXZlQ2h1bmsuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsY0FBYyxHQUFHLGtCQUFrQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi93YXYvV2F2ZUNodW5rLmpzPzMzYzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZhY3RDaHVuayA9IGV4cG9ydHMuRm9ybWF0ID0gZXhwb3J0cy5XYXZlRm9ybWF0ID0gdm9pZCAwO1xuLyoqXG4gKiBSZWY6IGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL2RkMzE3NTk5KHY9dnMuODUpLmFzcHhcbiAqL1xudmFyIFdhdmVGb3JtYXQ7XG4oZnVuY3Rpb24gKFdhdmVGb3JtYXQpIHtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJQQ01cIl0gPSAxXSA9IFwiUENNXCI7XG4gICAgLy8gTVBFRy00IGFuZCBBQUMgQXVkaW8gVHlwZXNcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJBRFBDTVwiXSA9IDJdID0gXCJBRFBDTVwiO1xuICAgIFdhdmVGb3JtYXRbV2F2ZUZvcm1hdFtcIklFRUVfRkxPQVRcIl0gPSAzXSA9IFwiSUVFRV9GTE9BVFwiO1xuICAgIFdhdmVGb3JtYXRbV2F2ZUZvcm1hdFtcIk1QRUdfQURUU19BQUNcIl0gPSA1NjMyXSA9IFwiTVBFR19BRFRTX0FBQ1wiO1xuICAgIFdhdmVGb3JtYXRbV2F2ZUZvcm1hdFtcIk1QRUdfTE9BU1wiXSA9IDU2MzRdID0gXCJNUEVHX0xPQVNcIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJSQVdfQUFDMVwiXSA9IDI1NV0gPSBcIlJBV19BQUMxXCI7XG4gICAgLy8gRG9sYnkgQXVkaW8gVHlwZXNcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJET0xCWV9BQzNfU1BESUZcIl0gPSAxNDZdID0gXCJET0xCWV9BQzNfU1BESUZcIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJEVk1cIl0gPSA4MTkyXSA9IFwiRFZNXCI7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiUkFXX1NQT1JUXCJdID0gNTc2XSA9IFwiUkFXX1NQT1JUXCI7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiRVNTVF9BQzNcIl0gPSA1NzddID0gXCJFU1NUX0FDM1wiO1xuICAgIFdhdmVGb3JtYXRbV2F2ZUZvcm1hdFtcIkRSTVwiXSA9IDldID0gXCJEUk1cIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJEVFMyXCJdID0gODE5M10gPSBcIkRUUzJcIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJNUEVHXCJdID0gODBdID0gXCJNUEVHXCI7XG59KShXYXZlRm9ybWF0ID0gZXhwb3J0cy5XYXZlRm9ybWF0IHx8IChleHBvcnRzLldhdmVGb3JtYXQgPSB7fSkpO1xuLyoqXG4gKiBmb3JtYXQgY2h1bms7IGNodW5rLWlkIGlzIFwiZm10IFwiXG4gKiBodHRwOi8vc291bmRmaWxlLnNhcHAub3JnL2RvYy9XYXZlRm9ybWF0L1xuICovXG5jbGFzcyBGb3JtYXQge1xuICAgIGNvbnN0cnVjdG9yKGhlYWRlcikge1xuICAgICAgICBpZiAoaGVhZGVyLmNodW5rU2l6ZSA8IDE2KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNodW5rIHNpemUnKTtcbiAgICAgICAgdGhpcy5sZW4gPSBoZWFkZXIuY2h1bmtTaXplO1xuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdGb3JtYXRUYWc6IGJ1Zi5yZWFkVUludDE2TEUob2ZmKSxcbiAgICAgICAgICAgIG5DaGFubmVsczogYnVmLnJlYWRVSW50MTZMRShvZmYgKyAyKSxcbiAgICAgICAgICAgIG5TYW1wbGVzUGVyU2VjOiBidWYucmVhZFVJbnQzMkxFKG9mZiArIDQpLFxuICAgICAgICAgICAgbkF2Z0J5dGVzUGVyU2VjOiBidWYucmVhZFVJbnQzMkxFKG9mZiArIDgpLFxuICAgICAgICAgICAgbkJsb2NrQWxpZ246IGJ1Zi5yZWFkVUludDE2TEUob2ZmICsgMTIpLFxuICAgICAgICAgICAgd0JpdHNQZXJTYW1wbGU6IGJ1Zi5yZWFkVUludDE2TEUob2ZmICsgMTQpXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Gb3JtYXQgPSBGb3JtYXQ7XG4vKipcbiAqIEZhY3QgY2h1bms7IGNodW5rLWlkIGlzIFwiZmFjdFwiXG4gKiBodHRwOi8vd3d3LW1tc3AuZWNlLm1jZ2lsbC5jYS9Eb2N1bWVudHMvQXVkaW9Gb3JtYXRzL1dBVkUvV0FWRS5odG1sXG4gKiBodHRwOi8vd3d3LnJlY29yZGluZ2Jsb2dzLmNvbS93aWtpL2ZhY3QtY2h1bmstb2YtYS13YXZlLWZpbGVcbiAqL1xuY2xhc3MgRmFjdENodW5rIHtcbiAgICBjb25zdHJ1Y3RvcihoZWFkZXIpIHtcbiAgICAgICAgaWYgKGhlYWRlci5jaHVua1NpemUgPCA0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmFjdCBjaHVuayBzaXplLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuID0gaGVhZGVyLmNodW5rU2l6ZTtcbiAgICB9XG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkd1NhbXBsZUxlbmd0aDogYnVmLnJlYWRVSW50MzJMRShvZmYpXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5GYWN0Q2h1bmsgPSBGYWN0Q2h1bms7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/wav/WaveChunk.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/wav/WaveParser.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/WaveParser.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaveParser = void 0;\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"./node_modules/strtok3/lib/core.js\");\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst riff = __webpack_require__(/*! ../riff/RiffChunk */ \"./node_modules/music-metadata/lib/riff/RiffChunk.js\");\nconst WaveChunk = __webpack_require__(/*! ./../wav/WaveChunk */ \"./node_modules/music-metadata/lib/wav/WaveChunk.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"./node_modules/music-metadata/lib/common/Util.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst BwfChunk_1 = __webpack_require__(/*! ../wav/BwfChunk */ \"./node_modules/music-metadata/lib/wav/BwfChunk.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:RIFF');\n/**\n * Resource Interchange File Format (RIFF) Parser\n *\n * WAVE PCM soundfile format\n *\n * Ref:\n * - http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html\n * - http://soundfile.sapp.org/doc/WaveFormat\n *\n * ToDo: Split WAVE part from RIFF parser\n */\nclass WaveParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const riffHeader = await this.tokenizer.readToken(riff.Header);\n        debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);\n        if (riffHeader.chunkID !== 'RIFF')\n            return; // Not RIFF format\n        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {\n            if (!(err instanceof strtok3.EndOfStreamError)) {\n                throw err;\n            }\n        });\n    }\n    async parseRiffChunk(chunkSize) {\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        this.metadata.setFormat('container', type);\n        switch (type) {\n            case 'WAVE':\n                return this.readWaveChunk(chunkSize - FourCC_1.FourCcToken.len);\n            default:\n                throw new Error(`Unsupported RIFF format: RIFF/${type}`);\n        }\n    }\n    async readWaveChunk(remaining) {\n        while (remaining >= riff.Header.len) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            remaining -= riff.Header.len + header.chunkSize;\n            if (header.chunkSize > remaining) {\n                this.metadata.addWarning('Data chunk size exceeds file size');\n            }\n            this.header = header;\n            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);\n            switch (header.chunkID) {\n                case 'LIST':\n                    await this.parseListTag(header);\n                    break;\n                case 'fact': // extended Format chunk,\n                    this.metadata.setFormat('lossless', false);\n                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));\n                    break;\n                case 'fmt ': // The Util Chunk, non-PCM Formats\n                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));\n                    let subFormat = WaveChunk.WaveFormat[fmt.wFormatTag];\n                    if (!subFormat) {\n                        debug('WAVE/non-PCM format=' + fmt.wFormatTag);\n                        subFormat = 'non-PCM (' + fmt.wFormatTag + ')';\n                    }\n                    this.metadata.setFormat('codec', subFormat);\n                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);\n                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);\n                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);\n                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);\n                    this.blockAlign = fmt.nBlockAlign;\n                    break;\n                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data\n                case 'ID3 ': // The way Mp3Tags stores ID3 meta-data\n                    const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                    const rst = strtok3.fromBuffer(id3_data);\n                    await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n                    break;\n                case 'data': // PCM-data\n                    if (this.metadata.format.lossless !== false) {\n                        this.metadata.setFormat('lossless', true);\n                    }\n                    let chunkSize = header.chunkSize;\n                    if (this.tokenizer.fileInfo.size) {\n                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;\n                        if (calcRemaining < chunkSize) {\n                            this.metadata.addWarning('data chunk length exceeding file length');\n                            chunkSize = calcRemaining;\n                        }\n                    }\n                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);\n                    if (numberOfSamples) {\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);\n                    }\n                    if (this.metadata.format.codec === 'ADPCM') { // ADPCM is 4 bits lossy encoding resulting in 352kbps\n                        this.metadata.setFormat('bitrate', 352000);\n                    }\n                    else {\n                        this.metadata.setFormat('bitrate', this.blockAlign * this.metadata.format.sampleRate * 8);\n                    }\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                case 'bext': // Broadcast Audio Extension chunk\thttps://tech.ebu.ch/docs/tech/tech3285.pdf\n                    const bext = await this.tokenizer.readToken(BwfChunk_1.BroadcastAudioExtensionChunk);\n                    Object.keys(bext).forEach(key => {\n                        this.metadata.addTag('exif', 'bext.' + key, bext[key]);\n                    });\n                    const bextRemaining = header.chunkSize - BwfChunk_1.BroadcastAudioExtensionChunk.len;\n                    await this.tokenizer.ignore(bextRemaining);\n                    break;\n                case '\\x00\\x00\\x00\\x00': // padding ??\n                    debug(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                default:\n                    debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);\n                    await this.tokenizer.ignore(header.chunkSize);\n            }\n            if (this.header.chunkSize % 2 === 1) {\n                debug('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF\n                await this.tokenizer.ignore(1);\n            }\n        }\n    }\n    async parseListTag(listHeader) {\n        const listType = await this.tokenizer.readToken(new Token.StringType(4, 'binary'));\n        debug('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);\n        switch (listType) {\n            case 'INFO':\n                return this.parseRiffInfoTags(listHeader.chunkSize - 4);\n            case 'adtl':\n            default:\n                this.metadata.addWarning('Ignore chunk: RIFF/WAVE/LIST/' + listType);\n                debug('Ignoring chunkID=RIFF/WAVE/LIST/' + listType);\n                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();\n        }\n    }\n    async parseRiffInfoTags(chunkSize) {\n        while (chunkSize >= 8) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            const valueToken = new riff.ListInfoTagValue(header);\n            const value = await this.tokenizer.readToken(valueToken);\n            this.addTag(header.chunkID, util.stripNulls(value));\n            chunkSize -= (8 + valueToken.len);\n        }\n        if (chunkSize !== 0) {\n            throw Error('Illegal remaining size: ' + chunkSize);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('exif', id, value);\n    }\n}\nexports.WaveParser = WaveParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdi9XYXZlUGFyc2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyw0REFBa0I7QUFDMUMsY0FBYyxtQkFBTyxDQUFDLDREQUFhO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFPO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw4RUFBbUI7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsOEVBQW9CO0FBQzlDLHNCQUFzQixtQkFBTyxDQUFDLG9GQUFzQjtBQUNwRCxhQUFhLG1CQUFPLENBQUMsd0VBQWdCO0FBQ3JDLGlCQUFpQixtQkFBTyxDQUFDLDRFQUFrQjtBQUMzQyxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsMEVBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3QkFBd0IsbUJBQW1CLG1CQUFtQjtBQUNuRjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLEtBQUs7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsd0JBQXdCLGlDQUFpQyxlQUFlO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGdCQUFnQixLQUFLLGtCQUFrQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxnQkFBZ0IsS0FBSyxrQkFBa0I7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvd2F2L1dhdmVQYXJzZXIuanM/NjRmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2F2ZVBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IHN0cnRvazMgPSByZXF1aXJlKFwic3RydG9rMy9saWIvY29yZVwiKTtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IHJpZmYgPSByZXF1aXJlKFwiLi4vcmlmZi9SaWZmQ2h1bmtcIik7XG5jb25zdCBXYXZlQ2h1bmsgPSByZXF1aXJlKFwiLi8uLi93YXYvV2F2ZUNodW5rXCIpO1xuY29uc3QgSUQzdjJQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9pZDN2Mi9JRDN2MlBhcnNlclwiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi4vY29tbW9uL1V0aWxcIik7XG5jb25zdCBGb3VyQ0NfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRm91ckNDXCIpO1xuY29uc3QgQmFzaWNQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQmFzaWNQYXJzZXJcIik7XG5jb25zdCBCd2ZDaHVua18xID0gcmVxdWlyZShcIi4uL3dhdi9Cd2ZDaHVua1wiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpSSUZGJyk7XG4vKipcbiAqIFJlc291cmNlIEludGVyY2hhbmdlIEZpbGUgRm9ybWF0IChSSUZGKSBQYXJzZXJcbiAqXG4gKiBXQVZFIFBDTSBzb3VuZGZpbGUgZm9ybWF0XG4gKlxuICogUmVmOlxuICogLSBodHRwOi8vd3d3LmpvaG5sb29taXMub3JnL2NwZTEwMi9hc2duL2FzZ24xL3JpZmYuaHRtbFxuICogLSBodHRwOi8vc291bmRmaWxlLnNhcHAub3JnL2RvYy9XYXZlRm9ybWF0XG4gKlxuICogVG9EbzogU3BsaXQgV0FWRSBwYXJ0IGZyb20gUklGRiBwYXJzZXJcbiAqL1xuY2xhc3MgV2F2ZVBhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyXzEuQmFzaWNQYXJzZXIge1xuICAgIGFzeW5jIHBhcnNlKCkge1xuICAgICAgICBjb25zdCByaWZmSGVhZGVyID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKHJpZmYuSGVhZGVyKTtcbiAgICAgICAgZGVidWcoYHBvcz0ke3RoaXMudG9rZW5pemVyLnBvc2l0aW9ufSwgcGFyc2U6IGNodW5rSUQ9JHtyaWZmSGVhZGVyLmNodW5rSUR9YCk7XG4gICAgICAgIGlmIChyaWZmSGVhZGVyLmNodW5rSUQgIT09ICdSSUZGJylcbiAgICAgICAgICAgIHJldHVybjsgLy8gTm90IFJJRkYgZm9ybWF0XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlUmlmZkNodW5rKHJpZmZIZWFkZXIuY2h1bmtTaXplKS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2Ygc3RydG9rMy5FbmRPZlN0cmVhbUVycm9yKSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlUmlmZkNodW5rKGNodW5rU2l6ZSkge1xuICAgICAgICBjb25zdCB0eXBlID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKEZvdXJDQ18xLkZvdXJDY1Rva2VuKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvbnRhaW5lcicsIHR5cGUpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1dBVkUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRXYXZlQ2h1bmsoY2h1bmtTaXplIC0gRm91ckNDXzEuRm91ckNjVG9rZW4ubGVuKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBSSUZGIGZvcm1hdDogUklGRi8ke3R5cGV9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcmVhZFdhdmVDaHVuayhyZW1haW5pbmcpIHtcbiAgICAgICAgd2hpbGUgKHJlbWFpbmluZyA+PSByaWZmLkhlYWRlci5sZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihyaWZmLkhlYWRlcik7XG4gICAgICAgICAgICByZW1haW5pbmcgLT0gcmlmZi5IZWFkZXIubGVuICsgaGVhZGVyLmNodW5rU2l6ZTtcbiAgICAgICAgICAgIGlmIChoZWFkZXIuY2h1bmtTaXplID4gcmVtYWluaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5hZGRXYXJuaW5nKCdEYXRhIGNodW5rIHNpemUgZXhjZWVkcyBmaWxlIHNpemUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgICAgICAgICAgZGVidWcoYHBvcz0ke3RoaXMudG9rZW5pemVyLnBvc2l0aW9ufSwgcmVhZENodW5rOiBjaHVua0lEPVJJRkYvV0FWRS8ke2hlYWRlci5jaHVua0lEfWApO1xuICAgICAgICAgICAgc3dpdGNoIChoZWFkZXIuY2h1bmtJRCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0xJU1QnOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBhcnNlTGlzdFRhZyhoZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmYWN0JzogLy8gZXh0ZW5kZWQgRm9ybWF0IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbG9zc2xlc3MnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjdCA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgV2F2ZUNodW5rLkZhY3RDaHVuayhoZWFkZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZm10ICc6IC8vIFRoZSBVdGlsIENodW5rLCBub24tUENNIEZvcm1hdHNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm10ID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBXYXZlQ2h1bmsuRm9ybWF0KGhlYWRlcikpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViRm9ybWF0ID0gV2F2ZUNodW5rLldhdmVGb3JtYXRbZm10LndGb3JtYXRUYWddO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YkZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoJ1dBVkUvbm9uLVBDTSBmb3JtYXQ9JyArIGZtdC53Rm9ybWF0VGFnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkZvcm1hdCA9ICdub24tUENNICgnICsgZm10LndGb3JtYXRUYWcgKyAnKSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvZGVjJywgc3ViRm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHNQZXJTYW1wbGUnLCBmbXQud0JpdHNQZXJTYW1wbGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnc2FtcGxlUmF0ZScsIGZtdC5uU2FtcGxlc1BlclNlYyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZkNoYW5uZWxzJywgZm10Lm5DaGFubmVscyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgZm10Lm5CbG9ja0FsaWduICogZm10Lm5TYW1wbGVzUGVyU2VjICogOCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tBbGlnbiA9IGZtdC5uQmxvY2tBbGlnbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaWQzICc6IC8vIFRoZSB3YXkgUGljYXJkLCBGb29CYXIgY3VycmVudGx5IHN0b3JlcywgSUQzIG1ldGEtZGF0YVxuICAgICAgICAgICAgICAgIGNhc2UgJ0lEMyAnOiAvLyBUaGUgd2F5IE1wM1RhZ3Mgc3RvcmVzIElEMyBtZXRhLWRhdGFcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQzX2RhdGEgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IFRva2VuLlVpbnQ4QXJyYXlUeXBlKGhlYWRlci5jaHVua1NpemUpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcnN0ID0gc3RydG9rMy5mcm9tQnVmZmVyKGlkM19kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IElEM3YyUGFyc2VyXzEuSUQzdjJQYXJzZXIoKS5wYXJzZSh0aGlzLm1ldGFkYXRhLCByc3QsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGEnOiAvLyBQQ00tZGF0YVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXRhZGF0YS5mb3JtYXQubG9zc2xlc3MgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbG9zc2xlc3MnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgY2h1bmtTaXplID0gaGVhZGVyLmNodW5rU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGNSZW1haW5pbmcgPSB0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplIC0gdGhpcy50b2tlbml6ZXIucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsY1JlbWFpbmluZyA8IGNodW5rU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkV2FybmluZygnZGF0YSBjaHVuayBsZW5ndGggZXhjZWVkaW5nIGZpbGUgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtTaXplID0gY2FsY1JlbWFpbmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlNhbXBsZXMgPSB0aGlzLmZhY3QgPyB0aGlzLmZhY3QuZHdTYW1wbGVMZW5ndGggOiAoY2h1bmtTaXplID09PSAweGZmZmZmZmZmID8gdW5kZWZpbmVkIDogY2h1bmtTaXplIC8gdGhpcy5ibG9ja0FsaWduKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlck9mU2FtcGxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mU2FtcGxlcycsIG51bWJlck9mU2FtcGxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBudW1iZXJPZlNhbXBsZXMgLyB0aGlzLm1ldGFkYXRhLmZvcm1hdC5zYW1wbGVSYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXRhZGF0YS5mb3JtYXQuY29kZWMgPT09ICdBRFBDTScpIHsgLy8gQURQQ00gaXMgNCBiaXRzIGxvc3N5IGVuY29kaW5nIHJlc3VsdGluZyBpbiAzNTJrYnBzXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnYml0cmF0ZScsIDM1MjAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnYml0cmF0ZScsIHRoaXMuYmxvY2tBbGlnbiAqIHRoaXMubWV0YWRhdGEuZm9ybWF0LnNhbXBsZVJhdGUgKiA4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoaGVhZGVyLmNodW5rU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JleHQnOiAvLyBCcm9hZGNhc3QgQXVkaW8gRXh0ZW5zaW9uIGNodW5rXHRodHRwczovL3RlY2guZWJ1LmNoL2RvY3MvdGVjaC90ZWNoMzI4NS5wZGZcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmV4dCA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihCd2ZDaHVua18xLkJyb2FkY2FzdEF1ZGlvRXh0ZW5zaW9uQ2h1bmspO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhiZXh0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFRhZygnZXhpZicsICdiZXh0LicgKyBrZXksIGJleHRba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiZXh0UmVtYWluaW5nID0gaGVhZGVyLmNodW5rU2l6ZSAtIEJ3ZkNodW5rXzEuQnJvYWRjYXN0QXVkaW9FeHRlbnNpb25DaHVuay5sZW47XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShiZXh0UmVtYWluaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnXFx4MDBcXHgwMFxceDAwXFx4MDAnOiAvLyBwYWRkaW5nID8/XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKGBJZ25vcmUgcGFkZGluZyBjaHVuazogUklGRi8ke2hlYWRlci5jaHVua0lEfSBvZiAke2hlYWRlci5jaHVua1NpemV9IGJ5dGVzYCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkV2FybmluZygnSWdub3JlIGNodW5rOiBSSUZGLycgKyBoZWFkZXIuY2h1bmtJRCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShoZWFkZXIuY2h1bmtTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoYElnbm9yZSBjaHVuazogUklGRi8ke2hlYWRlci5jaHVua0lEfSBvZiAke2hlYWRlci5jaHVua1NpemV9IGJ5dGVzYCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkV2FybmluZygnSWdub3JlIGNodW5rOiBSSUZGLycgKyBoZWFkZXIuY2h1bmtJRCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShoZWFkZXIuY2h1bmtTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmhlYWRlci5jaHVua1NpemUgJSAyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoJ1JlYWQgb2RkIHBhZGRpbmcgYnl0ZScpOyAvLyBodHRwczovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHAvUklGRlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBwYXJzZUxpc3RUYWcobGlzdEhlYWRlcikge1xuICAgICAgICBjb25zdCBsaXN0VHlwZSA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgVG9rZW4uU3RyaW5nVHlwZSg0LCAnYmluYXJ5JykpO1xuICAgICAgICBkZWJ1ZygncG9zPSVzLCBwYXJzZUxpc3RUYWc6IGNodW5rSUQ9UklGRi9XQVZFL0xJU1QvJXMnLCB0aGlzLnRva2VuaXplci5wb3NpdGlvbiwgbGlzdFR5cGUpO1xuICAgICAgICBzd2l0Y2ggKGxpc3RUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdJTkZPJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVJpZmZJbmZvVGFncyhsaXN0SGVhZGVyLmNodW5rU2l6ZSAtIDQpO1xuICAgICAgICAgICAgY2FzZSAnYWR0bCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkV2FybmluZygnSWdub3JlIGNodW5rOiBSSUZGL1dBVkUvTElTVC8nICsgbGlzdFR5cGUpO1xuICAgICAgICAgICAgICAgIGRlYnVnKCdJZ25vcmluZyBjaHVua0lEPVJJRkYvV0FWRS9MSVNULycgKyBsaXN0VHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5pemVyLmlnbm9yZShsaXN0SGVhZGVyLmNodW5rU2l6ZSAtIDQpLnRoZW4oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBwYXJzZVJpZmZJbmZvVGFncyhjaHVua1NpemUpIHtcbiAgICAgICAgd2hpbGUgKGNodW5rU2l6ZSA+PSA4KSB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4ocmlmZi5IZWFkZXIpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVUb2tlbiA9IG5ldyByaWZmLkxpc3RJbmZvVGFnVmFsdWUoaGVhZGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKHZhbHVlVG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5hZGRUYWcoaGVhZGVyLmNodW5rSUQsIHV0aWwuc3RyaXBOdWxscyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2h1bmtTaXplIC09ICg4ICsgdmFsdWVUb2tlbi5sZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaHVua1NpemUgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbGxlZ2FsIHJlbWFpbmluZyBzaXplOiAnICsgY2h1bmtTaXplKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRUYWcoaWQsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuYWRkVGFnKCdleGlmJywgaWQsIHZhbHVlKTtcbiAgICB9XG59XG5leHBvcnRzLldhdmVQYXJzZXIgPSBXYXZlUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/wav/WaveParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/wavpack/WavPackParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/wavpack/WavPackParser.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WavPackParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../apev2/APEv2Parser */ \"./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst WavPackToken_1 = __webpack_require__(/*! ./WavPackToken */ \"./node_modules/music-metadata/lib/wavpack/WavPackToken.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:WavPack');\n/**\n * WavPack Parser\n */\nclass WavPackParser extends BasicParser_1.BasicParser {\n    async parse() {\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new Error('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\n        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param remainingLength\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << data.readUInt8(0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new Error('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remainingLength}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remainingLength !== 0)\n            throw new Error('metadata-sub-block should fit it remaining length');\n    }\n}\nexports.WavPackParser = WavPackParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/wavpack/WavPackParser.js\n"));

/***/ }),

/***/ "./node_modules/music-metadata/lib/wavpack/WavPackToken.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/wavpack/WavPackToken.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WavPack = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\n    48000, 64000, 88200, 96000, 192000, -1];\nclass WavPack {\n    static isBitSet(flags, bitOffset) {\n        return WavPack.getBitAllignedNumber(flags, bitOffset, 1) === 1;\n    }\n    static getBitAllignedNumber(flags, bitOffset, len) {\n        return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\n    }\n}\nexports.WavPack = WavPack;\n/**\n * WavPack Block Header\n *\n * 32-byte little-endian header at the front of every WavPack block\n *\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\n */\nWavPack.BlockHeaderToken = {\n    len: 32,\n    get: (buf, off) => {\n        const flags = Token.UINT32_LE.get(buf, off + 24);\n        const res = {\n            // should equal 'wvpk'\n            BlockID: FourCC_1.FourCcToken.get(buf, off),\n            //  0x402 to 0x410 are valid for decode\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\n            //  0x402 (1026) to 0x410 are valid for decode\n            version: Token.UINT16_LE.get(buf, off + 8),\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\n            // 40-bit block_index\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\n            // various flags for id and decoding\n            flags: {\n                bitsPerSample: (1 + WavPack.getBitAllignedNumber(flags, 0, 2)) * 8,\n                isMono: WavPack.isBitSet(flags, 2),\n                isHybrid: WavPack.isBitSet(flags, 3),\n                isJointStereo: WavPack.isBitSet(flags, 4),\n                crossChannel: WavPack.isBitSet(flags, 5),\n                hybridNoiseShaping: WavPack.isBitSet(flags, 6),\n                floatingPoint: WavPack.isBitSet(flags, 7),\n                samplingRate: SampleRates[WavPack.getBitAllignedNumber(flags, 23, 4)],\n                isDSD: WavPack.isBitSet(flags, 31)\n            },\n            // crc for actual decoded data\n            crc: new Token.Uint8ArrayType(4).get(buf, off + 28)\n        };\n        if (res.flags.isDSD) {\n            res.totalSamples *= 8;\n        }\n        return res;\n    }\n};\n/**\n * 3.0 Metadata Sub-Blocks\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\n */\nWavPack.MetadataIdToken = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            functionId: WavPack.getBitAllignedNumber(buf[off], 0, 6),\n            isOptional: WavPack.isBitSet(buf[off], 5),\n            isOddSize: WavPack.isBitSet(buf[off], 6),\n            largeBlock: WavPack.isBitSet(buf[off], 7)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdnBhY2svV2F2UGFja1Rva2VuLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsNERBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsNEVBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvd2F2cGFjay9XYXZQYWNrVG9rZW4uanM/ZTUzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2F2UGFjayA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgRm91ckNDXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0ZvdXJDQ1wiKTtcbmNvbnN0IFNhbXBsZVJhdGVzID0gWzYwMDAsIDgwMDAsIDk2MDAsIDExMDI1LCAxMjAwMCwgMTYwMDAsIDIyMDUwLCAyNDAwMCwgMzIwMDAsIDQ0MTAwLFxuICAgIDQ4MDAwLCA2NDAwMCwgODgyMDAsIDk2MDAwLCAxOTIwMDAsIC0xXTtcbmNsYXNzIFdhdlBhY2sge1xuICAgIHN0YXRpYyBpc0JpdFNldChmbGFncywgYml0T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBXYXZQYWNrLmdldEJpdEFsbGlnbmVkTnVtYmVyKGZsYWdzLCBiaXRPZmZzZXQsIDEpID09PSAxO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Qml0QWxsaWduZWROdW1iZXIoZmxhZ3MsIGJpdE9mZnNldCwgbGVuKSB7XG4gICAgICAgIHJldHVybiAoZmxhZ3MgPj4+IGJpdE9mZnNldCkgJiAoMHhmZmZmZmZmZiA+Pj4gKDMyIC0gbGVuKSk7XG4gICAgfVxufVxuZXhwb3J0cy5XYXZQYWNrID0gV2F2UGFjaztcbi8qKlxuICogV2F2UGFjayBCbG9jayBIZWFkZXJcbiAqXG4gKiAzMi1ieXRlIGxpdHRsZS1lbmRpYW4gaGVhZGVyIGF0IHRoZSBmcm9udCBvZiBldmVyeSBXYXZQYWNrIGJsb2NrXG4gKlxuICogUmVmOiBodHRwOi8vd3d3LndhdnBhY2suY29tL1dhdlBhY2s1RmlsZUZvcm1hdC5wZGYgKHBhZ2UgMi82OiAyLjAgXCJCbG9jayBIZWFkZXJcIilcbiAqL1xuV2F2UGFjay5CbG9ja0hlYWRlclRva2VuID0ge1xuICAgIGxlbjogMzIsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgY29uc3QgZmxhZ3MgPSBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjQpO1xuICAgICAgICBjb25zdCByZXMgPSB7XG4gICAgICAgICAgICAvLyBzaG91bGQgZXF1YWwgJ3d2cGsnXG4gICAgICAgICAgICBCbG9ja0lEOiBGb3VyQ0NfMS5Gb3VyQ2NUb2tlbi5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgLy8gIDB4NDAyIHRvIDB4NDEwIGFyZSB2YWxpZCBmb3IgZGVjb2RlXG4gICAgICAgICAgICBibG9ja1NpemU6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIC8vICAweDQwMiAoMTAyNikgdG8gMHg0MTAgYXJlIHZhbGlkIGZvciBkZWNvZGVcbiAgICAgICAgICAgIHZlcnNpb246IFRva2VuLlVJTlQxNl9MRS5nZXQoYnVmLCBvZmYgKyA4KSxcbiAgICAgICAgICAgIC8vICA0MC1iaXQgdG90YWwgc2FtcGxlcyBmb3IgZW50aXJlIGZpbGUgKGlmIGJsb2NrX2luZGV4ID09IDAgYW5kIGEgdmFsdWUgb2YgLTEgaW5kaWNhdGVzIGFuIHVua25vd24gbGVuZ3RoKVxuICAgICAgICAgICAgdG90YWxTYW1wbGVzOiAvKiByZXBsYWNlIHdpdGggYmlnaW50PyAoVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgMTEpIDw8IDMyKSArICovIFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAxMiksXG4gICAgICAgICAgICAvLyA0MC1iaXQgYmxvY2tfaW5kZXhcbiAgICAgICAgICAgIGJsb2NrSW5kZXg6IC8qIHJlcGxhY2Ugd2l0aCBiaWdpbnQ/IChUb2tlbi5VSU5UOC5nZXQoYnVmLCBvZmYgKyAxMCkgPDwgMzIpICsgKi8gVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDE2KSxcbiAgICAgICAgICAgIC8vIDQwLWJpdCB0b3RhbCBzYW1wbGVzIGZvciBlbnRpcmUgZmlsZSAoaWYgYmxvY2tfaW5kZXggPT0gMCBhbmQgYSB2YWx1ZSBvZiAtMSBpbmRpY2F0ZXMgYW4gdW5rbm93biBsZW5ndGgpXG4gICAgICAgICAgICBibG9ja1NhbXBsZXM6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAyMCksXG4gICAgICAgICAgICAvLyB2YXJpb3VzIGZsYWdzIGZvciBpZCBhbmQgZGVjb2RpbmdcbiAgICAgICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgICAgICAgYml0c1BlclNhbXBsZTogKDEgKyBXYXZQYWNrLmdldEJpdEFsbGlnbmVkTnVtYmVyKGZsYWdzLCAwLCAyKSkgKiA4LFxuICAgICAgICAgICAgICAgIGlzTW9ubzogV2F2UGFjay5pc0JpdFNldChmbGFncywgMiksXG4gICAgICAgICAgICAgICAgaXNIeWJyaWQ6IFdhdlBhY2suaXNCaXRTZXQoZmxhZ3MsIDMpLFxuICAgICAgICAgICAgICAgIGlzSm9pbnRTdGVyZW86IFdhdlBhY2suaXNCaXRTZXQoZmxhZ3MsIDQpLFxuICAgICAgICAgICAgICAgIGNyb3NzQ2hhbm5lbDogV2F2UGFjay5pc0JpdFNldChmbGFncywgNSksXG4gICAgICAgICAgICAgICAgaHlicmlkTm9pc2VTaGFwaW5nOiBXYXZQYWNrLmlzQml0U2V0KGZsYWdzLCA2KSxcbiAgICAgICAgICAgICAgICBmbG9hdGluZ1BvaW50OiBXYXZQYWNrLmlzQml0U2V0KGZsYWdzLCA3KSxcbiAgICAgICAgICAgICAgICBzYW1wbGluZ1JhdGU6IFNhbXBsZVJhdGVzW1dhdlBhY2suZ2V0Qml0QWxsaWduZWROdW1iZXIoZmxhZ3MsIDIzLCA0KV0sXG4gICAgICAgICAgICAgICAgaXNEU0Q6IFdhdlBhY2suaXNCaXRTZXQoZmxhZ3MsIDMxKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGNyYyBmb3IgYWN0dWFsIGRlY29kZWQgZGF0YVxuICAgICAgICAgICAgY3JjOiBuZXcgVG9rZW4uVWludDhBcnJheVR5cGUoNCkuZ2V0KGJ1Ziwgb2ZmICsgMjgpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXMuZmxhZ3MuaXNEU0QpIHtcbiAgICAgICAgICAgIHJlcy50b3RhbFNhbXBsZXMgKj0gODtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG4vKipcbiAqIDMuMCBNZXRhZGF0YSBTdWItQmxvY2tzXG4gKiBSZWY6IGh0dHA6Ly93d3cud2F2cGFjay5jb20vV2F2UGFjazVGaWxlRm9ybWF0LnBkZiAocGFnZSA0LzY6IDMuMCBcIk1ldGFkYXRhIFN1Yi1CbG9ja1wiKVxuICovXG5XYXZQYWNrLk1ldGFkYXRhSWRUb2tlbiA9IHtcbiAgICBsZW46IDEsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uSWQ6IFdhdlBhY2suZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmW29mZl0sIDAsIDYpLFxuICAgICAgICAgICAgaXNPcHRpb25hbDogV2F2UGFjay5pc0JpdFNldChidWZbb2ZmXSwgNSksXG4gICAgICAgICAgICBpc09kZFNpemU6IFdhdlBhY2suaXNCaXRTZXQoYnVmW29mZl0sIDYpLFxuICAgICAgICAgICAgbGFyZ2VCbG9jazogV2F2UGFjay5pc0JpdFNldChidWZbb2ZmXSwgNylcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/music-metadata/lib/wavpack/WavPackToken.js\n"));

/***/ }),

/***/ "./node_modules/peek-readable/lib/Deferred.js":
/*!****************************************************!*\
  !*** ./node_modules/peek-readable/lib/Deferred.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Deferred = void 0;\r\nclass Deferred {\r\n    constructor() {\r\n        this.resolve = () => null;\r\n        this.reject = () => null;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.reject = reject;\r\n            this.resolve = resolve;\r\n        });\r\n    }\r\n}\r\nexports.Deferred = Deferred;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVlay1yZWFkYWJsZS9saWIvRGVmZXJyZWQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3BlZWstcmVhZGFibGUvbGliL0RlZmVycmVkLmpzP2FiYWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5EZWZlcnJlZCA9IHZvaWQgMDtcclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4gbnVsbDtcclxuICAgICAgICB0aGlzLnJlamVjdCA9ICgpID0+IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRlZmVycmVkID0gRGVmZXJyZWQ7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/peek-readable/lib/Deferred.js\n"));

/***/ }),

/***/ "./node_modules/peek-readable/lib/EndOfFileStream.js":
/*!***********************************************************!*\
  !*** ./node_modules/peek-readable/lib/EndOfFileStream.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EndOfStreamError = exports.defaultMessages = void 0;\r\nexports.defaultMessages = 'End-Of-Stream';\r\n/**\r\n * Thrown on read operation of the end of file or stream has been reached\r\n */\r\nclass EndOfStreamError extends Error {\r\n    constructor() {\r\n        super(exports.defaultMessages);\r\n    }\r\n}\r\nexports.EndOfStreamError = EndOfStreamError;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVlay1yZWFkYWJsZS9saWIvRW5kT2ZGaWxlU3RyZWFtLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLHVCQUF1QjtBQUNsRCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcGVlay1yZWFkYWJsZS9saWIvRW5kT2ZGaWxlU3RyZWFtLmpzP2Y3N2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5FbmRPZlN0cmVhbUVycm9yID0gZXhwb3J0cy5kZWZhdWx0TWVzc2FnZXMgPSB2b2lkIDA7XHJcbmV4cG9ydHMuZGVmYXVsdE1lc3NhZ2VzID0gJ0VuZC1PZi1TdHJlYW0nO1xyXG4vKipcclxuICogVGhyb3duIG9uIHJlYWQgb3BlcmF0aW9uIG9mIHRoZSBlbmQgb2YgZmlsZSBvciBzdHJlYW0gaGFzIGJlZW4gcmVhY2hlZFxyXG4gKi9cclxuY2xhc3MgRW5kT2ZTdHJlYW1FcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKGV4cG9ydHMuZGVmYXVsdE1lc3NhZ2VzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkVuZE9mU3RyZWFtRXJyb3IgPSBFbmRPZlN0cmVhbUVycm9yO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/peek-readable/lib/EndOfFileStream.js\n"));

/***/ }),

/***/ "./node_modules/peek-readable/lib/StreamReader.js":
/*!********************************************************!*\
  !*** ./node_modules/peek-readable/lib/StreamReader.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamReader = exports.EndOfStreamError = void 0;\r\nconst EndOfFileStream_1 = __webpack_require__(/*! ./EndOfFileStream */ \"./node_modules/peek-readable/lib/EndOfFileStream.js\");\r\nconst Deferred_1 = __webpack_require__(/*! ./Deferred */ \"./node_modules/peek-readable/lib/Deferred.js\");\r\nvar EndOfFileStream_2 = __webpack_require__(/*! ./EndOfFileStream */ \"./node_modules/peek-readable/lib/EndOfFileStream.js\");\r\nObject.defineProperty(exports, \"EndOfStreamError\", ({ enumerable: true, get: function () { return EndOfFileStream_2.EndOfStreamError; } }));\r\nconst maxStreamReadSize = 1 * 1024 * 1024; // Maximum request length on read-stream operation\r\nclass StreamReader {\r\n    constructor(s) {\r\n        this.s = s;\r\n        /**\r\n         * Deferred used for postponed read request (as not data is yet available to read)\r\n         */\r\n        this.deferred = null;\r\n        this.endOfStream = false;\r\n        /**\r\n         * Store peeked data\r\n         * @type {Array}\r\n         */\r\n        this.peekQueue = [];\r\n        if (!s.read || !s.once) {\r\n            throw new Error('Expected an instance of stream.Readable');\r\n        }\r\n        this.s.once('end', () => this.reject(new EndOfFileStream_1.EndOfStreamError()));\r\n        this.s.once('error', err => this.reject(err));\r\n        this.s.once('close', () => this.reject(new Error('Stream closed')));\r\n    }\r\n    /**\r\n     * Read ahead (peek) from stream. Subsequent read or peeks will return the same data\r\n     * @param uint8Array - Uint8Array (or Buffer) to store data read from stream in\r\n     * @param offset - Offset target\r\n     * @param length - Number of bytes to read\r\n     * @returns Number of bytes peeked\r\n     */\r\n    async peek(uint8Array, offset, length) {\r\n        const bytesRead = await this.read(uint8Array, offset, length);\r\n        this.peekQueue.push(uint8Array.subarray(offset, offset + bytesRead)); // Put read data back to peek buffer\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Read chunk from stream\r\n     * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in\r\n     * @param offset - Offset target\r\n     * @param length - Number of bytes to read\r\n     * @returns Number of bytes read\r\n     */\r\n    async read(buffer, offset, length) {\r\n        if (length === 0) {\r\n            return 0;\r\n        }\r\n        if (this.peekQueue.length === 0 && this.endOfStream) {\r\n            throw new EndOfFileStream_1.EndOfStreamError();\r\n        }\r\n        let remaining = length;\r\n        let bytesRead = 0;\r\n        // consume peeked data first\r\n        while (this.peekQueue.length > 0 && remaining > 0) {\r\n            const peekData = this.peekQueue.pop(); // Front of queue\r\n            if (!peekData)\r\n                throw new Error('peekData should be defined');\r\n            const lenCopy = Math.min(peekData.length, remaining);\r\n            buffer.set(peekData.subarray(0, lenCopy), offset + bytesRead);\r\n            bytesRead += lenCopy;\r\n            remaining -= lenCopy;\r\n            if (lenCopy < peekData.length) {\r\n                // remainder back to queue\r\n                this.peekQueue.push(peekData.subarray(lenCopy));\r\n            }\r\n        }\r\n        // continue reading from stream if required\r\n        while (remaining > 0 && !this.endOfStream) {\r\n            const reqLen = Math.min(remaining, maxStreamReadSize);\r\n            const chunkLen = await this.readFromStream(buffer, offset + bytesRead, reqLen);\r\n            bytesRead += chunkLen;\r\n            if (chunkLen < reqLen)\r\n                break;\r\n            remaining -= chunkLen;\r\n        }\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Read chunk from stream\r\n     * @param buffer Target Uint8Array (or Buffer) to store data read from stream in\r\n     * @param offset Offset target\r\n     * @param length Number of bytes to read\r\n     * @returns Number of bytes read\r\n     */\r\n    async readFromStream(buffer, offset, length) {\r\n        const readBuffer = this.s.read(length);\r\n        if (readBuffer) {\r\n            buffer.set(readBuffer, offset);\r\n            return readBuffer.length;\r\n        }\r\n        else {\r\n            const request = {\r\n                buffer,\r\n                offset,\r\n                length,\r\n                deferred: new Deferred_1.Deferred()\r\n            };\r\n            this.deferred = request.deferred;\r\n            this.s.once('readable', () => {\r\n                this.readDeferred(request);\r\n            });\r\n            return request.deferred.promise;\r\n        }\r\n    }\r\n    /**\r\n     * Process deferred read request\r\n     * @param request Deferred read request\r\n     */\r\n    readDeferred(request) {\r\n        const readBuffer = this.s.read(request.length);\r\n        if (readBuffer) {\r\n            request.buffer.set(readBuffer, request.offset);\r\n            request.deferred.resolve(readBuffer.length);\r\n            this.deferred = null;\r\n        }\r\n        else {\r\n            this.s.once('readable', () => {\r\n                this.readDeferred(request);\r\n            });\r\n        }\r\n    }\r\n    reject(err) {\r\n        this.endOfStream = true;\r\n        if (this.deferred) {\r\n            this.deferred.reject(err);\r\n            this.deferred = null;\r\n        }\r\n    }\r\n}\r\nexports.StreamReader = StreamReader;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/peek-readable/lib/StreamReader.js\n"));

/***/ }),

/***/ "./node_modules/peek-readable/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/peek-readable/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamReader = exports.EndOfStreamError = void 0;\r\nvar EndOfFileStream_1 = __webpack_require__(/*! ./EndOfFileStream */ \"./node_modules/peek-readable/lib/EndOfFileStream.js\");\r\nObject.defineProperty(exports, \"EndOfStreamError\", ({ enumerable: true, get: function () { return EndOfFileStream_1.EndOfStreamError; } }));\r\nvar StreamReader_1 = __webpack_require__(/*! ./StreamReader */ \"./node_modules/peek-readable/lib/StreamReader.js\");\r\nObject.defineProperty(exports, \"StreamReader\", ({ enumerable: true, get: function () { return StreamReader_1.StreamReader; } }));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVlay1yZWFkYWJsZS9saWIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsd0JBQXdCO0FBQy9DLHdCQUF3QixtQkFBTyxDQUFDLDhFQUFtQjtBQUNuRCxvREFBbUQsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDekkscUJBQXFCLG1CQUFPLENBQUMsd0VBQWdCO0FBQzdDLGdEQUErQyxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcGVlay1yZWFkYWJsZS9saWIvaW5kZXguanM/ODVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlN0cmVhbVJlYWRlciA9IGV4cG9ydHMuRW5kT2ZTdHJlYW1FcnJvciA9IHZvaWQgMDtcclxudmFyIEVuZE9mRmlsZVN0cmVhbV8xID0gcmVxdWlyZShcIi4vRW5kT2ZGaWxlU3RyZWFtXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbmRPZlN0cmVhbUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBFbmRPZkZpbGVTdHJlYW1fMS5FbmRPZlN0cmVhbUVycm9yOyB9IH0pO1xyXG52YXIgU3RyZWFtUmVhZGVyXzEgPSByZXF1aXJlKFwiLi9TdHJlYW1SZWFkZXJcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmVhbVJlYWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3RyZWFtUmVhZGVyXzEuU3RyZWFtUmVhZGVyOyB9IH0pO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/peek-readable/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/errors-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/errors-browser.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2Vycm9ycy1icm93c2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdEQUFnRCwwREFBMEQsMkNBQTJDOztBQUVySjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9lcnJvcnMtYnJvd3Nlci5qcz9hNmE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBjb2RlcyA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICBpZiAoIUJhc2UpIHtcbiAgICBCYXNlID0gRXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5vZGVFcnJvciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9CYXNlKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoTm9kZUVycm9yLCBfQmFzZSk7XG5cbiAgICBmdW5jdGlvbiBOb2RlRXJyb3IoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgcmV0dXJuIF9CYXNlLmNhbGwodGhpcywgZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSkgfHwgdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gTm9kZUVycm9yO1xuICB9KEJhc2UpO1xuXG4gIE5vZGVFcnJvci5wcm90b3R5cGUubmFtZSA9IEJhc2UubmFtZTtcbiAgTm9kZUVycm9yLnByb3RvdHlwZS5jb2RlID0gY29kZTtcbiAgY29kZXNbY29kZV0gPSBOb2RlRXJyb3I7XG59IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMC44LjAvbGliL2ludGVybmFsL2Vycm9ycy5qc1xuXG5cbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICB2YXIgbGVuID0gZXhwZWN0ZWQubGVuZ3RoO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGkpO1xuICAgIH0pO1xuXG4gICAgaWYgKGxlbiA+IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWQuc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKSwgXCIsIG9yIFwiKSArIGV4cGVjdGVkW2xlbiAtIDFdO1xuICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdLCBcIiBvciBcIikuY29uY2F0KGV4cGVjdGVkWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KFN0cmluZyhleHBlY3RlZCkpO1xuICB9XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdGFydHNXaXRoXG5cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCwgcG9zKSB7XG4gIHJldHVybiBzdHIuc3Vic3RyKCFwb3MgfHwgcG9zIDwgMCA/IDAgOiArcG9zLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcblxuXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaCwgdGhpc19sZW4pIHtcbiAgaWYgKHRoaXNfbGVuID09PSB1bmRlZmluZWQgfHwgdGhpc19sZW4gPiBzdHIubGVuZ3RoKSB7XG4gICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luY2x1ZGVzXG5cblxuZnVuY3Rpb24gaW5jbHVkZXMoc3RyLCBzZWFyY2gsIHN0YXJ0KSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgc3RhcnQgPSAwO1xuICB9XG5cbiAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgfVxufVxuXG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX09QVF9WQUxVRScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gJ1RoZSB2YWx1ZSBcIicgKyB2YWx1ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCInICsgbmFtZSArICdcIic7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGZ1bmN0aW9uIChuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gIC8vIGRldGVybWluZXI6ICdtdXN0IGJlJyBvciAnbXVzdCBub3QgYmUnXG4gIHZhciBkZXRlcm1pbmVyO1xuXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnICYmIHN0YXJ0c1dpdGgoZXhwZWN0ZWQsICdub3QgJykpIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3Qgbm90IGJlJztcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgJycpO1xuICB9IGVsc2Uge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XG4gIH1cblxuICB2YXIgbXNnO1xuXG4gIGlmIChlbmRzV2l0aChuYW1lLCAnIGFyZ3VtZW50JykpIHtcbiAgICAvLyBGb3IgY2FzZXMgbGlrZSAnZmlyc3QgYXJndW1lbnQnXG4gICAgbXNnID0gXCJUaGUgXCIuY29uY2F0KG5hbWUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHR5cGUgPSBpbmNsdWRlcyhuYW1lLCAnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG4gICAgbXNnID0gXCJUaGUgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgXCIpLmNvbmNhdCh0eXBlLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9XG5cbiAgbXNnICs9IFwiLiBSZWNlaXZlZCB0eXBlIFwiLmNvbmNhdCh0eXBlb2YgYWN0dWFsKTtcbiAgcmV0dXJuIG1zZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YnLCAnc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQnLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gJ1RoZSAnICsgbmFtZSArICcgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCc7XG59KTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnLCAnUHJlbWF0dXJlIGNsb3NlJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fREVTVFJPWUVEJywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICdDYW5ub3QgY2FsbCAnICsgbmFtZSArICcgYWZ0ZXIgYSBzdHJlYW0gd2FzIGRlc3Ryb3llZCc7XG59KTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01VTFRJUExFX0NBTExCQUNLJywgJ0NhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0NBTk5PVF9QSVBFJywgJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQnLCAnd3JpdGUgYWZ0ZXIgZW5kJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fTlVMTF9WQUxVRVMnLCAnTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nLCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfVU5LTk9XTl9FTkNPRElORycsIGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuICdVbmtub3duIGVuY29kaW5nOiAnICsgYXJnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCcsICdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xubW9kdWxlLmV4cG9ydHMuY29kZXMgPSBjb2RlcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/errors-browser.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\n\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7QUFDYjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyxrRkFBb0I7O0FBRTNDLGVBQWUsbUJBQU8sQ0FBQyxrRkFBb0I7O0FBRTNDLG1CQUFPLENBQUMsNkRBQVU7O0FBRWxCO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsR0FBRzs7QUFFSjtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDOztBQUVBLEVBQUUsT0FBTztBQUNUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcz81MDYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cbid1c2Ugc3RyaWN0Jztcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcblxudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gQWxsb3cgdGhlIGtleXMgYXJyYXkgdG8gYmUgR0MnZWQuXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuXG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xuICAgIH1cbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVMZW5ndGgnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aDtcbiAgfVxufSk7IC8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcblxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIElmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLCB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuOyAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuXG4gIHByb2Nlc3MubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG5cblxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_duplex.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYjs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBcUI7O0FBRTdDLG1CQUFPLENBQUMsNkRBQVU7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzPzgwMjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_passthrough.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = (__webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter);\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n\nvar Buffer = (__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer);\n\nvar OurUint8Array = __webpack_require__.g.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = __webpack_require__(/*! util */ \"?8c28\");\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/buffer_list */ \"./node_modules/readable-stream/lib/internal/streams/buffer_list.js\");\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nvar _require = __webpack_require__(/*! ./internal/streams/state */ \"./node_modules/readable-stream/lib/internal/streams/state.js\"),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = (__webpack_require__(/*! ../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes),\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder);\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder);\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = __webpack_require__(/*! ./internal/streams/async_iterator */ \"./node_modules/readable-stream/lib/internal/streams/async_iterator.js\");\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = __webpack_require__(/*! ./internal/streams/from */ \"./node_modules/readable-stream/lib/internal/streams/from-browser.js\");\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_readable.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\nmodule.exports = Transform;\n\nvar _require$codes = (__webpack_require__(/*! ../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes),\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_transform.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n\nvar Buffer = (__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer);\n\nvar OurUint8Array = __webpack_require__.g.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nvar _require = __webpack_require__(/*! ./internal/streams/state */ \"./node_modules/readable-stream/lib/internal/streams/state.js\"),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = (__webpack_require__(/*! ../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes),\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\"); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_writable.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/async_iterator.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/async_iterator.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = __webpack_require__(/*! ./end-of-stream */ \"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTs7QUFFYjs7QUFFQSw0Q0FBNEMsa0JBQWtCLGtDQUFrQyxvRUFBb0UsS0FBSyxPQUFPLG9CQUFvQjs7QUFFcE0sZUFBZSxtQkFBTyxDQUFDLDZGQUFpQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsT0FBTztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBOztBQUVBLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3IuanM/MjI4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfT2JqZWN0JHNldFByb3RvdHlwZU87XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBmaW5pc2hlZCA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpO1xuXG52YXIga0xhc3RSZXNvbHZlID0gU3ltYm9sKCdsYXN0UmVzb2x2ZScpO1xudmFyIGtMYXN0UmVqZWN0ID0gU3ltYm9sKCdsYXN0UmVqZWN0Jyk7XG52YXIga0Vycm9yID0gU3ltYm9sKCdlcnJvcicpO1xudmFyIGtFbmRlZCA9IFN5bWJvbCgnZW5kZWQnKTtcbnZhciBrTGFzdFByb21pc2UgPSBTeW1ib2woJ2xhc3RQcm9taXNlJyk7XG52YXIga0hhbmRsZVByb21pc2UgPSBTeW1ib2woJ2hhbmRsZVByb21pc2UnKTtcbnZhciBrU3RyZWFtID0gU3ltYm9sKCdzdHJlYW0nKTtcblxuZnVuY3Rpb24gY3JlYXRlSXRlclJlc3VsdCh2YWx1ZSwgZG9uZSkge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBkb25lOiBkb25lXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmRSZXNvbHZlKGl0ZXIpIHtcbiAgdmFyIHJlc29sdmUgPSBpdGVyW2tMYXN0UmVzb2x2ZV07XG5cbiAgaWYgKHJlc29sdmUgIT09IG51bGwpIHtcbiAgICB2YXIgZGF0YSA9IGl0ZXJba1N0cmVhbV0ucmVhZCgpOyAvLyB3ZSBkZWZlciBpZiBkYXRhIGlzIG51bGxcbiAgICAvLyB3ZSBjYW4gYmUgZXhwZWN0aW5nIGVpdGhlciAnZW5kJyBvclxuICAgIC8vICdlcnJvcidcblxuICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICBpdGVyW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgIGl0ZXJba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlYWRhYmxlKGl0ZXIpIHtcbiAgLy8gd2Ugd2FpdCBmb3IgdGhlIG5leHQgdGljaywgYmVjYXVzZSBpdCBtaWdodFxuICAvLyBlbWl0IGFuIGVycm9yIHdpdGggcHJvY2Vzcy5uZXh0VGlja1xuICBwcm9jZXNzLm5leHRUaWNrKHJlYWRBbmRSZXNvbHZlLCBpdGVyKTtcbn1cblxuZnVuY3Rpb24gd3JhcEZvck5leHQobGFzdFByb21pc2UsIGl0ZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsYXN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVyW2tFbmRlZF0pIHtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGl0ZXJba0hhbmRsZVByb21pc2VdKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSwgcmVqZWN0KTtcbiAgfTtcbn1cblxudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZnVuY3Rpb24gKCkge30pO1xudmFyIFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZigoX09iamVjdCRzZXRQcm90b3R5cGVPID0ge1xuICBnZXQgc3RyZWFtKCkge1xuICAgIHJldHVybiB0aGlzW2tTdHJlYW1dO1xuICB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIGlmIHdlIGhhdmUgZGV0ZWN0ZWQgYW4gZXJyb3IgaW4gdGhlIG1lYW53aGlsZVxuICAgIC8vIHJlamVjdCBzdHJhaWdodCBhd2F5XG4gICAgdmFyIGVycm9yID0gdGhpc1trRXJyb3JdO1xuXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzW2tFbmRlZF0pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1trU3RyZWFtXS5kZXN0cm95ZWQpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZGVmZXIgdmlhIG5leHRUaWNrIGJlY2F1c2UgaWYgLmRlc3Ryb3koZXJyKSBpc1xuICAgICAgLy8gY2FsbGVkLCB0aGUgZXJyb3Igd2lsbCBiZSBlbWl0dGVkIHZpYSBuZXh0VGljaywgYW5kXG4gICAgICAvLyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgdGhlcmUgaXMgbm8gZXJyb3IgbGluZ2VyaW5nIGFyb3VuZFxuICAgICAgLy8gd2FpdGluZyB0byBiZSBlbWl0dGVkLlxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzW2tFcnJvcl0pIHtcbiAgICAgICAgICAgIHJlamVjdChfdGhpc1trRXJyb3JdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IC8vIGlmIHdlIGhhdmUgbXVsdGlwbGUgbmV4dCgpIGNhbGxzXG4gICAgLy8gd2Ugd2lsbCB3YWl0IGZvciB0aGUgcHJldmlvdXMgUHJvbWlzZSB0byBmaW5pc2hcbiAgICAvLyB0aGlzIGxvZ2ljIGlzIG9wdGltaXplZCB0byBzdXBwb3J0IGZvciBhd2FpdCBsb29wcyxcbiAgICAvLyB3aGVyZSBuZXh0KCkgaXMgb25seSBjYWxsZWQgb25jZSBhdCBhIHRpbWVcblxuXG4gICAgdmFyIGxhc3RQcm9taXNlID0gdGhpc1trTGFzdFByb21pc2VdO1xuICAgIHZhciBwcm9taXNlO1xuXG4gICAgaWYgKGxhc3RQcm9taXNlKSB7XG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2Uod3JhcEZvck5leHQobGFzdFByb21pc2UsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmFzdCBwYXRoIG5lZWRlZCB0byBzdXBwb3J0IG11bHRpcGxlIHRoaXMucHVzaCgpXG4gICAgICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgdGhlIG5leHQoKSBxdWV1ZVxuICAgICAgdmFyIGRhdGEgPSB0aGlzW2tTdHJlYW1dLnJlYWQoKTtcblxuICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh0aGlzW2tIYW5kbGVQcm9taXNlXSk7XG4gICAgfVxuXG4gICAgdGhpc1trTGFzdFByb21pc2VdID0gcHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgU3ltYm9sLmFzeW5jSXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgXCJyZXR1cm5cIiwgZnVuY3Rpb24gX3JldHVybigpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgLy8gZGVzdHJveShlcnIsIGNiKSBpcyBhIHByaXZhdGUgQVBJXG4gIC8vIHdlIGNhbiBndWFyYW50ZWUgd2UgaGF2ZSB0aGF0IGhlcmUsIGJlY2F1c2Ugd2UgY29udHJvbCB0aGVcbiAgLy8gUmVhZGFibGUgY2xhc3MgdGhpcyBpcyBhdHRhY2hlZCB0b1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIF90aGlzMltrU3RyZWFtXS5kZXN0cm95KG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH0pO1xuICB9KTtcbn0pLCBfT2JqZWN0JHNldFByb3RvdHlwZU8pLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTtcblxudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcihzdHJlYW0pIHtcbiAgdmFyIF9PYmplY3QkY3JlYXRlO1xuXG4gIHZhciBpdGVyYXRvciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlLCAoX09iamVjdCRjcmVhdGUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrU3RyZWFtLCB7XG4gICAgdmFsdWU6IHN0cmVhbSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlc29sdmUsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlamVjdCwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFcnJvciwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFbmRlZCwge1xuICAgIHZhbHVlOiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrSGFuZGxlUHJvbWlzZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBkYXRhID0gaXRlcmF0b3Jba1N0cmVhbV0ucmVhZCgpO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IHJlc29sdmU7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IHJlamVjdDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfT2JqZWN0JGNyZWF0ZSkpO1xuICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgZmluaXNoZWQoc3RyZWFtLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJykge1xuICAgICAgdmFyIHJlamVjdCA9IGl0ZXJhdG9yW2tMYXN0UmVqZWN0XTsgLy8gcmVqZWN0IGlmIHdlIGFyZSB3YWl0aW5nIGZvciBkYXRhIGluIHRoZSBQcm9taXNlXG4gICAgICAvLyByZXR1cm5lZCBieSBuZXh0KCkgYW5kIHN0b3JlIHRoZSBlcnJvclxuXG4gICAgICBpZiAocmVqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG5cbiAgICAgIGl0ZXJhdG9yW2tFcnJvcl0gPSBlcnI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmUgPSBpdGVyYXRvcltrTGFzdFJlc29sdmVdO1xuXG4gICAgaWYgKHJlc29sdmUgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGl0ZXJhdG9yW2tFbmRlZF0gPSB0cnVlO1xuICB9KTtcbiAgc3RyZWFtLm9uKCdyZWFkYWJsZScsIG9uUmVhZGFibGUuYmluZChudWxsLCBpdGVyYXRvcikpO1xuICByZXR1cm4gaXRlcmF0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/async_iterator.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!**************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\"),\n    Buffer = _require.Buffer;\n\nvar _require2 = __webpack_require__(/*! util */ \"?c852\"),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/buffer_list.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhLENBQUM7O0FBRWQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLFFBQVEsT0FBTztBQUNmLFFBQVE7QUFDUjtBQUNBLFFBQVEsT0FBTztBQUNmO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7OztBQUdBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxPQUFPO0FBQ2YsUUFBUTtBQUNSO0FBQ0EsUUFBUSxPQUFPO0FBQ2YsUUFBUTtBQUNSLFFBQVEsT0FBTztBQUNmO0FBQ0EsTUFBTTtBQUNOLE1BQU0sT0FBTztBQUNiO0FBQ0EsTUFBTTtBQUNOLE1BQU0sT0FBTztBQUNiO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0Y7QUFDeEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanM/Yzg5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7IC8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcblxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9IC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcblxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yQW5kQ2xvc2VOVChzZWxmLCBlcnIpIHtcbiAgZW1pdEVycm9yTlQoc2VsZiwgZXJyKTtcbiAgZW1pdENsb3NlTlQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIGVtaXRDbG9zZU5UKHNlbGYpIHtcbiAgaWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUgJiYgIXNlbGYuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gIGlmIChzZWxmLl9yZWFkYWJsZVN0YXRlICYmICFzZWxmLl9yZWFkYWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxuZnVuY3Rpb24gZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcnIpIHtcbiAgLy8gV2UgaGF2ZSB0ZXN0cyB0aGF0IHJlbHkgb24gZXJyb3JzIGJlaW5nIGVtaXR0ZWRcbiAgLy8gaW4gdGhlIHNhbWUgdGljaywgc28gY2hhbmdpbmcgdGhpcyBpcyBzZW12ZXIgbWFqb3IuXG4gIC8vIEZvciBub3cgd2hlbiB5b3Ugb3B0LWluIHRvIGF1dG9EZXN0cm95IHdlIGFsbG93XG4gIC8vIHRoZSBlcnJvciB0byBiZSBlbWl0dGVkIG5leHRUaWNrLiBJbiBhIGZ1dHVyZVxuICAvLyBzZW12ZXIgbWFqb3IgdXBkYXRlIHdlIHNob3VsZCBjaGFuZ2UgdGhlIGRlZmF1bHQgdG8gdGhpcy5cbiAgdmFyIHJTdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHdTdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgaWYgKHJTdGF0ZSAmJiByU3RhdGUuYXV0b0Rlc3Ryb3kgfHwgd1N0YXRlICYmIHdTdGF0ZS5hdXRvRGVzdHJveSkgc3RyZWFtLmRlc3Ryb3koZXJyKTtlbHNlIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveSxcbiAgZXJyb3JPckRlc3Ryb3k6IGVycm9yT3JEZXN0cm95XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/destroy.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n\nvar ERR_STREAM_PREMATURE_CLOSE = (__webpack_require__(/*! ../../../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes.ERR_STREAM_PREMATURE_CLOSE);\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhOztBQUViLGlDQUFpQyxpSUFBMkQ7O0FBRTVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0VBQXdFLGFBQWE7QUFDckY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanM/ODhkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL2VuZC1vZi1zdHJlYW0gd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuXG5mdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZW9zKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gIHZhciByZWFkYWJsZSA9IG9wdHMucmVhZGFibGUgfHwgb3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlO1xuICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTtcblxuICB2YXIgb25sZWdhY3lmaW5pc2ggPSBmdW5jdGlvbiBvbmxlZ2FjeWZpbmlzaCgpIHtcbiAgICBpZiAoIXN0cmVhbS53cml0YWJsZSkgb25maW5pc2goKTtcbiAgfTtcblxuICB2YXIgd3JpdGFibGVFbmRlZCA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZSAmJiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQ7XG5cbiAgdmFyIG9uZmluaXNoID0gZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgd3JpdGFibGUgPSBmYWxzZTtcbiAgICB3cml0YWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIHJlYWRhYmxlRW5kZWQgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGUgJiYgc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ7XG5cbiAgdmFyIG9uZW5kID0gZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgcmVhZGFibGUgPSBmYWxzZTtcbiAgICByZWFkYWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXdyaXRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICB9O1xuXG4gIHZhciBvbmNsb3NlID0gZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICB2YXIgZXJyO1xuXG4gICAgaWYgKHJlYWRhYmxlICYmICFyZWFkYWJsZUVuZGVkKSB7XG4gICAgICBpZiAoIXN0cmVhbS5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBpZiAod3JpdGFibGUgJiYgIXdyaXRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24gb25yZXF1ZXN0KCkge1xuICAgIHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgfTtcblxuICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcbiAgICBzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICB9IGVsc2UgaWYgKHdyaXRhYmxlICYmICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAvLyBsZWdhY3kgc3RyZWFtc1xuICAgIHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gIH1cblxuICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcbiAgc3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlb3M7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/from-browser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/from-browser.js ***!
  \***************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Zyb20tYnJvd3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9mcm9tLWJyb3dzZXIuanM/OWQ1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdSZWFkYWJsZS5mcm9tIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXInKVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/from-browser.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/pipeline.js":
/*!***********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/pipeline.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = (__webpack_require__(/*! ../../../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes),\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = __webpack_require__(/*! ./end-of-stream */ \"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3BpcGVsaW5lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixzR0FBZ0M7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCwrQkFBK0IsbUJBQU8sQ0FBQyw2RkFBaUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5RUFBeUUsYUFBYTtBQUN0RjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanM/OTVmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL3B1bXAgd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlb3M7XG5cbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1MsXG4gICAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRDtcblxuZnVuY3Rpb24gbm9vcChlcnIpIHtcbiAgLy8gUmV0aHJvdyB0aGUgZXJyb3IgaWYgaXQgZXhpc3RzIHRvIGF2b2lkIHN3YWxsb3dpbmcgaXRcbiAgaWYgKGVycikgdGhyb3cgZXJyO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVlc3Qoc3RyZWFtKSB7XG4gIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayk7XG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICB9KTtcbiAgaWYgKGVvcyA9PT0gdW5kZWZpbmVkKSBlb3MgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcbiAgZW9zKHN0cmVhbSwge1xuICAgIHJlYWRhYmxlOiByZWFkaW5nLFxuICAgIHdyaXRhYmxlOiB3cml0aW5nXG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0pO1xuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGNsb3NlZCkgcmV0dXJuO1xuICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICBkZXN0cm95ZWQgPSB0cnVlOyAvLyByZXF1ZXN0LmRlc3Ryb3kganVzdCBkbyAuZW5kIC0gLmFib3J0IGlzIHdoYXQgd2Ugd2FudFxuXG4gICAgaWYgKGlzUmVxdWVzdChzdHJlYW0pKSByZXR1cm4gc3RyZWFtLmFib3J0KCk7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgY2FsbGJhY2soZXJyIHx8IG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgncGlwZScpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsbChmbikge1xuICBmbigpO1xufVxuXG5mdW5jdGlvbiBwaXBlKGZyb20sIHRvKSB7XG4gIHJldHVybiBmcm9tLnBpcGUodG8pO1xufVxuXG5mdW5jdGlvbiBwb3BDYWxsYmFjayhzdHJlYW1zKSB7XG4gIGlmICghc3RyZWFtcy5sZW5ndGgpIHJldHVybiBub29wO1xuICBpZiAodHlwZW9mIHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5vb3A7XG4gIHJldHVybiBzdHJlYW1zLnBvcCgpO1xufVxuXG5mdW5jdGlvbiBwaXBlbGluZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3RyZWFtc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjYWxsYmFjayA9IHBvcENhbGxiYWNrKHN0cmVhbXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHJlYW1zWzBdKSkgc3RyZWFtcyA9IHN0cmVhbXNbMF07XG5cbiAgaWYgKHN0cmVhbXMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdzdHJlYW1zJyk7XG4gIH1cblxuICB2YXIgZXJyb3I7XG4gIHZhciBkZXN0cm95cyA9IHN0cmVhbXMubWFwKGZ1bmN0aW9uIChzdHJlYW0sIGkpIHtcbiAgICB2YXIgcmVhZGluZyA9IGkgPCBzdHJlYW1zLmxlbmd0aCAtIDE7XG4gICAgdmFyIHdyaXRpbmcgPSBpID4gMDtcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gICAgICBpZiAoZXJyKSBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjtcbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UocGlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGlwZWxpbmU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/pipeline.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/state.js":
/*!********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/state.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar ERR_INVALID_OPT_VALUE = (__webpack_require__(/*! ../../../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes.ERR_INVALID_OPT_VALUE);\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDRCQUE0Qiw0SEFBc0Q7O0FBRWxGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJOzs7QUFHSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzPzI2NTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuXG5mdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gIHJldHVybiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMuaGlnaFdhdGVyTWFyayA6IGlzRHVwbGV4ID8gb3B0aW9uc1tkdXBsZXhLZXldIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0SGlnaFdhdGVyTWFyayhzdGF0ZSwgb3B0aW9ucywgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICB2YXIgaHdtID0gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSk7XG5cbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcihod20pO1xuICB9IC8vIERlZmF1bHQgdmFsdWVcblxuXG4gIHJldHVybiBzdGF0ZS5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/state.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtHQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzPzFjMjYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js\n"));

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"./node_modules/readable-stream/lib/_stream_passthrough.js\");\nexports.finished = __webpack_require__(/*! ./lib/internal/streams/end-of-stream.js */ \"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nexports.pipeline = __webpack_require__(/*! ./lib/internal/streams/pipeline.js */ \"./node_modules/readable-stream/lib/internal/streams/pipeline.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsVUFBVSwrSEFBcUQ7QUFDL0QsY0FBYztBQUNkLGdCQUFnQjtBQUNoQixpSUFBdUQ7QUFDdkQsMkhBQW1EO0FBQ25ELG9JQUF5RDtBQUN6RCwwSUFBNkQ7QUFDN0QsNkpBQXFFO0FBQ3JFLG1KQUFnRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanM/ZjQyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuZXhwb3J0cy5maW5pc2hlZCA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvZW5kLW9mLXN0cmVhbS5qcycpO1xuZXhwb3J0cy5waXBlbGluZSA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/readable-browser.js\n"));

/***/ }),

/***/ "./node_modules/readable-web-to-node-stream/lib/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-web-to-node-stream/lib/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadableWebToNodeStream = void 0;\nconst readable_stream_1 = __webpack_require__(/*! readable-stream */ \"./node_modules/readable-stream/readable-browser.js\");\n/**\n * Converts a Web-API stream into Node stream.Readable class\n * Node stream readable: https://nodejs.org/api/stream.html#stream_readable_streams\n * Web API readable-stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n * Node readable stream: https://nodejs.org/api/stream.html#stream_readable_streams\n */\nclass ReadableWebToNodeStream extends readable_stream_1.Readable {\n    /**\n     *\n     * @param stream Readable​Stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n     */\n    constructor(stream) {\n        super();\n        this.bytesRead = 0;\n        this.released = false;\n        this.reader = stream.getReader();\n    }\n    /**\n     * Implementation of readable._read(size).\n     * When readable._read() is called, if data is available from the resource,\n     * the implementation should begin pushing that data into the read queue\n     * https://nodejs.org/api/stream.html#stream_readable_read_size_1\n     */\n    async _read() {\n        // Should start pushing data into the queue\n        // Read data from the underlying Web-API-readable-stream\n        if (this.released) {\n            this.push(null); // Signal EOF\n            return;\n        }\n        this.pendingRead = this.reader.read();\n        const data = await this.pendingRead;\n        // clear the promise before pushing pushing new data to the queue and allow sequential calls to _read()\n        delete this.pendingRead;\n        if (data.done || this.released) {\n            this.push(null); // Signal EOF\n        }\n        else {\n            this.bytesRead += data.value.length;\n            this.push(data.value); // Push new data to the queue\n        }\n    }\n    /**\n     * If there is no unresolved read call to Web-API Readable​Stream immediately returns;\n     * otherwise will wait until the read is resolved.\n     */\n    async waitForReadToComplete() {\n        if (this.pendingRead) {\n            await this.pendingRead;\n        }\n    }\n    /**\n     * Close wrapper\n     */\n    async close() {\n        await this.syncAndRelease();\n    }\n    async syncAndRelease() {\n        this.released = true;\n        await this.waitForReadToComplete();\n        await this.reader.releaseLock();\n    }\n}\nexports.ReadableWebToNodeStream = ReadableWebToNodeStream;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtd2ViLXRvLW5vZGUtc3RyZWFtL2xpYi9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsMkVBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtd2ViLXRvLW5vZGUtc3RyZWFtL2xpYi9pbmRleC5qcz80ZGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFkYWJsZVdlYlRvTm9kZVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHJlYWRhYmxlX3N0cmVhbV8xID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKTtcbi8qKlxuICogQ29udmVydHMgYSBXZWItQVBJIHN0cmVhbSBpbnRvIE5vZGUgc3RyZWFtLlJlYWRhYmxlIGNsYXNzXG4gKiBOb2RlIHN0cmVhbSByZWFkYWJsZTogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbCNzdHJlYW1fcmVhZGFibGVfc3RyZWFtc1xuICogV2ViIEFQSSByZWFkYWJsZS1zdHJlYW06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9SZWFkYWJsZVN0cmVhbVxuICogTm9kZSByZWFkYWJsZSBzdHJlYW06IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3N0cmVhbXNcbiAqL1xuY2xhc3MgUmVhZGFibGVXZWJUb05vZGVTdHJlYW0gZXh0ZW5kcyByZWFkYWJsZV9zdHJlYW1fMS5SZWFkYWJsZSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyZWFtIFJlYWRhYmxl4oCLU3RyZWFtOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUmVhZGFibGVTdHJlYW1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ieXRlc1JlYWQgPSAwO1xuICAgICAgICB0aGlzLnJlbGVhc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBvZiByZWFkYWJsZS5fcmVhZChzaXplKS5cbiAgICAgKiBXaGVuIHJlYWRhYmxlLl9yZWFkKCkgaXMgY2FsbGVkLCBpZiBkYXRhIGlzIGF2YWlsYWJsZSBmcm9tIHRoZSByZXNvdXJjZSxcbiAgICAgKiB0aGUgaW1wbGVtZW50YXRpb24gc2hvdWxkIGJlZ2luIHB1c2hpbmcgdGhhdCBkYXRhIGludG8gdGhlIHJlYWQgcXVldWVcbiAgICAgKiBodHRwczovL25vZGVqcy5vcmcvYXBpL3N0cmVhbS5odG1sI3N0cmVhbV9yZWFkYWJsZV9yZWFkX3NpemVfMVxuICAgICAqL1xuICAgIGFzeW5jIF9yZWFkKCkge1xuICAgICAgICAvLyBTaG91bGQgc3RhcnQgcHVzaGluZyBkYXRhIGludG8gdGhlIHF1ZXVlXG4gICAgICAgIC8vIFJlYWQgZGF0YSBmcm9tIHRoZSB1bmRlcmx5aW5nIFdlYi1BUEktcmVhZGFibGUtc3RyZWFtXG4gICAgICAgIGlmICh0aGlzLnJlbGVhc2VkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2gobnVsbCk7IC8vIFNpZ25hbCBFT0ZcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmdSZWFkID0gdGhpcy5yZWFkZXIucmVhZCgpO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wZW5kaW5nUmVhZDtcbiAgICAgICAgLy8gY2xlYXIgdGhlIHByb21pc2UgYmVmb3JlIHB1c2hpbmcgcHVzaGluZyBuZXcgZGF0YSB0byB0aGUgcXVldWUgYW5kIGFsbG93IHNlcXVlbnRpYWwgY2FsbHMgdG8gX3JlYWQoKVxuICAgICAgICBkZWxldGUgdGhpcy5wZW5kaW5nUmVhZDtcbiAgICAgICAgaWYgKGRhdGEuZG9uZSB8fCB0aGlzLnJlbGVhc2VkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2gobnVsbCk7IC8vIFNpZ25hbCBFT0ZcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnl0ZXNSZWFkICs9IGRhdGEudmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5wdXNoKGRhdGEudmFsdWUpOyAvLyBQdXNoIG5ldyBkYXRhIHRvIHRoZSBxdWV1ZVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZXJlIGlzIG5vIHVucmVzb2x2ZWQgcmVhZCBjYWxsIHRvIFdlYi1BUEkgUmVhZGFibGXigItTdHJlYW0gaW1tZWRpYXRlbHkgcmV0dXJucztcbiAgICAgKiBvdGhlcndpc2Ugd2lsbCB3YWl0IHVudGlsIHRoZSByZWFkIGlzIHJlc29sdmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRGb3JSZWFkVG9Db21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1JlYWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGVuZGluZ1JlYWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2Ugd3JhcHBlclxuICAgICAqL1xuICAgIGFzeW5jIGNsb3NlKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnN5bmNBbmRSZWxlYXNlKCk7XG4gICAgfVxuICAgIGFzeW5jIHN5bmNBbmRSZWxlYXNlKCkge1xuICAgICAgICB0aGlzLnJlbGVhc2VkID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yUmVhZFRvQ29tcGxldGUoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICB9XG59XG5leHBvcnRzLlJlYWRhYmxlV2ViVG9Ob2RlU3RyZWFtID0gUmVhZGFibGVXZWJUb05vZGVTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/readable-web-to-node-stream/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyw4Q0FBUTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFLGNBQWM7QUFDaEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcz9jZjJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBzYWZlLWJ1ZmZlci4gTUlUIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyLnByb3RvdHlwZSlcblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/safe-buffer/index.js\n"));

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer);\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/string_decoder/lib/string_decoder.js\n"));

/***/ }),

/***/ "./node_modules/strtok3/lib/AbstractTokenizer.js":
/*!*******************************************************!*\
  !*** ./node_modules/strtok3/lib/AbstractTokenizer.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AbstractTokenizer = void 0;\r\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\r\n/**\r\n * Core tokenizer\r\n */\r\nclass AbstractTokenizer {\r\n    constructor(fileInfo) {\r\n        /**\r\n         * Tokenizer-stream position\r\n         */\r\n        this.position = 0;\r\n        this.numBuffer = new Uint8Array(8);\r\n        this.fileInfo = fileInfo ? fileInfo : {};\r\n    }\r\n    /**\r\n     * Read a token from the tokenizer-stream\r\n     * @param token - The token to read\r\n     * @param position - If provided, the desired position in the tokenizer-stream\r\n     * @returns Promise with token data\r\n     */\r\n    async readToken(token, position = this.position) {\r\n        const uint8Array = Buffer.alloc(token.len);\r\n        const len = await this.readBuffer(uint8Array, { position });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(uint8Array, 0);\r\n    }\r\n    /**\r\n     * Peek a token from the tokenizer-stream.\r\n     * @param token - Token to peek from the tokenizer-stream.\r\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\r\n     * @returns Promise with token data\r\n     */\r\n    async peekToken(token, position = this.position) {\r\n        const uint8Array = Buffer.alloc(token.len);\r\n        const len = await this.peekBuffer(uint8Array, { position });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(uint8Array, 0);\r\n    }\r\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */\r\n    async readNumber(token) {\r\n        const len = await this.readBuffer(this.numBuffer, { length: token.len });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(this.numBuffer, 0);\r\n    }\r\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */\r\n    async peekNumber(token) {\r\n        const len = await this.peekBuffer(this.numBuffer, { length: token.len });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(this.numBuffer, 0);\r\n    }\r\n    /**\r\n     * Ignore number of bytes, advances the pointer in under tokenizer-stream.\r\n     * @param length - Number of bytes to ignore\r\n     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\r\n     */\r\n    async ignore(length) {\r\n        if (this.fileInfo.size !== undefined) {\r\n            const bytesLeft = this.fileInfo.size - this.position;\r\n            if (length > bytesLeft) {\r\n                this.position += bytesLeft;\r\n                return bytesLeft;\r\n            }\r\n        }\r\n        this.position += length;\r\n        return length;\r\n    }\r\n    async close() {\r\n        // empty\r\n    }\r\n    normalizeOptions(uint8Array, options) {\r\n        if (options && options.position !== undefined && options.position < this.position) {\r\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n        }\r\n        if (options) {\r\n            return {\r\n                mayBeLess: options.mayBeLess === true,\r\n                offset: options.offset ? options.offset : 0,\r\n                length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),\r\n                position: options.position ? options.position : this.position\r\n            };\r\n        }\r\n        return {\r\n            mayBeLess: false,\r\n            offset: 0,\r\n            length: uint8Array.length,\r\n            position: this.position\r\n        };\r\n    }\r\n}\r\nexports.AbstractTokenizer = AbstractTokenizer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvQWJzdHJhY3RUb2tlbml6ZXIuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix3QkFBd0IsbUJBQU8sQ0FBQyxnRUFBZTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixNQUFNO0FBQ2pDLHdEQUF3RCxVQUFVO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsTUFBTTtBQUNqQyx3REFBd0QsVUFBVTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxtQkFBbUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsbUJBQW1CO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9BYnN0cmFjdFRva2VuaXplci5qcz8yMTY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQWJzdHJhY3RUb2tlbml6ZXIgPSB2b2lkIDA7XHJcbmNvbnN0IHBlZWtfcmVhZGFibGVfMSA9IHJlcXVpcmUoXCJwZWVrLXJlYWRhYmxlXCIpO1xyXG4vKipcclxuICogQ29yZSB0b2tlbml6ZXJcclxuICovXHJcbmNsYXNzIEFic3RyYWN0VG9rZW5pemVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGZpbGVJbmZvKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVG9rZW5pemVyLXN0cmVhbSBwb3NpdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMubnVtQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoOCk7XHJcbiAgICAgICAgdGhpcy5maWxlSW5mbyA9IGZpbGVJbmZvID8gZmlsZUluZm8gOiB7fTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIHRva2VuIGZyb20gdGhlIHRva2VuaXplci1zdHJlYW1cclxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byByZWFkXHJcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gLSBJZiBwcm92aWRlZCwgdGhlIGRlc2lyZWQgcG9zaXRpb24gaW4gdGhlIHRva2VuaXplci1zdHJlYW1cclxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCB0b2tlbiBkYXRhXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlYWRUb2tlbih0b2tlbiwgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgdWludDhBcnJheSA9IEJ1ZmZlci5hbGxvYyh0b2tlbi5sZW4pO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IGF3YWl0IHRoaXMucmVhZEJ1ZmZlcih1aW50OEFycmF5LCB7IHBvc2l0aW9uIH0pO1xyXG4gICAgICAgIGlmIChsZW4gPCB0b2tlbi5sZW4pXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBwZWVrX3JlYWRhYmxlXzEuRW5kT2ZTdHJlYW1FcnJvcigpO1xyXG4gICAgICAgIHJldHVybiB0b2tlbi5nZXQodWludDhBcnJheSwgMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlZWsgYSB0b2tlbiBmcm9tIHRoZSB0b2tlbml6ZXItc3RyZWFtLlxyXG4gICAgICogQHBhcmFtIHRva2VuIC0gVG9rZW4gdG8gcGVlayBmcm9tIHRoZSB0b2tlbml6ZXItc3RyZWFtLlxyXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIC0gT2Zmc2V0IHdoZXJlIHRvIGJlZ2luIHJlYWRpbmcgd2l0aGluIHRoZSBmaWxlLiBJZiBwb3NpdGlvbiBpcyBudWxsLCBkYXRhIHdpbGwgYmUgcmVhZCBmcm9tIHRoZSBjdXJyZW50IGZpbGUgcG9zaXRpb24uXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHdpdGggdG9rZW4gZGF0YVxyXG4gICAgICovXHJcbiAgICBhc3luYyBwZWVrVG9rZW4odG9rZW4sIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBCdWZmZXIuYWxsb2ModG9rZW4ubGVuKTtcclxuICAgICAgICBjb25zdCBsZW4gPSBhd2FpdCB0aGlzLnBlZWtCdWZmZXIodWludDhBcnJheSwgeyBwb3NpdGlvbiB9KTtcclxuICAgICAgICBpZiAobGVuIDwgdG9rZW4ubGVuKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgcGVla19yZWFkYWJsZV8xLkVuZE9mU3RyZWFtRXJyb3IoKTtcclxuICAgICAgICByZXR1cm4gdG9rZW4uZ2V0KHVpbnQ4QXJyYXksIDApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGEgbnVtZXJpYyB0b2tlbiBmcm9tIHRoZSBzdHJlYW1cclxuICAgICAqIEBwYXJhbSB0b2tlbiAtIE51bWVyaWMgdG9rZW5cclxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCBudW1iZXJcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVhZE51bWJlcih0b2tlbikge1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IGF3YWl0IHRoaXMucmVhZEJ1ZmZlcih0aGlzLm51bUJ1ZmZlciwgeyBsZW5ndGg6IHRva2VuLmxlbiB9KTtcclxuICAgICAgICBpZiAobGVuIDwgdG9rZW4ubGVuKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgcGVla19yZWFkYWJsZV8xLkVuZE9mU3RyZWFtRXJyb3IoKTtcclxuICAgICAgICByZXR1cm4gdG9rZW4uZ2V0KHRoaXMubnVtQnVmZmVyLCAwKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIG51bWVyaWMgdG9rZW4gZnJvbSB0aGUgc3RyZWFtXHJcbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBOdW1lcmljIHRva2VuXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHdpdGggbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBlZWtOdW1iZXIodG9rZW4pIHtcclxuICAgICAgICBjb25zdCBsZW4gPSBhd2FpdCB0aGlzLnBlZWtCdWZmZXIodGhpcy5udW1CdWZmZXIsIHsgbGVuZ3RoOiB0b2tlbi5sZW4gfSk7XHJcbiAgICAgICAgaWYgKGxlbiA8IHRva2VuLmxlbilcclxuICAgICAgICAgICAgdGhyb3cgbmV3IHBlZWtfcmVhZGFibGVfMS5FbmRPZlN0cmVhbUVycm9yKCk7XHJcbiAgICAgICAgcmV0dXJuIHRva2VuLmdldCh0aGlzLm51bUJ1ZmZlciwgMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIElnbm9yZSBudW1iZXIgb2YgYnl0ZXMsIGFkdmFuY2VzIHRoZSBwb2ludGVyIGluIHVuZGVyIHRva2VuaXplci1zdHJlYW0uXHJcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIC0gTnVtYmVyIG9mIGJ5dGVzIHRvIGlnbm9yZVxyXG4gICAgICogQHJldHVybiByZXNvbHZlcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIGlnbm9yZWQsIGVxdWFscyBsZW5ndGggaWYgdGhpcyBhdmFpbGFibGUsIG90aGVyd2lzZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZVxyXG4gICAgICovXHJcbiAgICBhc3luYyBpZ25vcmUobGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZUluZm8uc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzTGVmdCA9IHRoaXMuZmlsZUluZm8uc2l6ZSAtIHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgICAgIGlmIChsZW5ndGggPiBieXRlc0xlZnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gKz0gYnl0ZXNMZWZ0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzTGVmdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGxlbmd0aDtcclxuICAgICAgICByZXR1cm4gbGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgY2xvc2UoKSB7XHJcbiAgICAgICAgLy8gZW1wdHlcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZU9wdGlvbnModWludDhBcnJheSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucG9zaXRpb24gIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnBvc2l0aW9uIDwgdGhpcy5wb3NpdGlvbikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBvc2l0aW9uYCBtdXN0IGJlIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiBgdG9rZW5pemVyLnBvc2l0aW9uYCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbWF5QmVMZXNzOiBvcHRpb25zLm1heUJlTGVzcyA9PT0gdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9mZnNldDogb3B0aW9ucy5vZmZzZXQgPyBvcHRpb25zLm9mZnNldCA6IDAsXHJcbiAgICAgICAgICAgICAgICBsZW5ndGg6IG9wdGlvbnMubGVuZ3RoID8gb3B0aW9ucy5sZW5ndGggOiAodWludDhBcnJheS5sZW5ndGggLSAob3B0aW9ucy5vZmZzZXQgPyBvcHRpb25zLm9mZnNldCA6IDApKSxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uID8gb3B0aW9ucy5wb3NpdGlvbiA6IHRoaXMucG9zaXRpb25cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWF5QmVMZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICBsZW5ndGg6IHVpbnQ4QXJyYXkubGVuZ3RoLFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5wb3NpdGlvblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BYnN0cmFjdFRva2VuaXplciA9IEFic3RyYWN0VG9rZW5pemVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/strtok3/lib/AbstractTokenizer.js\n"));

/***/ }),

/***/ "./node_modules/strtok3/lib/BufferTokenizer.js":
/*!*****************************************************!*\
  !*** ./node_modules/strtok3/lib/BufferTokenizer.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BufferTokenizer = void 0;\r\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\r\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"./node_modules/strtok3/lib/AbstractTokenizer.js\");\r\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\r\n    /**\r\n     * Construct BufferTokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param fileInfo - Pass additional file information to the tokenizer\r\n     */\r\n    constructor(uint8Array, fileInfo) {\r\n        super(fileInfo);\r\n        this.uint8Array = uint8Array;\r\n        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        if (options && options.position) {\r\n            if (options.position < this.position) {\r\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n            }\r\n            this.position = options.position;\r\n        }\r\n        const bytesRead = await this.peekBuffer(uint8Array, options);\r\n        this.position += bytesRead;\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\r\n        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        else {\r\n            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\r\n            return bytes2read;\r\n        }\r\n    }\r\n    async close() {\r\n        // empty\r\n    }\r\n}\r\nexports.BufferTokenizer = BufferTokenizer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvQnVmZmVyVG9rZW5pemVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2Qix3QkFBd0IsbUJBQU8sQ0FBQyxnRUFBZTtBQUMvQyw0QkFBNEIsbUJBQU8sQ0FBQyw0RUFBcUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9CdWZmZXJUb2tlbml6ZXIuanM/ZTQ5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkJ1ZmZlclRva2VuaXplciA9IHZvaWQgMDtcclxuY29uc3QgcGVla19yZWFkYWJsZV8xID0gcmVxdWlyZShcInBlZWstcmVhZGFibGVcIik7XHJcbmNvbnN0IEFic3RyYWN0VG9rZW5pemVyXzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdFRva2VuaXplclwiKTtcclxuY2xhc3MgQnVmZmVyVG9rZW5pemVyIGV4dGVuZHMgQWJzdHJhY3RUb2tlbml6ZXJfMS5BYnN0cmFjdFRva2VuaXplciB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBCdWZmZXJUb2tlbml6ZXJcclxuICAgICAqIEBwYXJhbSB1aW50OEFycmF5IC0gVWludDhBcnJheSB0byB0b2tlbml6ZVxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIC0gUGFzcyBhZGRpdGlvbmFsIGZpbGUgaW5mb3JtYXRpb24gdG8gdGhlIHRva2VuaXplclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih1aW50OEFycmF5LCBmaWxlSW5mbykge1xyXG4gICAgICAgIHN1cGVyKGZpbGVJbmZvKTtcclxuICAgICAgICB0aGlzLnVpbnQ4QXJyYXkgPSB1aW50OEFycmF5O1xyXG4gICAgICAgIHRoaXMuZmlsZUluZm8uc2l6ZSA9IHRoaXMuZmlsZUluZm8uc2l6ZSA/IHRoaXMuZmlsZUluZm8uc2l6ZSA6IHVpbnQ4QXJyYXkubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGJ1ZmZlciBmcm9tIHRva2VuaXplclxyXG4gICAgICogQHBhcmFtIHVpbnQ4QXJyYXkgLSBVaW50OEFycmF5IHRvIHRva2VuaXplXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlYWQgYmVoYXZpb3VyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlYWRCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucG9zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPCB0aGlzLnBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBvc2l0aW9uYCBtdXN0IGJlIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiBgdG9rZW5pemVyLnBvc2l0aW9uYCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBieXRlc1JlYWQgPSBhd2FpdCB0aGlzLnBlZWtCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBieXRlc1JlYWQ7XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVzUmVhZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVlayAocmVhZCBhaGVhZCkgYnVmZmVyIGZyb20gdG9rZW5pemVyXHJcbiAgICAgKiBAcGFyYW0gdWludDhBcnJheVxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBSZWFkIGJlaGF2aW91ciBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fVxyXG4gICAgICovXHJcbiAgICBhc3luYyBwZWVrQnVmZmVyKHVpbnQ4QXJyYXksIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBub3JtT3B0aW9ucyA9IHRoaXMubm9ybWFsaXplT3B0aW9ucyh1aW50OEFycmF5LCBvcHRpb25zKTtcclxuICAgICAgICBjb25zdCBieXRlczJyZWFkID0gTWF0aC5taW4odGhpcy51aW50OEFycmF5Lmxlbmd0aCAtIG5vcm1PcHRpb25zLnBvc2l0aW9uLCBub3JtT3B0aW9ucy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICgoIW5vcm1PcHRpb25zLm1heUJlTGVzcykgJiYgYnl0ZXMycmVhZCA8IG5vcm1PcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgcGVla19yZWFkYWJsZV8xLkVuZE9mU3RyZWFtRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVpbnQ4QXJyYXkuc2V0KHRoaXMudWludDhBcnJheS5zdWJhcnJheShub3JtT3B0aW9ucy5wb3NpdGlvbiwgbm9ybU9wdGlvbnMucG9zaXRpb24gKyBieXRlczJyZWFkKSwgbm9ybU9wdGlvbnMub2Zmc2V0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzMnJlYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgY2xvc2UoKSB7XHJcbiAgICAgICAgLy8gZW1wdHlcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJ1ZmZlclRva2VuaXplciA9IEJ1ZmZlclRva2VuaXplcjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/strtok3/lib/BufferTokenizer.js\n"));

/***/ }),

/***/ "./node_modules/strtok3/lib/ReadStreamTokenizer.js":
/*!*********************************************************!*\
  !*** ./node_modules/strtok3/lib/ReadStreamTokenizer.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReadStreamTokenizer = void 0;\r\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"./node_modules/strtok3/lib/AbstractTokenizer.js\");\r\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\r\nconst maxBufferSize = 256000;\r\nclass ReadStreamTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\r\n    constructor(stream, fileInfo) {\r\n        super(fileInfo);\r\n        this.streamReader = new peek_readable_1.StreamReader(stream);\r\n    }\r\n    /**\r\n     * Get file information, an HTTP-client may implement this doing a HEAD request\r\n     * @return Promise with file information\r\n     */\r\n    async getFileInfo() {\r\n        return this.fileInfo;\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream\r\n     * @param options - Read behaviour options\r\n     * @returns Promise with number of bytes read\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const skipBytes = normOptions.position - this.position;\r\n        if (skipBytes > 0) {\r\n            await this.ignore(skipBytes);\r\n            return this.readBuffer(uint8Array, options);\r\n        }\r\n        else if (skipBytes < 0) {\r\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n        }\r\n        if (normOptions.length === 0) {\r\n            return 0;\r\n        }\r\n        const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);\r\n        this.position += bytesRead;\r\n        if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array - Uint8Array (or Buffer) to write data to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise with number of bytes peeked\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        let bytesRead = 0;\r\n        if (normOptions.position) {\r\n            const skipBytes = normOptions.position - this.position;\r\n            if (skipBytes > 0) {\r\n                const skipBuffer = new Uint8Array(normOptions.length + skipBytes);\r\n                bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });\r\n                uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);\r\n                return bytesRead - skipBytes;\r\n            }\r\n            else if (skipBytes < 0) {\r\n                throw new Error('Cannot peek from a negative offset in a stream');\r\n            }\r\n        }\r\n        if (normOptions.length > 0) {\r\n            try {\r\n                bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);\r\n            }\r\n            catch (err) {\r\n                if (options && options.mayBeLess && err instanceof peek_readable_1.EndOfStreamError) {\r\n                    return 0;\r\n                }\r\n                throw err;\r\n            }\r\n            if ((!normOptions.mayBeLess) && bytesRead < normOptions.length) {\r\n                throw new peek_readable_1.EndOfStreamError();\r\n            }\r\n        }\r\n        return bytesRead;\r\n    }\r\n    async ignore(length) {\r\n        // debug(`ignore ${this.position}...${this.position + length - 1}`);\r\n        const bufSize = Math.min(maxBufferSize, length);\r\n        const buf = new Uint8Array(bufSize);\r\n        let totBytesRead = 0;\r\n        while (totBytesRead < length) {\r\n            const remaining = length - totBytesRead;\r\n            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });\r\n            if (bytesRead < 0) {\r\n                return bytesRead;\r\n            }\r\n            totBytesRead += bytesRead;\r\n        }\r\n        return totBytesRead;\r\n    }\r\n}\r\nexports.ReadStreamTokenizer = ReadStreamTokenizer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvUmVhZFN0cmVhbVRva2VuaXplci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsNEJBQTRCLG1CQUFPLENBQUMsNEVBQXFCO0FBQ3pELHdCQUF3QixtQkFBTyxDQUFDLGdFQUFlO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGtDQUFrQztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsY0FBYyxLQUFLLDJCQUEyQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELHNDQUFzQztBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9SZWFkU3RyZWFtVG9rZW5pemVyLmpzPzViNmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5SZWFkU3RyZWFtVG9rZW5pemVyID0gdm9pZCAwO1xyXG5jb25zdCBBYnN0cmFjdFRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vQWJzdHJhY3RUb2tlbml6ZXJcIik7XHJcbmNvbnN0IHBlZWtfcmVhZGFibGVfMSA9IHJlcXVpcmUoXCJwZWVrLXJlYWRhYmxlXCIpO1xyXG5jb25zdCBtYXhCdWZmZXJTaXplID0gMjU2MDAwO1xyXG5jbGFzcyBSZWFkU3RyZWFtVG9rZW5pemVyIGV4dGVuZHMgQWJzdHJhY3RUb2tlbml6ZXJfMS5BYnN0cmFjdFRva2VuaXplciB7XHJcbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIGZpbGVJbmZvKSB7XHJcbiAgICAgICAgc3VwZXIoZmlsZUluZm8pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtUmVhZGVyID0gbmV3IHBlZWtfcmVhZGFibGVfMS5TdHJlYW1SZWFkZXIoc3RyZWFtKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGZpbGUgaW5mb3JtYXRpb24sIGFuIEhUVFAtY2xpZW50IG1heSBpbXBsZW1lbnQgdGhpcyBkb2luZyBhIEhFQUQgcmVxdWVzdFxyXG4gICAgICogQHJldHVybiBQcm9taXNlIHdpdGggZmlsZSBpbmZvcm1hdGlvblxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRGaWxlSW5mbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWxlSW5mbztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBidWZmZXIgZnJvbSB0b2tlbml6ZXJcclxuICAgICAqIEBwYXJhbSB1aW50OEFycmF5IC0gVGFyZ2V0IFVpbnQ4QXJyYXkgdG8gZmlsbCB3aXRoIGRhdGEgcmVhZCBmcm9tIHRoZSB0b2tlbml6ZXItc3RyZWFtXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlYWQgYmVoYXZpb3VyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCBudW1iZXIgb2YgYnl0ZXMgcmVhZFxyXG4gICAgICovXHJcbiAgICBhc3luYyByZWFkQnVmZmVyKHVpbnQ4QXJyYXksIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBub3JtT3B0aW9ucyA9IHRoaXMubm9ybWFsaXplT3B0aW9ucyh1aW50OEFycmF5LCBvcHRpb25zKTtcclxuICAgICAgICBjb25zdCBza2lwQnl0ZXMgPSBub3JtT3B0aW9ucy5wb3NpdGlvbiAtIHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgaWYgKHNraXBCeXRlcyA+IDApIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5pZ25vcmUoc2tpcEJ5dGVzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZEJ1ZmZlcih1aW50OEFycmF5LCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc2tpcEJ5dGVzIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBvc2l0aW9uYCBtdXN0IGJlIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiBgdG9rZW5pemVyLnBvc2l0aW9uYCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9ybU9wdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBieXRlc1JlYWQgPSBhd2FpdCB0aGlzLnN0cmVhbVJlYWRlci5yZWFkKHVpbnQ4QXJyYXksIG5vcm1PcHRpb25zLm9mZnNldCwgbm9ybU9wdGlvbnMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGJ5dGVzUmVhZDtcclxuICAgICAgICBpZiAoKCFvcHRpb25zIHx8ICFvcHRpb25zLm1heUJlTGVzcykgJiYgYnl0ZXNSZWFkIDwgbm9ybU9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBwZWVrX3JlYWRhYmxlXzEuRW5kT2ZTdHJlYW1FcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZXNSZWFkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQZWVrIChyZWFkIGFoZWFkKSBidWZmZXIgZnJvbSB0b2tlbml6ZXJcclxuICAgICAqIEBwYXJhbSB1aW50OEFycmF5IC0gVWludDhBcnJheSAob3IgQnVmZmVyKSB0byB3cml0ZSBkYXRhIHRvXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlYWQgYmVoYXZpb3VyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCBudW1iZXIgb2YgYnl0ZXMgcGVla2VkXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBlZWtCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IG5vcm1PcHRpb25zID0gdGhpcy5ub3JtYWxpemVPcHRpb25zKHVpbnQ4QXJyYXksIG9wdGlvbnMpO1xyXG4gICAgICAgIGxldCBieXRlc1JlYWQgPSAwO1xyXG4gICAgICAgIGlmIChub3JtT3B0aW9ucy5wb3NpdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBza2lwQnl0ZXMgPSBub3JtT3B0aW9ucy5wb3NpdGlvbiAtIHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgICAgIGlmIChza2lwQnl0ZXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBza2lwQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobm9ybU9wdGlvbnMubGVuZ3RoICsgc2tpcEJ5dGVzKTtcclxuICAgICAgICAgICAgICAgIGJ5dGVzUmVhZCA9IGF3YWl0IHRoaXMucGVla0J1ZmZlcihza2lwQnVmZmVyLCB7IG1heUJlTGVzczogbm9ybU9wdGlvbnMubWF5QmVMZXNzIH0pO1xyXG4gICAgICAgICAgICAgICAgdWludDhBcnJheS5zZXQoc2tpcEJ1ZmZlci5zdWJhcnJheShza2lwQnl0ZXMpLCBub3JtT3B0aW9ucy5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzUmVhZCAtIHNraXBCeXRlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChza2lwQnl0ZXMgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwZWVrIGZyb20gYSBuZWdhdGl2ZSBvZmZzZXQgaW4gYSBzdHJlYW0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9ybU9wdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYnl0ZXNSZWFkID0gYXdhaXQgdGhpcy5zdHJlYW1SZWFkZXIucGVlayh1aW50OEFycmF5LCBub3JtT3B0aW9ucy5vZmZzZXQsIG5vcm1PcHRpb25zLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5tYXlCZUxlc3MgJiYgZXJyIGluc3RhbmNlb2YgcGVla19yZWFkYWJsZV8xLkVuZE9mU3RyZWFtRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKCFub3JtT3B0aW9ucy5tYXlCZUxlc3MpICYmIGJ5dGVzUmVhZCA8IG5vcm1PcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHBlZWtfcmVhZGFibGVfMS5FbmRPZlN0cmVhbUVycm9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVzUmVhZDtcclxuICAgIH1cclxuICAgIGFzeW5jIGlnbm9yZShsZW5ndGgpIHtcclxuICAgICAgICAvLyBkZWJ1ZyhgaWdub3JlICR7dGhpcy5wb3NpdGlvbn0uLi4ke3RoaXMucG9zaXRpb24gKyBsZW5ndGggLSAxfWApO1xyXG4gICAgICAgIGNvbnN0IGJ1ZlNpemUgPSBNYXRoLm1pbihtYXhCdWZmZXJTaXplLCBsZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGJ1ZlNpemUpO1xyXG4gICAgICAgIGxldCB0b3RCeXRlc1JlYWQgPSAwO1xyXG4gICAgICAgIHdoaWxlICh0b3RCeXRlc1JlYWQgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nID0gbGVuZ3RoIC0gdG90Qnl0ZXNSZWFkO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlc1JlYWQgPSBhd2FpdCB0aGlzLnJlYWRCdWZmZXIoYnVmLCB7IGxlbmd0aDogTWF0aC5taW4oYnVmU2l6ZSwgcmVtYWluaW5nKSB9KTtcclxuICAgICAgICAgICAgaWYgKGJ5dGVzUmVhZCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBieXRlc1JlYWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdG90Qnl0ZXNSZWFkICs9IGJ5dGVzUmVhZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvdEJ5dGVzUmVhZDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJlYWRTdHJlYW1Ub2tlbml6ZXIgPSBSZWFkU3RyZWFtVG9rZW5pemVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/strtok3/lib/ReadStreamTokenizer.js\n"));

/***/ }),

/***/ "./node_modules/strtok3/lib/core.js":
/*!******************************************!*\
  !*** ./node_modules/strtok3/lib/core.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\r\nconst ReadStreamTokenizer_1 = __webpack_require__(/*! ./ReadStreamTokenizer */ \"./node_modules/strtok3/lib/ReadStreamTokenizer.js\");\r\nconst BufferTokenizer_1 = __webpack_require__(/*! ./BufferTokenizer */ \"./node_modules/strtok3/lib/BufferTokenizer.js\");\r\nvar peek_readable_1 = __webpack_require__(/*! peek-readable */ \"./node_modules/peek-readable/lib/index.js\");\r\nObject.defineProperty(exports, \"EndOfStreamError\", ({ enumerable: true, get: function () { return peek_readable_1.EndOfStreamError; } }));\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\r\n * @returns ReadStreamTokenizer\r\n */\r\nfunction fromStream(stream, fileInfo) {\r\n    fileInfo = fileInfo ? fileInfo : {};\r\n    return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\r\n}\r\nexports.fromStream = fromStream;\r\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns BufferTokenizer\r\n */\r\nfunction fromBuffer(uint8Array, fileInfo) {\r\n    return new BufferTokenizer_1.BufferTokenizer(uint8Array, fileInfo);\r\n}\r\nexports.fromBuffer = fromBuffer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvY29yZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyx3QkFBd0I7QUFDbEUsOEJBQThCLG1CQUFPLENBQUMsZ0ZBQXVCO0FBQzdELDBCQUEwQixtQkFBTyxDQUFDLHdFQUFtQjtBQUNyRCxzQkFBc0IsbUJBQU8sQ0FBQyxnRUFBZTtBQUM3QyxvREFBbUQsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N0cnRvazMvbGliL2NvcmUuanM/ZjU1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmZyb21CdWZmZXIgPSBleHBvcnRzLmZyb21TdHJlYW0gPSBleHBvcnRzLkVuZE9mU3RyZWFtRXJyb3IgPSB2b2lkIDA7XHJcbmNvbnN0IFJlYWRTdHJlYW1Ub2tlbml6ZXJfMSA9IHJlcXVpcmUoXCIuL1JlYWRTdHJlYW1Ub2tlbml6ZXJcIik7XHJcbmNvbnN0IEJ1ZmZlclRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyVG9rZW5pemVyXCIpO1xyXG52YXIgcGVla19yZWFkYWJsZV8xID0gcmVxdWlyZShcInBlZWstcmVhZGFibGVcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVuZE9mU3RyZWFtRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlZWtfcmVhZGFibGVfMS5FbmRPZlN0cmVhbUVycm9yOyB9IH0pO1xyXG4vKipcclxuICogQ29uc3RydWN0IFJlYWRTdHJlYW1Ub2tlbml6ZXIgZnJvbSBnaXZlbiBTdHJlYW0uXHJcbiAqIFdpbGwgc2V0IGZpbGVTaXplLCBpZiBwcm92aWRlZCBnaXZlbiBTdHJlYW0gaGFzIHNldCB0aGUgLnBhdGggcHJvcGVydHkvXHJcbiAqIEBwYXJhbSBzdHJlYW0gLSBSZWFkIGZyb20gTm9kZS5qcyBTdHJlYW0uUmVhZGFibGVcclxuICogQHBhcmFtIGZpbGVJbmZvIC0gUGFzcyB0aGUgZmlsZSBpbmZvcm1hdGlvbiwgbGlrZSBzaXplIGFuZCBNSU1FLXR5cGUgb2YgdGhlIGNvcnJlc3BvbmRpbmcgc3RyZWFtLlxyXG4gKiBAcmV0dXJucyBSZWFkU3RyZWFtVG9rZW5pemVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tU3RyZWFtKHN0cmVhbSwgZmlsZUluZm8pIHtcclxuICAgIGZpbGVJbmZvID0gZmlsZUluZm8gPyBmaWxlSW5mbyA6IHt9O1xyXG4gICAgcmV0dXJuIG5ldyBSZWFkU3RyZWFtVG9rZW5pemVyXzEuUmVhZFN0cmVhbVRva2VuaXplcihzdHJlYW0sIGZpbGVJbmZvKTtcclxufVxyXG5leHBvcnRzLmZyb21TdHJlYW0gPSBmcm9tU3RyZWFtO1xyXG4vKipcclxuICogQ29uc3RydWN0IFJlYWRTdHJlYW1Ub2tlbml6ZXIgZnJvbSBnaXZlbiBCdWZmZXIuXHJcbiAqIEBwYXJhbSB1aW50OEFycmF5IC0gVWludDhBcnJheSB0byB0b2tlbml6ZVxyXG4gKiBAcGFyYW0gZmlsZUluZm8gLSBQYXNzIGFkZGl0aW9uYWwgZmlsZSBpbmZvcm1hdGlvbiB0byB0aGUgdG9rZW5pemVyXHJcbiAqIEByZXR1cm5zIEJ1ZmZlclRva2VuaXplclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbUJ1ZmZlcih1aW50OEFycmF5LCBmaWxlSW5mbykge1xyXG4gICAgcmV0dXJuIG5ldyBCdWZmZXJUb2tlbml6ZXJfMS5CdWZmZXJUb2tlbml6ZXIodWludDhBcnJheSwgZmlsZUluZm8pO1xyXG59XHJcbmV4cG9ydHMuZnJvbUJ1ZmZlciA9IGZyb21CdWZmZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/strtok3/lib/core.js\n"));

/***/ }),

/***/ "./node_modules/token-types/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/token-types/lib/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AnsiStringType = exports.StringType = exports.BufferType = exports.Uint8ArrayType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\");\n// Primitive types\nfunction dv(array) {\n    return new DataView(array.buffer, array.byteOffset);\n}\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n    len: 1,\n    get(array, offset) {\n        return dv(array).getUint8(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint8(offset, value);\n        return offset + 1;\n    }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getUint16(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setUint16(offset, value, true);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getUint16(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint16(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n    len: 3,\n    get(array, offset) {\n        const dataView = dv(array);\n        return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint8(offset, value & 0xff);\n        dataView.setUint16(offset + 1, value >> 8, true);\n        return offset + 3;\n    }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n    len: 3,\n    get(array, offset) {\n        const dataView = dv(array);\n        return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint16(offset, value >> 8);\n        dataView.setUint8(offset + 2, value & 0xff);\n        return offset + 3;\n    }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getUint32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setUint32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getUint32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n    len: 1,\n    get(array, offset) {\n        return dv(array).getInt8(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt8(offset, value);\n        return offset + 1;\n    }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getInt16(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt16(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getInt16(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setInt16(offset, value, true);\n        return offset + 2;\n    }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n    len: 3,\n    get(array, offset) {\n        const unsigned = exports.UINT24_LE.get(array, offset);\n        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint8(offset, value & 0xff);\n        dataView.setUint16(offset + 1, value >> 8, true);\n        return offset + 3;\n    }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n    len: 3,\n    get(array, offset) {\n        const unsigned = exports.UINT24_BE.get(array, offset);\n        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint16(offset, value >> 8);\n        dataView.setUint8(offset + 2, value & 0xff);\n        return offset + 3;\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getInt32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getInt32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setInt32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigUint64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setBigUint64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigInt64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setBigInt64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigUint64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setBigUint64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigInt64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setBigInt64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n    len: 2,\n    get(dataView, offset) {\n        return ieee754.read(dataView, offset, false, 10, this.len);\n    },\n    put(dataView, offset, value) {\n        ieee754.write(dataView, value, offset, false, 10, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n    len: 2,\n    get(array, offset) {\n        return ieee754.read(array, offset, true, 10, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, true, 10, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getFloat32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getFloat32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getFloat64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getFloat64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n    len: 10,\n    get(array, offset) {\n        return ieee754.read(array, offset, false, 63, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, false, 63, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n    len: 10,\n    get(array, offset) {\n        return ieee754.read(array, offset, true, 63, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, true, 63, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n    /**\n     * @param len number of bytes to ignore\n     */\n    constructor(len) {\n        this.len = len;\n    }\n    // ToDo: don't read, but skip data\n    get(array, off) {\n    }\n}\nexports.IgnoreType = IgnoreType;\nclass Uint8ArrayType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(array, offset) {\n        return array.subarray(offset, offset + this.len);\n    }\n}\nexports.Uint8ArrayType = Uint8ArrayType;\nclass BufferType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(uint8Array, off) {\n        return Buffer.from(uint8Array.subarray(off, off + this.len));\n    }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n    constructor(len, encoding) {\n        this.len = len;\n        this.encoding = encoding;\n    }\n    get(uint8Array, offset) {\n        return Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);\n    }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n    constructor(len) {\n        this.len = len;\n    }\n    static decode(buffer, offset, until) {\n        let str = '';\n        for (let i = offset; i < until; ++i) {\n            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n        }\n        return str;\n    }\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static codePointToString(cp) {\n        if (cp <= 0xFFFF) {\n            return String.fromCharCode(cp);\n        }\n        else {\n            cp -= 0x10000;\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n        }\n    }\n    static singleByteDecoder(bite) {\n        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n            return bite;\n        }\n        const codePoint = AnsiStringType.windows1252[bite - 0x80];\n        if (codePoint === null) {\n            throw Error('invaliding encoding');\n        }\n        return codePoint;\n    }\n    get(buffer, offset = 0) {\n        return AnsiStringType.decode(buffer, offset, offset + this.len);\n    }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/token-types/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!__webpack_require__.g.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = __webpack_require__.g.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUyxxQkFBTTtBQUNmLElBQUk7QUFDSjtBQUNBO0FBQ0EsWUFBWSxxQkFBTTtBQUNsQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanM/YmIzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/util-deprecate/browser.js\n"));

/***/ }),

/***/ "?c852":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?8c28":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ })

}]);